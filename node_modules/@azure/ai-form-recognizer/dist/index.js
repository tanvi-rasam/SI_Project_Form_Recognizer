'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreAuth = require('@azure/core-auth');
var tslib = require('tslib');
var coreHttp = require('@azure/core-http');
var logger$1 = require('@azure/logger');
var coreTracing = require('@azure/core-tracing');
var api = require('@opentelemetry/api');
var coreLro = require('@azure/core-lro');
require('@azure/core-paging');

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const SDK_VERSION = "3.0.0";
const DEFAULT_COGNITIVE_SCOPE = "https://cognitiveservices.azure.com/.default";
/**
 * Maximum size of input documents allowed by the Azure Form Recognizer service.
 * @internal
 */
const MAX_INPUT_DOCUMENT_SIZE = 50 * 1024 * 1024; // 50 MB
const FormRecognizerLoggingAllowedHeaderNames = [
    "apim-request-id",
    "Location",
    "Operation-Location",
    "Strict-Transport-Security",
    "X-Content-Type-Options",
    "x-envoy-upstream-service-time"
];
const FormRecognizerLoggingAllowedQueryParameters = [
    "includeTextDetails",
    "includeKeys",
    "op"
];

// Copyright (c) Microsoft Corporation.
/**
 * The @azure/logger configuration for this package.
 */
const logger = logger$1.createClientLogger("ai-form-recognizer");

// Copyright (c) Microsoft Corporation.
/**
 * Creates a span using the global tracer.
 * @ignore
 * @param name The name of the operation being performed.
 * @param tracingOptions The options for the underlying http request.
 */
function createSpan(operationName, operationOptions) {
    const tracer = coreTracing.getTracer();
    const tracingOptions = operationOptions.tracingOptions || {};
    const spanOptions = Object.assign(Object.assign({}, tracingOptions.spanOptions), { kind: api.SpanKind.INTERNAL });
    const span = tracer.startSpan(`Azure.CognitiveServices.FormRecognizer.${operationName}`, spanOptions);
    span.setAttribute("az.namespace", "Microsoft.CognitiveServices");
    let newSpanOptions = tracingOptions.spanOptions || {};
    if (span.isRecording()) {
        newSpanOptions = Object.assign(Object.assign({}, tracingOptions.spanOptions), { parent: span.context(), attributes: Object.assign(Object.assign({}, spanOptions.attributes), { "az.namespace": "Microsoft.CognitiveServices" }) });
    }
    const newTracingOptions = Object.assign(Object.assign({}, tracingOptions), { spanOptions: newSpanOptions });
    const newOperationOptions = Object.assign(Object.assign({}, operationOptions), { tracingOptions: newTracingOptions });
    return {
        span,
        updatedOptions: newOperationOptions
    };
}

// Copyright (c) Microsoft Corporation.
const SIZE_ONE_MEGA = 1024 * 1024;
/**
 * Reads a readable stream into buffer entirely. NodeJS only.
 * The maximum allowed size is specified in {@link MAX_INPUT_DOCUMENT_SIZE}.
 *
 * @export
 * @param {NodeJS.ReadableStream} stream A Node.js Readable stream
 * @returns {Promise<Buffer>} The resultant buffer.
 * @throws {Error} If buffer size is not big enough.
 */
function streamToBuffer(stream, maxSize) {
    return tslib.__awaiter(this, void 0, void 0, function* () {
        let pos = 0; // Position in stream
        let size = SIZE_ONE_MEGA;
        let buffer = Buffer.alloc(size);
        return new Promise((resolve, reject) => {
            stream.on("readable", () => {
                const chunk = stream.read();
                if (!chunk) {
                    return;
                }
                const nextPos = pos + chunk.length;
                if (size < nextPos && nextPos <= maxSize) {
                    // Keep doubling buffer until it is large enough or over max size
                    const oldSize = size;
                    while (size < nextPos && size * 2 < maxSize) {
                        size *= 2;
                    }
                    if (nextPos < size && size < maxSize) {
                        const newBuffer = Buffer.alloc(size - oldSize);
                        buffer = Buffer.concat([buffer, newBuffer]);
                    }
                    else {
                        const newBuffer = Buffer.alloc(maxSize - oldSize);
                        size = maxSize;
                        buffer = Buffer.concat([buffer, newBuffer]);
                    }
                }
                else if (nextPos > maxSize) {
                    reject(new Error(`Input stream exceeds maximum allowed size: ${maxSize}`));
                    return;
                }
                buffer.fill(chunk, pos, nextPos);
                pos = nextPos;
            });
            stream.on("end", () => {
                resolve(buffer.slice(0, pos));
            });
            stream.on("error", reject);
        });
    });
}
function getFirstFourBytesFromBlob(_data) {
    throw new Error("Blob is not supported in NodeJS environment");
}

// Copyright (c) Microsoft Corporation.
/**
 * Translate the content to a format that is understood by Form Recognizer service
 * @internal
 */
function toRequestBody(body) {
    return tslib.__awaiter(this, void 0, void 0, function* () {
        if (typeof body === "string") {
            return {
                source: body
            };
        }
        else {
            // cache stream to allow retry
            if (isReadableStream(body)) {
                return streamToBuffer(body, MAX_INPUT_DOCUMENT_SIZE);
            }
            return body;
        }
    });
}
function isReadableStream(data) {
    return "read" in data && typeof data.read === "function";
}
function isBlob(data) {
    return "size" in data && "type" in data;
}
function isArrayBuffer(data) {
    return "byteLength" in data && "slice" in data && typeof data.slice === "function";
}
function isArrayBufferView(data) {
    return "buffer" in data && "byteLength" in data && "byteOffset" in data;
}
function isSourcePath(data) {
    return "source" in data && typeof data.source === "string";
}
/**
 * Detects the content type of binary data.
 * See https://en.wikipedia.org/wiki/List_of_file_signatures
 * @internal
 */
function getContentType(data) {
    return tslib.__awaiter(this, void 0, void 0, function* () {
        if (isSourcePath(data)) {
            return undefined;
        }
        let bytes;
        if (isArrayBuffer(data)) {
            // ArrayBuffer
            if (data.byteLength < 4) {
                throw new RangeError("Invalid input. Expect more than 4 bytes of data");
            }
            bytes = new Uint8Array(data, 0, 4);
        }
        else if (isArrayBufferView(data)) {
            // ArrayBufferView
            if (data.byteLength < 4) {
                throw new RangeError("Invalid input. Expect more than 4 bytes of data");
            }
            bytes = new Uint8Array(data.buffer, 0, 4);
        }
        else if (isBlob(data)) {
            // Blob
            bytes = yield getFirstFourBytesFromBlob();
        }
        else {
            throw new Error("unsupported request body type");
        }
        if (bytes[0] === 0x25 && bytes[1] === 0x50 && bytes[2] === 0x44 && bytes[3] === 0x46) {
            return "application/pdf";
        }
        else if (bytes[0] === 0xff && bytes[1] === 0xd8) {
            return "image/jpeg";
        }
        else if (bytes[0] === 0x89 && bytes[1] === 0x50 && bytes[2] === 0x4e && bytes[3] === 0x47) {
            return "image/png";
        }
        else if ((bytes[0] === 0x49 && bytes[1] === 0x49 && bytes[2] === 0x2a && bytes[3] === 0x0) ||
            (bytes[0] === 0x4d && bytes[1] === 0x4d && bytes[2] === 0x0 && bytes[3] === 0x2a)) {
            return "image/tiff";
        }
        else {
            throw new RangeError("content type could not be detected");
        }
    });
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const TrainRequest = {
    type: {
        name: "Composite",
        className: "TrainRequest",
        modelProperties: {
            source: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "source",
                required: true,
                type: {
                    name: "String"
                }
            },
            sourceFilter: {
                serializedName: "sourceFilter",
                type: {
                    name: "Composite",
                    className: "TrainSourceFilter"
                }
            },
            useLabelFile: {
                serializedName: "useLabelFile",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const TrainSourceFilter = {
    type: {
        name: "Composite",
        className: "TrainSourceFilter",
        modelProperties: {
            prefix: {
                constraints: {
                    MaxLength: 1024
                },
                serializedName: "prefix",
                type: {
                    name: "String"
                }
            },
            includeSubfolders: {
                serializedName: "includeSubFolders",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorInformation"
                }
            }
        }
    }
};
const ErrorInformation = {
    type: {
        name: "Composite",
        className: "ErrorInformation",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Model = {
    type: {
        name: "Composite",
        className: "Model",
        modelProperties: {
            modelInfo: {
                serializedName: "modelInfo",
                type: {
                    name: "Composite",
                    className: "ModelInfo"
                }
            },
            keys: {
                serializedName: "keys",
                type: {
                    name: "Composite",
                    className: "KeysResult"
                }
            },
            trainResult: {
                serializedName: "trainResult",
                type: {
                    name: "Composite",
                    className: "TrainResult"
                }
            }
        }
    }
};
const ModelInfo = {
    type: {
        name: "Composite",
        className: "ModelInfo",
        modelProperties: {
            modelId: {
                serializedName: "modelId",
                required: true,
                type: {
                    name: "Uuid"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["creating", "ready", "invalid"]
                }
            },
            trainingStartedOn: {
                serializedName: "createdDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            trainingCompletedOn: {
                serializedName: "lastUpdatedDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const KeysResult = {
    type: {
        name: "Composite",
        className: "KeysResult",
        modelProperties: {
            clusters: {
                serializedName: "clusters",
                required: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Sequence", element: { type: { name: "String" } } },
                        constraints: { UniqueItems: true }
                    }
                }
            }
        }
    }
};
const TrainResult = {
    type: {
        name: "Composite",
        className: "TrainResult",
        modelProperties: {
            trainingDocuments: {
                serializedName: "trainingDocuments",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "TrainingDocumentInfo" }
                    }
                }
            },
            fields: {
                serializedName: "fields",
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "FormFieldsReport" }
                    }
                }
            },
            averageModelAccuracy: {
                serializedName: "averageModelAccuracy",
                type: {
                    name: "Number"
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ErrorInformation" }
                    }
                }
            }
        }
    }
};
const TrainingDocumentInfo = {
    type: {
        name: "Composite",
        className: "TrainingDocumentInfo",
        modelProperties: {
            name: {
                serializedName: "documentName",
                required: true,
                type: {
                    name: "String"
                }
            },
            pageCount: {
                serializedName: "pages",
                required: true,
                type: {
                    name: "Number"
                }
            },
            errors: {
                serializedName: "errors",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ErrorInformation" }
                    }
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["succeeded", "partiallySucceeded", "failed"]
                }
            }
        }
    }
};
const FormFieldsReport = {
    type: {
        name: "Composite",
        className: "FormFieldsReport",
        modelProperties: {
            fieldName: {
                serializedName: "fieldName",
                required: true,
                type: {
                    name: "String"
                }
            },
            accuracy: {
                serializedName: "accuracy",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SourcePath = {
    type: {
        name: "Composite",
        className: "SourcePath",
        modelProperties: {
            source: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "source",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AnalyzeOperationResult = {
    type: {
        name: "Composite",
        className: "AnalyzeOperationResult",
        modelProperties: {
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["notStarted", "running", "succeeded", "failed"]
                }
            },
            createdOn: {
                serializedName: "createdDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            lastModified: {
                serializedName: "lastUpdatedDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            analyzeResult: {
                serializedName: "analyzeResult",
                type: {
                    name: "Composite",
                    className: "AnalyzeResult"
                }
            }
        }
    }
};
const AnalyzeResult = {
    type: {
        name: "Composite",
        className: "AnalyzeResult",
        modelProperties: {
            version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "String"
                }
            },
            readResults: {
                serializedName: "readResults",
                required: true,
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "ReadResult" } }
                }
            },
            pageResults: {
                serializedName: "pageResults",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "PageResult" } }
                }
            },
            documentResults: {
                serializedName: "documentResults",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "DocumentResult" } }
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ErrorInformation" }
                    }
                }
            }
        }
    }
};
const ReadResult = {
    type: {
        name: "Composite",
        className: "ReadResult",
        modelProperties: {
            pageNumber: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "page",
                required: true,
                type: {
                    name: "Number"
                }
            },
            angle: {
                constraints: {
                    InclusiveMaximum: 180,
                    InclusiveMinimum: -180
                },
                serializedName: "angle",
                required: true,
                type: {
                    name: "Number"
                }
            },
            width: {
                constraints: {},
                serializedName: "width",
                required: true,
                type: {
                    name: "Number"
                }
            },
            height: {
                constraints: {},
                serializedName: "height",
                required: true,
                type: {
                    name: "Number"
                }
            },
            unit: {
                serializedName: "unit",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["pixel", "inch"]
                }
            },
            language: {
                serializedName: "language",
                type: {
                    name: "String"
                }
            },
            lines: {
                serializedName: "lines",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "TextLine" } }
                }
            }
        }
    }
};
const TextLine = {
    type: {
        name: "Composite",
        className: "TextLine",
        modelProperties: {
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            boundingBox: {
                constraints: {
                    MinItems: 8,
                    MaxItems: 8
                },
                serializedName: "boundingBox",
                required: true,
                type: {
                    name: "Sequence",
                    element: { type: { name: "Number" } }
                }
            },
            language: {
                serializedName: "language",
                type: {
                    name: "String"
                }
            },
            words: {
                serializedName: "words",
                required: true,
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "TextWord" } }
                }
            }
        }
    }
};
const TextWord = {
    type: {
        name: "Composite",
        className: "TextWord",
        modelProperties: {
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            boundingBox: {
                constraints: {
                    MinItems: 8,
                    MaxItems: 8
                },
                serializedName: "boundingBox",
                required: true,
                type: {
                    name: "Sequence",
                    element: { type: { name: "Number" } }
                }
            },
            confidence: {
                constraints: {
                    InclusiveMaximum: 1
                },
                serializedName: "confidence",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const PageResult = {
    type: {
        name: "Composite",
        className: "PageResult",
        modelProperties: {
            pageNumber: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "page",
                required: true,
                type: {
                    name: "Number"
                }
            },
            clusterId: {
                constraints: {},
                serializedName: "clusterId",
                type: {
                    name: "Number"
                }
            },
            keyValuePairs: {
                serializedName: "keyValuePairs",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "KeyValuePair" } }
                }
            },
            tables: {
                serializedName: "tables",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "DataTable" } }
                }
            }
        }
    }
};
const KeyValuePair = {
    type: {
        name: "Composite",
        className: "KeyValuePair",
        modelProperties: {
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            key: {
                serializedName: "key",
                type: {
                    name: "Composite",
                    className: "KeyValueElement"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "KeyValueElement"
                }
            },
            confidence: {
                constraints: {
                    InclusiveMaximum: 1
                },
                serializedName: "confidence",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const KeyValueElement = {
    type: {
        name: "Composite",
        className: "KeyValueElement",
        modelProperties: {
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            boundingBox: {
                constraints: {
                    MinItems: 8,
                    MaxItems: 8
                },
                serializedName: "boundingBox",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Number" } }
                }
            },
            elements: {
                serializedName: "elements",
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            }
        }
    }
};
const DataTable = {
    type: {
        name: "Composite",
        className: "DataTable",
        modelProperties: {
            rows: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "rows",
                required: true,
                type: {
                    name: "Number"
                }
            },
            columns: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "columns",
                required: true,
                type: {
                    name: "Number"
                }
            },
            cells: {
                serializedName: "cells",
                required: true,
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "DataTableCell" } }
                }
            }
        }
    }
};
const DataTableCell = {
    type: {
        name: "Composite",
        className: "DataTableCell",
        modelProperties: {
            rowIndex: {
                constraints: {},
                serializedName: "rowIndex",
                required: true,
                type: {
                    name: "Number"
                }
            },
            columnIndex: {
                constraints: {},
                serializedName: "columnIndex",
                required: true,
                type: {
                    name: "Number"
                }
            },
            rowSpan: {
                defaultValue: 1,
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "rowSpan",
                type: {
                    name: "Number"
                }
            },
            columnSpan: {
                defaultValue: 1,
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "columnSpan",
                type: {
                    name: "Number"
                }
            },
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            boundingBox: {
                constraints: {
                    MinItems: 8,
                    MaxItems: 8
                },
                serializedName: "boundingBox",
                required: true,
                type: {
                    name: "Sequence",
                    element: { type: { name: "Number" } }
                }
            },
            confidence: {
                constraints: {
                    InclusiveMaximum: 1
                },
                serializedName: "confidence",
                required: true,
                type: {
                    name: "Number"
                }
            },
            elements: {
                serializedName: "elements",
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            },
            isHeader: {
                serializedName: "isHeader",
                type: {
                    name: "Boolean"
                }
            },
            isFooter: {
                serializedName: "isFooter",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const DocumentResult = {
    type: {
        name: "Composite",
        className: "DocumentResult",
        modelProperties: {
            docType: {
                serializedName: "docType",
                required: true,
                type: {
                    name: "String"
                }
            },
            pageRange: {
                constraints: {
                    MinItems: 2,
                    MaxItems: 2
                },
                serializedName: "pageRange",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Number" },
                        constraints: { InclusiveMinimum: 1 }
                    }
                }
            },
            fields: {
                serializedName: "fields",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "FieldValue" } }
                }
            }
        }
    }
};
const FieldValue = {
    type: {
        name: "Composite",
        className: "FieldValue",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "string",
                        "date",
                        "time",
                        "phoneNumber",
                        "number",
                        "integer",
                        "array",
                        "object"
                    ]
                }
            },
            valueString: {
                serializedName: "valueString",
                type: {
                    name: "String"
                }
            },
            valueDate: {
                serializedName: "valueDate",
                type: {
                    name: "Date"
                }
            },
            valueTime: {
                serializedName: "valueTime",
                type: {
                    name: "String"
                }
            },
            valuePhoneNumber: {
                serializedName: "valuePhoneNumber",
                type: {
                    name: "String"
                }
            },
            valueNumber: {
                serializedName: "valueNumber",
                type: {
                    name: "Number"
                }
            },
            valueInteger: {
                serializedName: "valueInteger",
                type: {
                    name: "Number"
                }
            },
            valueArray: {
                serializedName: "valueArray",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "FieldValue" } }
                }
            },
            valueObject: {
                serializedName: "valueObject",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "FieldValue" } }
                }
            },
            text: {
                serializedName: "text",
                type: {
                    name: "String"
                }
            },
            boundingBox: {
                constraints: {
                    MinItems: 8,
                    MaxItems: 8
                },
                serializedName: "boundingBox",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Number" } }
                }
            },
            confidence: {
                constraints: {
                    InclusiveMaximum: 1
                },
                serializedName: "confidence",
                type: {
                    name: "Number"
                }
            },
            elements: {
                serializedName: "elements",
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            },
            pageNumber: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "page",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CopyRequest = {
    type: {
        name: "Composite",
        className: "CopyRequest",
        modelProperties: {
            targetResourceId: {
                constraints: {
                    Pattern: new RegExp("^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.CognitiveServices/accounts/[^/]*$"),
                    MaxLength: 1024
                },
                serializedName: "targetResourceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            targetResourceRegion: {
                constraints: {
                    Pattern: new RegExp("^[a-z0-9]+$"),
                    MaxLength: 24,
                    MinLength: 1
                },
                serializedName: "targetResourceRegion",
                required: true,
                type: {
                    name: "String"
                }
            },
            copyAuthorization: {
                serializedName: "copyAuthorization",
                type: {
                    name: "Composite",
                    className: "CopyAuthorizationResult"
                }
            }
        }
    }
};
const CopyAuthorizationResult = {
    type: {
        name: "Composite",
        className: "CopyAuthorizationResult",
        modelProperties: {
            modelId: {
                serializedName: "modelId",
                required: true,
                type: {
                    name: "String"
                }
            },
            accessToken: {
                serializedName: "accessToken",
                required: true,
                type: {
                    name: "String"
                }
            },
            expirationDateTimeTicks: {
                serializedName: "expirationDateTimeTicks",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CopyOperationResult = {
    type: {
        name: "Composite",
        className: "CopyOperationResult",
        modelProperties: {
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["notStarted", "running", "succeeded", "failed"]
                }
            },
            createdOn: {
                serializedName: "createdDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            lastModified: {
                serializedName: "lastUpdatedDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            copyResult: {
                serializedName: "copyResult",
                type: {
                    name: "Composite",
                    className: "CopyResult"
                }
            }
        }
    }
};
const CopyResult = {
    type: {
        name: "Composite",
        className: "CopyResult",
        modelProperties: {
            modelId: {
                serializedName: "modelId",
                required: true,
                type: {
                    name: "Uuid"
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "ErrorInformation" }
                    }
                }
            }
        }
    }
};
const Models = {
    type: {
        name: "Composite",
        className: "Models",
        modelProperties: {
            summary: {
                serializedName: "summary",
                type: {
                    name: "Composite",
                    className: "ModelsSummary"
                }
            },
            modelList: {
                serializedName: "modelList",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "ModelInfo" } }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ModelsSummary = {
    type: {
        name: "Composite",
        className: "ModelsSummary",
        modelProperties: {
            count: {
                serializedName: "count",
                required: true,
                type: {
                    name: "Number"
                }
            },
            limit: {
                serializedName: "limit",
                required: true,
                type: {
                    name: "Number"
                }
            },
            lastModified: {
                serializedName: "lastUpdatedDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const GeneratedClientTrainCustomModelAsyncHeaders = {
    type: {
        name: "Composite",
        className: "GeneratedClientTrainCustomModelAsyncHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GeneratedClientAnalyzeWithCustomModelHeaders = {
    type: {
        name: "Composite",
        className: "GeneratedClientAnalyzeWithCustomModelHeaders",
        modelProperties: {
            operationLocation: {
                serializedName: "operation-location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GeneratedClientCopyCustomModelHeaders = {
    type: {
        name: "Composite",
        className: "GeneratedClientCopyCustomModelHeaders",
        modelProperties: {
            operationLocation: {
                serializedName: "operation-location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GeneratedClientGenerateModelCopyAuthorizationHeaders = {
    type: {
        name: "Composite",
        className: "GeneratedClientGenerateModelCopyAuthorizationHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GeneratedClientAnalyzeReceiptAsyncHeaders = {
    type: {
        name: "Composite",
        className: "GeneratedClientAnalyzeReceiptAsyncHeaders",
        modelProperties: {
            operationLocation: {
                serializedName: "operation-location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GeneratedClientAnalyzeLayoutAsyncHeaders = {
    type: {
        name: "Composite",
        className: "GeneratedClientAnalyzeLayoutAsyncHeaders",
        modelProperties: {
            operationLocation: {
                serializedName: "operation-location",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    TrainRequest: TrainRequest,
    TrainSourceFilter: TrainSourceFilter,
    ErrorResponse: ErrorResponse,
    ErrorInformation: ErrorInformation,
    Model: Model,
    ModelInfo: ModelInfo,
    KeysResult: KeysResult,
    TrainResult: TrainResult,
    TrainingDocumentInfo: TrainingDocumentInfo,
    FormFieldsReport: FormFieldsReport,
    SourcePath: SourcePath,
    AnalyzeOperationResult: AnalyzeOperationResult,
    AnalyzeResult: AnalyzeResult,
    ReadResult: ReadResult,
    TextLine: TextLine,
    TextWord: TextWord,
    PageResult: PageResult,
    KeyValuePair: KeyValuePair,
    KeyValueElement: KeyValueElement,
    DataTable: DataTable,
    DataTableCell: DataTableCell,
    DocumentResult: DocumentResult,
    FieldValue: FieldValue,
    CopyRequest: CopyRequest,
    CopyAuthorizationResult: CopyAuthorizationResult,
    CopyOperationResult: CopyOperationResult,
    CopyResult: CopyResult,
    Models: Models,
    ModelsSummary: ModelsSummary,
    GeneratedClientTrainCustomModelAsyncHeaders: GeneratedClientTrainCustomModelAsyncHeaders,
    GeneratedClientAnalyzeWithCustomModelHeaders: GeneratedClientAnalyzeWithCustomModelHeaders,
    GeneratedClientCopyCustomModelHeaders: GeneratedClientCopyCustomModelHeaders,
    GeneratedClientGenerateModelCopyAuthorizationHeaders: GeneratedClientGenerateModelCopyAuthorizationHeaders,
    GeneratedClientAnalyzeReceiptAsyncHeaders: GeneratedClientAnalyzeReceiptAsyncHeaders,
    GeneratedClientAnalyzeLayoutAsyncHeaders: GeneratedClientAnalyzeLayoutAsyncHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const trainRequest = {
    parameterPath: "trainRequest",
    mapper: TrainRequest
};
const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const modelId = {
    parameterPath: "modelId",
    mapper: {
        serializedName: "modelId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
const includeKeys = {
    parameterPath: ["options", "includeKeys"],
    mapper: {
        serializedName: "includeKeys",
        type: {
            name: "Boolean"
        }
    }
};
const contentType1 = {
    parameterPath: "contentType",
    mapper: {
        serializedName: "Content-Type",
        required: true,
        type: {
            name: "Enum",
            allowedValues: [
                "application/pdf",
                "image/jpeg",
                "image/png",
                "image/tiff"
            ]
        }
    }
};
const fileStream = {
    parameterPath: "fileStream",
    mapper: {
        serializedName: "fileStream",
        required: true,
        type: {
            name: "Stream"
        }
    }
};
const contentType2 = {
    parameterPath: "contentType",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const fileStream1 = {
    parameterPath: ["options", "fileStream"],
    mapper: SourcePath
};
const includeTextDetails = {
    parameterPath: ["options", "includeTextDetails"],
    mapper: {
        serializedName: "includeTextDetails",
        type: {
            name: "Boolean"
        }
    }
};
const resultId = {
    parameterPath: "resultId",
    mapper: {
        serializedName: "resultId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
const copyRequest = {
    parameterPath: "copyRequest",
    mapper: CopyRequest
};
const op = {
    parameterPath: "op",
    mapper: {
        defaultValue: "full",
        isConstant: true,
        serializedName: "op",
        type: {
            name: "String"
        }
    }
};
const op1 = {
    parameterPath: "op",
    mapper: {
        defaultValue: "summary",
        isConstant: true,
        serializedName: "op",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const packageName = "@azure/ai-form-recognizer";
const packageVersion = "3.0.0";
class GeneratedClientContext extends coreHttp.ServiceClient {
    /**
     * Initializes a new instance of the GeneratedClientContext class.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *                 https://westus2.api.cognitive.microsoft.com).
     * @param options The parameter options
     */
    constructor(endpoint, options) {
        if (endpoint === undefined) {
            throw new Error("'endpoint' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        if (!options.userAgent) {
            const defaultUserAgent = coreHttp.getDefaultUserAgentValue();
            options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;
        }
        super(undefined, options);
        this.requestContentType = "application/json; charset=utf-8";
        this.baseUri = options.endpoint || "{endpoint}/formrecognizer/v2.0";
        // Parameter assignments
        this.endpoint = endpoint;
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class GeneratedClient extends GeneratedClientContext {
    /**
     * Initializes a new instance of the GeneratedClient class.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *                 https://westus2.api.cognitive.microsoft.com).
     * @param options The parameter options
     */
    constructor(endpoint, options) {
        super(endpoint, options);
    }
    /**
     * Create and train a custom model. The request must include a source parameter that is either an
     * externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or
     * valid path to a data folder in a locally mounted drive. When local paths are specified, they must
     * follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration
     * setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source
     * path would be '/input/contosodataset'. All data to be trained is expected to be under the source
     * folder or sub folders under it. Models are trained using documents that are of the following content
     * type - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff'. Other type of content is ignored.
     * @param trainRequest Training request parameters.
     * @param options The options parameters.
     */
    trainCustomModelAsync(trainRequest, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ trainRequest, options: operationOptions }, trainCustomModelAsyncOperationSpec);
    }
    /**
     * Get detailed information about a custom model.
     * @param modelId Model identifier.
     * @param options The options parameters.
     */
    getCustomModel(modelId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ modelId, options: operationOptions }, getCustomModelOperationSpec);
    }
    /**
     * Mark model for deletion. Model artifacts will be permanently removed within a predetermined period.
     * @param modelId Model identifier.
     * @param options The options parameters.
     */
    deleteCustomModel(modelId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ modelId, options: operationOptions }, deleteCustomModelOperationSpec);
    }
    /**
     * Extract key-value pairs, tables, and semantic values from a given document. The input document must
     * be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or
     * 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path)
     * of the document to be analyzed.
     * @param args Includes all the parameters for this operation.
     */
    analyzeWithCustomModel(...args) {
        let operationSpec;
        let operationArguments;
        if (args[1] === "application/pdf" ||
            args[1] === "image/jpeg" ||
            args[1] === "image/png" ||
            args[1] === "image/tiff") {
            operationSpec = analyzeWithCustomModel$binaryOperationSpec;
            operationArguments = {
                modelId: args[0],
                contentType: args[1],
                fileStream: args[2],
                options: args[3]
            };
        }
        else if (args[1] === "application/json") {
            operationSpec = analyzeWithCustomModel$jsonOperationSpec;
            operationArguments = {
                modelId: args[0],
                contentType: args[1],
                options: args[2]
            };
        }
        else {
            throw new TypeError(`"contentType" must be a valid value but instead was "${args[1]}".`);
        }
        return this.sendOperationRequest(operationArguments, operationSpec);
    }
    /**
     * Obtain current status and the result of the analyze form operation.
     * @param modelId Model identifier.
     * @param resultId Analyze operation result identifier.
     * @param options The options parameters.
     */
    getAnalyzeFormResult(modelId, resultId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ modelId, resultId, options: operationOptions }, getAnalyzeFormResultOperationSpec);
    }
    /**
     * Copy custom model stored in this resource (the source) to user specified target Form Recognizer
     * resource.
     * @param modelId Model identifier.
     * @param copyRequest Copy request parameters.
     * @param options The options parameters.
     */
    copyCustomModel(modelId, copyRequest, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ modelId, copyRequest, options: operationOptions }, copyCustomModelOperationSpec);
    }
    /**
     * Obtain current status and the result of a custom model copy operation.
     * @param modelId Model identifier.
     * @param resultId Copy operation result identifier.
     * @param options The options parameters.
     */
    getCustomModelCopyResult(modelId, resultId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ modelId, resultId, options: operationOptions }, getCustomModelCopyResultOperationSpec);
    }
    /**
     * Generate authorization to copy a model into the target Form Recognizer resource.
     * @param options The options parameters.
     */
    generateModelCopyAuthorization(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ options: operationOptions }, generateModelCopyAuthorizationOperationSpec);
    }
    /**
     * Extract field text and semantic values from a given receipt document. The input document must be of
     * one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'.
     * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the
     * document to be analyzed.
     * @param args Includes all the parameters for this operation.
     */
    analyzeReceiptAsync(...args) {
        let operationSpec;
        let operationArguments;
        if (args[0] === "application/pdf" ||
            args[0] === "image/jpeg" ||
            args[0] === "image/png" ||
            args[0] === "image/tiff") {
            operationSpec = analyzeReceiptAsync$binaryOperationSpec;
            operationArguments = {
                contentType: args[0],
                fileStream: args[1],
                options: args[2]
            };
        }
        else if (args[0] === "application/json") {
            operationSpec = analyzeReceiptAsync$jsonOperationSpec;
            operationArguments = {
                contentType: args[0],
                options: args[1]
            };
        }
        else {
            throw new TypeError(`"contentType" must be a valid value but instead was "${args[0]}".`);
        }
        return this.sendOperationRequest(operationArguments, operationSpec);
    }
    /**
     * Track the progress and obtain the result of the analyze receipt operation.
     * @param resultId Analyze operation result identifier.
     * @param options The options parameters.
     */
    getAnalyzeReceiptResult(resultId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ resultId, options: operationOptions }, getAnalyzeReceiptResultOperationSpec);
    }
    /**
     * Extract text and layout information from a given document. The input document must be of one of the
     * supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'.
     * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the
     * document to be analyzed.
     * @param args Includes all the parameters for this operation.
     */
    analyzeLayoutAsync(...args) {
        let operationSpec;
        let operationArguments;
        if (args[0] === "application/pdf" ||
            args[0] === "image/jpeg" ||
            args[0] === "image/png" ||
            args[0] === "image/tiff") {
            operationSpec = analyzeLayoutAsync$binaryOperationSpec;
            operationArguments = {
                contentType: args[0],
                fileStream: args[1],
                options: args[2]
            };
        }
        else if (args[0] === "application/json") {
            operationSpec = analyzeLayoutAsync$jsonOperationSpec;
            operationArguments = {
                contentType: args[0],
                options: args[1]
            };
        }
        else {
            throw new TypeError(`"contentType" must be a valid value but instead was "${args[0]}".`);
        }
        return this.sendOperationRequest(operationArguments, operationSpec);
    }
    /**
     * Track the progress and obtain the result of the analyze layout operation
     * @param resultId Analyze operation result identifier.
     * @param options The options parameters.
     */
    getAnalyzeLayoutResult(resultId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ resultId, options: operationOptions }, getAnalyzeLayoutResultOperationSpec);
    }
    /**
     * Get information about all custom models
     * @param options The options parameters.
     */
    listCustomModels(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ options: operationOptions }, listCustomModelsOperationSpec);
    }
    /**
     * Get information about all custom models
     * @param options The options parameters.
     */
    getCustomModels(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ options: operationOptions }, getCustomModelsOperationSpec);
    }
    /**
     * ListCustomModelsNext
     * @param nextLink The nextLink from the previous successful call to the ListCustomModels method.
     * @param options The options parameters.
     */
    listCustomModelsNext(nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ nextLink, options: operationOptions }, listCustomModelsNextOperationSpec);
    }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);
const trainCustomModelAsyncOperationSpec = {
    path: "/custom/models",
    httpMethod: "POST",
    responses: {
        201: {
            headersMapper: GeneratedClientTrainCustomModelAsyncHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: trainRequest,
    urlParameters: [endpoint],
    headerParameters: [contentType],
    mediaType: "json",
    serializer
};
const getCustomModelOperationSpec = {
    path: "/custom/models/{modelId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Model
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [includeKeys],
    urlParameters: [endpoint, modelId],
    serializer
};
const deleteCustomModelOperationSpec = {
    path: "/custom/models/{modelId}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [endpoint, modelId],
    serializer
};
const analyzeWithCustomModel$binaryOperationSpec = {
    path: "/custom/models/{modelId}/analyze",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: GeneratedClientAnalyzeWithCustomModelHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: fileStream,
    queryParameters: [includeTextDetails],
    urlParameters: [endpoint, modelId],
    headerParameters: [contentType1],
    mediaType: "binary",
    serializer
};
const analyzeWithCustomModel$jsonOperationSpec = {
    path: "/custom/models/{modelId}/analyze",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: GeneratedClientAnalyzeWithCustomModelHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: fileStream1,
    queryParameters: [includeTextDetails],
    urlParameters: [endpoint, modelId],
    headerParameters: [contentType2],
    mediaType: "json",
    serializer
};
const getAnalyzeFormResultOperationSpec = {
    path: "/custom/models/{modelId}/analyzeResults/{resultId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AnalyzeOperationResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [endpoint, modelId, resultId],
    serializer
};
const copyCustomModelOperationSpec = {
    path: "/custom/models/{modelId}/copy",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: GeneratedClientCopyCustomModelHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: copyRequest,
    urlParameters: [endpoint, modelId],
    headerParameters: [contentType],
    mediaType: "json",
    serializer
};
const getCustomModelCopyResultOperationSpec = {
    path: "/custom/models/{modelId}/copyResults/{resultId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CopyOperationResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [endpoint, modelId, resultId],
    serializer
};
const generateModelCopyAuthorizationOperationSpec = {
    path: "/custom/models/copyAuthorization",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: CopyAuthorizationResult,
            headersMapper: GeneratedClientGenerateModelCopyAuthorizationHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [endpoint],
    serializer
};
const analyzeReceiptAsync$binaryOperationSpec = {
    path: "/prebuilt/receipt/analyze",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: GeneratedClientAnalyzeReceiptAsyncHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: fileStream,
    queryParameters: [includeTextDetails],
    urlParameters: [endpoint],
    headerParameters: [contentType1],
    mediaType: "binary",
    serializer
};
const analyzeReceiptAsync$jsonOperationSpec = {
    path: "/prebuilt/receipt/analyze",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: GeneratedClientAnalyzeReceiptAsyncHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: fileStream1,
    queryParameters: [includeTextDetails],
    urlParameters: [endpoint],
    headerParameters: [contentType2],
    mediaType: "json",
    serializer
};
const getAnalyzeReceiptResultOperationSpec = {
    path: "/prebuilt/receipt/analyzeResults/{resultId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AnalyzeOperationResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [endpoint, resultId],
    serializer
};
const analyzeLayoutAsync$binaryOperationSpec = {
    path: "/layout/analyze",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: GeneratedClientAnalyzeLayoutAsyncHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: fileStream,
    urlParameters: [endpoint],
    headerParameters: [contentType1],
    mediaType: "binary",
    serializer
};
const analyzeLayoutAsync$jsonOperationSpec = {
    path: "/layout/analyze",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: GeneratedClientAnalyzeLayoutAsyncHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: fileStream1,
    urlParameters: [endpoint],
    headerParameters: [contentType2],
    mediaType: "json",
    serializer
};
const getAnalyzeLayoutResultOperationSpec = {
    path: "/layout/analyzeResults/{resultId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AnalyzeOperationResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [endpoint, resultId],
    serializer
};
const listCustomModelsOperationSpec = {
    path: "/custom/models",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Models
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [op],
    urlParameters: [endpoint],
    serializer
};
const getCustomModelsOperationSpec = {
    path: "/custom/models",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Models
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [op1],
    urlParameters: [endpoint],
    serializer
};
const listCustomModelsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Models
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [op],
    urlParameters: [endpoint, nextLink],
    serializer
};

// Copyright (c) Microsoft Corporation.
/**
 * Class that represents a poller that waits until a model has been trained.
 */
class BeginRecognizeContentPoller extends coreLro.Poller {
    constructor(options) {
        const { client, source, contentType, updateIntervalInMs = 5000, resultId, onProgress, resumeFrom } = options;
        let state;
        if (resumeFrom) {
            state = JSON.parse(resumeFrom).state;
        }
        const operation = makeBeginRecognizePollOperation(Object.assign(Object.assign({}, state), { client,
            source,
            contentType,
            resultId, status: "notStarted", analyzeOptions: options }));
        super(operation);
        if (typeof onProgress === "function") {
            this.onProgress(onProgress);
        }
        this.updateIntervalInMs = updateIntervalInMs;
    }
    delay() {
        return coreHttp.delay(this.updateIntervalInMs);
    }
}
/**
 * Creates a poll operation given the provided state.
 * @ignore
 */
function makeBeginRecognizePollOperation(state) {
    return {
        state: Object.assign({}, state),
        cancel(_options = {}) {
            return tslib.__awaiter(this, void 0, void 0, function* () {
                throw new Error("Cancel operation is not supported.");
            });
        },
        update(options = {}) {
            var _a;
            return tslib.__awaiter(this, void 0, void 0, function* () {
                const state = this.state;
                const { client, source, contentType, analyzeOptions } = state;
                if (!state.isStarted) {
                    if (!source) {
                        throw new Error("Expect a valid 'source'");
                    }
                    state.isStarted = true;
                    const result = yield client.beginRecognize(source, contentType, analyzeOptions || {});
                    if (!result.operationLocation) {
                        throw new Error("Expect a valid 'operationLocation' to retrieve analyze results");
                    }
                    const lastSlashIndex = result.operationLocation.lastIndexOf("/");
                    state.resultId = result.operationLocation.substring(lastSlashIndex + 1);
                    // source is no longer needed
                    state.source = undefined;
                }
                const response = yield client.getRecognizeResult(state.resultId, {
                    abortSignal: analyzeOptions === null || analyzeOptions === void 0 ? void 0 : analyzeOptions.abortSignal
                });
                state.status = response.status;
                if (!state.isCompleted) {
                    if (typeof options.fireProgress === "function") {
                        options.fireProgress(state);
                    }
                    if (response.status === "succeeded") {
                        state.result = response.pages;
                        state.isCompleted = true;
                    }
                    else if (response.status === "failed") {
                        const errors = (_a = response.errors) === null || _a === void 0 ? void 0 : _a.map((e) => `  code ${e.code}, message: '${e.message}'`).join("\n");
                        const message = `Content recognition failed.
Error(s):
${errors || ""}
`;
                        throw new Error(message);
                    }
                }
                return makeBeginRecognizePollOperation(state);
            });
        },
        toString() {
            return JSON.stringify({ state: this.state }, (key, value) => {
                if (key === "client" || key === "source") {
                    return undefined;
                }
                return value;
            });
        }
    };
}

// Copyright (c) Microsoft Corporation.
/**
 * Class that represents a poller that waits until a model has been trained.
 */
class BeginRecognizeCustomFormPoller extends coreLro.Poller {
    constructor(options) {
        const { client, source, contentType, updateIntervalInMs = 5000, resultId, modelId, onProgress, resumeFrom } = options;
        let state;
        if (resumeFrom) {
            state = JSON.parse(resumeFrom).state;
        }
        const operation = makeBeginRecognizePollOperation$1(Object.assign(Object.assign({}, state), { client,
            source,
            contentType,
            resultId,
            modelId, status: "notStarted", analyzeOptions: options }));
        super(operation);
        if (typeof onProgress === "function") {
            this.onProgress(onProgress);
        }
        this.updateIntervalInMs = updateIntervalInMs;
    }
    delay() {
        return coreHttp.delay(this.updateIntervalInMs);
    }
}
/**
 * Creates a poll operation given the provided state.
 * @ignore
 */
function makeBeginRecognizePollOperation$1(state) {
    return {
        state: Object.assign({}, state),
        cancel(_options = {}) {
            return tslib.__awaiter(this, void 0, void 0, function* () {
                throw new Error("Cancel operation is not supported.");
            });
        },
        update(options = {}) {
            var _a;
            return tslib.__awaiter(this, void 0, void 0, function* () {
                const state = this.state;
                const { client, source, contentType, analyzeOptions, modelId } = state;
                if (!state.isStarted) {
                    if (!source) {
                        throw new Error("Expect a valid 'source'");
                    }
                    state.isStarted = true;
                    const result = yield client.beginRecognize(source, modelId, contentType, analyzeOptions || {});
                    if (!result.operationLocation) {
                        throw new Error("Expect a valid 'operationLocation' to retrieve analyze results");
                    }
                    const lastSlashIndex = result.operationLocation.lastIndexOf("/");
                    state.resultId = result.operationLocation.substring(lastSlashIndex + 1);
                    // source is no longer needed
                    state.source = undefined;
                }
                const response = yield client.getRecognizeResult(state.resultId, {
                    abortSignal: analyzeOptions === null || analyzeOptions === void 0 ? void 0 : analyzeOptions.abortSignal
                });
                state.status = response.status;
                if (!state.isCompleted) {
                    if (typeof options.fireProgress === "function") {
                        options.fireProgress(state);
                    }
                    if (response.status === "succeeded") {
                        state.result = response.forms;
                        state.isCompleted = true;
                    }
                    else if (response.status === "failed") {
                        const errors = (_a = response.errors) === null || _a === void 0 ? void 0 : _a.map((e) => `  code ${e.code}, message: '${e.message}'`).join("\n");
                        const message = `Custom form recognition failed using model ${state.modelId}.
Error(s):
${errors || ""}
`;
                        throw new Error(message);
                    }
                }
                return makeBeginRecognizePollOperation$1(state);
            });
        },
        toString() {
            return JSON.stringify({ state: this.state }, (key, value) => {
                if (key === "client" || key === "source") {
                    return undefined;
                }
                return value;
            });
        }
    };
}

// Copyright (c) Microsoft Corporation.
/**
 * Class that represents a poller that waits until a model has been trained.
 */
class BeginRecognizeReceiptPoller extends coreLro.Poller {
    constructor(options) {
        const { client, source, contentType, updateIntervalInMs = 5000, resultId, onProgress, resumeFrom } = options;
        let state;
        if (resumeFrom) {
            state = JSON.parse(resumeFrom).state;
        }
        const operation = makeBeginRecognizePollOperation$2(Object.assign(Object.assign({}, state), { client,
            source,
            contentType,
            resultId, status: "notStarted", analyzeOptions: options }));
        super(operation);
        if (typeof onProgress === "function") {
            this.onProgress(onProgress);
        }
        this.updateIntervalInMs = updateIntervalInMs;
    }
    delay() {
        return coreHttp.delay(this.updateIntervalInMs);
    }
}
/**
 * Creates a poll operation given the provided state.
 * @ignore
 */
function makeBeginRecognizePollOperation$2(state) {
    return {
        state: Object.assign({}, state),
        cancel(_options = {}) {
            return tslib.__awaiter(this, void 0, void 0, function* () {
                throw new Error("Cancel operation is not supported.");
            });
        },
        update(options = {}) {
            var _a;
            return tslib.__awaiter(this, void 0, void 0, function* () {
                const state = this.state;
                const { client, source, contentType, analyzeOptions } = state;
                if (!state.isStarted) {
                    if (!source) {
                        throw new Error("Expect a valid 'source'");
                    }
                    state.isStarted = true;
                    const result = yield client.beginRecognize(source, contentType, analyzeOptions || {});
                    if (!result.operationLocation) {
                        throw new Error("Expect a valid 'operationLocation' to retrieve analyze results");
                    }
                    const lastSlashIndex = result.operationLocation.lastIndexOf("/");
                    state.resultId = result.operationLocation.substring(lastSlashIndex + 1);
                    // source is no longer needed
                    state.source = undefined;
                }
                const response = yield client.getRecognizeResult(state.resultId, {
                    abortSignal: analyzeOptions === null || analyzeOptions === void 0 ? void 0 : analyzeOptions.abortSignal
                });
                state.status = response.status;
                if (!state.isCompleted) {
                    if (typeof options.fireProgress === "function") {
                        options.fireProgress(state);
                    }
                    if (response.status === "succeeded") {
                        state.result = response.forms;
                        state.isCompleted = true;
                    }
                    else if (response.status === "failed") {
                        const errors = (_a = response.errors) === null || _a === void 0 ? void 0 : _a.map((e) => `  code ${e.code}, message: '${e.message}'`).join("\n");
                        const message = `Receipt recognition failed.
Error(s):
${errors || ""}
`;
                        throw new Error(message);
                    }
                }
                return makeBeginRecognizePollOperation$2(state);
            });
        },
        toString() {
            return JSON.stringify({ state: this.state }, (key, value) => {
                if (key === "client" || key === "source") {
                    return undefined;
                }
                return value;
            });
        }
    };
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function toBoundingBox(original) {
    return [
        { x: original[0], y: original[1] },
        { x: original[2], y: original[3] },
        { x: original[4], y: original[5] },
        { x: original[6], y: original[7] }
    ];
}
function toTextLine(original, pageNumber) {
    const line = {
        kind: "line",
        pageNumber: pageNumber,
        text: original.text,
        boundingBox: toBoundingBox(original.boundingBox),
        words: original.words.map((w) => {
            return {
                kind: "word",
                text: w.text,
                boundingBox: toBoundingBox(w.boundingBox),
                confidence: w.confidence || 1,
                pageNumber: pageNumber
            };
        })
    };
    return line;
}
function toFormPage(original) {
    var _a;
    return {
        pageNumber: original.pageNumber,
        textAngle: original.angle,
        width: original.width,
        height: original.height,
        unit: original.unit,
        lines: (_a = original.lines) === null || _a === void 0 ? void 0 : _a.map((l) => toTextLine(l, original.pageNumber))
    };
}
// Note: might need to support other element types in future, e.g., checkbox
const textPattern = /\/readResults\/(\d+)\/lines\/(\d+)(?:\/words\/(\d+))?/;
function toFormContent(element, readResults) {
    const result = textPattern.exec(element);
    if (!result || !result[0] || !result[1] || !result[2]) {
        throw new Error(`Unexpected element reference encountered: ${element}`);
    }
    const readIndex = Number.parseInt(result[1]);
    const lineIndex = Number.parseInt(result[2]);
    if (result[3]) {
        const wordIndex = Number.parseInt(result[3]);
        return readResults[readIndex].lines[lineIndex].words[wordIndex];
    }
    else {
        return readResults[readIndex].lines[lineIndex];
    }
}
function toFieldData(pageNumber, original, readResults) {
    var _a;
    return {
        pageNumber,
        text: original.text,
        boundingBox: original.boundingBox ? toBoundingBox(original.boundingBox) : undefined,
        fieldElements: (_a = original.elements) === null || _a === void 0 ? void 0 : _a.map((element) => toFormContent(element, readResults))
    };
}
function toFormFieldFromKeyValuePairModel(pageNumber, original, readResults) {
    return {
        name: original.label,
        confidence: original.confidence || 1,
        labelData: toFieldData(pageNumber, original.key, readResults),
        valueData: toFieldData(pageNumber, original.value, readResults),
        value: original.value.text,
        valueType: "string"
    };
}
function toFormTable(original, readResults, pageNumber) {
    return {
        rowCount: original.rows,
        columnCount: original.columns,
        cells: original.cells.map((cell) => {
            var _a, _b, _c, _d, _e, _f;
            return ({
                boundingBox: toBoundingBox(cell.boundingBox),
                columnIndex: cell.columnIndex,
                fieldElements: (_a = cell.elements) === null || _a === void 0 ? void 0 : _a.map((element) => toFormContent(element, readResults)),
                rowIndex: cell.rowIndex,
                columnSpan: (_b = cell.columnSpan) !== null && _b !== void 0 ? _b : 1,
                rowSpan: (_c = cell.rowSpan) !== null && _c !== void 0 ? _c : 1,
                isHeader: (_d = cell.isHeader) !== null && _d !== void 0 ? _d : false,
                isFooter: (_e = cell.isFooter) !== null && _e !== void 0 ? _e : false,
                confidence: (_f = cell.confidence) !== null && _f !== void 0 ? _f : 1,
                text: cell.text,
                pageNumber
            });
        }),
        pageNumber
    };
}
function toFormPages(readResults, pageResults) {
    var _a;
    const transformed = readResults === null || readResults === void 0 ? void 0 : readResults.map(toFormPage);
    // maps from page numbers to the objects
    const readMap = new Map(transformed === null || transformed === void 0 ? void 0 : transformed.map((r) => [r.pageNumber, r]));
    const pageMap = new Map(pageResults === null || pageResults === void 0 ? void 0 : pageResults.map((r) => [r.pageNumber, r]));
    const result = [];
    for (const pageNumber of readMap.keys()) {
        const readResult = readMap.get(pageNumber);
        if (readResult) {
            const pageResult = pageMap.get(pageNumber);
            if (pageResult) {
                readResult.tables = (_a = pageResult.tables) === null || _a === void 0 ? void 0 : _a.map((table) => toFormTable(table, transformed, pageNumber));
                result.push(readResult);
            }
        }
    }
    return result;
}
function toRecognizeFormResultResponse(original) {
    var _a, _b, _c, _d;
    const pages = toFormPages((_a = original.analyzeResult) === null || _a === void 0 ? void 0 : _a.readResults, (_b = original.analyzeResult) === null || _b === void 0 ? void 0 : _b.pageResults);
    const common = {
        status: original.status,
        createdOn: original.createdOn,
        errors: (_c = original.analyzeResult) === null || _c === void 0 ? void 0 : _c.errors,
        lastModified: original.lastModified,
        _response: original._response
    };
    if (original.status !== "succeeded") {
        return common;
    }
    const additional = original.analyzeResult
        ? {
            version: original.analyzeResult.version,
            forms: original.analyzeResult.documentResults &&
                original.analyzeResult.documentResults.length > 0
                ? original.analyzeResult.documentResults.map((d) => toRecognizedForm(d, pages)) // supervised
                : (_d = original.analyzeResult.pageResults) === null || _d === void 0 ? void 0 : _d.map((p) => toFormFromPageResult(p, pages)) // unsupervised
        }
        : undefined;
    return Object.assign(Object.assign({}, common), additional);
}
function toFormFieldFromFieldValueModel(original, key, readResults) {
    var _a, _b, _c;
    let value;
    switch (original.type) {
        case "string":
            value = original.valueString;
            break;
        case "date":
            value = original.valueDate;
            break;
        case "time":
            value = original.valueTime;
            break;
        case "integer":
            value = original.valueInteger;
            break;
        case "number":
            value = original.valueNumber;
            break;
        case "phoneNumber":
            value = original.valuePhoneNumber;
            break;
        case "array":
            value = (_a = original.valueArray) === null || _a === void 0 ? void 0 : _a.map((fieldValueModel) => toFormFieldFromFieldValueModel(fieldValueModel, key, readResults));
            break;
        case "object":
            value = original.valueObject
                ? toFieldsFromFieldValue(original.valueObject, readResults)
                : undefined;
            break;
    }
    return {
        confidence: original.confidence || 1,
        name: key,
        valueData: {
            pageNumber: (_b = original.pageNumber) !== null && _b !== void 0 ? _b : 0,
            text: original.text,
            boundingBox: original.boundingBox ? toBoundingBox(original.boundingBox) : undefined,
            fieldElements: (_c = original.elements) === null || _c === void 0 ? void 0 : _c.map((element) => toFormContent(element, readResults))
        },
        valueType: original.type,
        value
    };
}
function toFieldsFromFieldValue(original, readResults) {
    const result = {};
    for (const key in original) {
        // eslint-disable-next-line no-prototype-builtins
        if (original.hasOwnProperty(key)) {
            if (!original[key]) {
                result[key] = { name: key };
                continue;
            }
            const formField = toFormFieldFromFieldValueModel(original[key], key, readResults);
            result[key] = formField;
        }
    }
    return result;
}
function toFieldsFromKeyValuePairs(pageNumber, original, pages) {
    const result = {};
    for (let i = 0; i < original.length; i++) {
        const pair = original[i];
        const stringField = toFormFieldFromKeyValuePairModel(pageNumber, pair, pages);
        stringField.name = stringField.name || `field-${i}`;
        result[`field-${i}`] = stringField;
    }
    return result;
}
function toFormFromPageResult(original, pages) {
    return {
        formType: `form-${original.clusterId}`,
        pageRange: { firstPageNumber: original.pageNumber, lastPageNumber: original.pageNumber },
        pages: pages.filter((p) => p.pageNumber === original.pageNumber),
        fields: original.keyValuePairs
            ? toFieldsFromKeyValuePairs(original.pageNumber, original.keyValuePairs, pages)
            : {}
    };
}
function toRecognizedForm(original, pages) {
    return {
        formType: original.docType,
        pageRange: { firstPageNumber: original.pageRange[0], lastPageNumber: original.pageRange[1] },
        fields: toFieldsFromFieldValue(original.fields, pages),
        pages: pages.filter((p) => original.pageRange[0] <= p.pageNumber && p.pageNumber <= original.pageRange[1])
    };
}
function toRecognizeContentResultResponse(original) {
    var _a;
    function toRecognizeContentResult(model) {
        if (!model) {
            return undefined;
        }
        const pages = toFormPages(model.readResults, model.pageResults);
        return {
            version: model.version,
            pages: pages
        };
    }
    const common = {
        status: original.status,
        createdOn: original.createdOn,
        errors: (_a = original.analyzeResult) === null || _a === void 0 ? void 0 : _a.errors,
        lastModified: original.lastModified,
        _response: original._response
    };
    if (original.status === "succeeded") {
        return Object.assign(Object.assign({}, common), toRecognizeContentResult(original.analyzeResult));
    }
    else {
        return common;
    }
}
function toRecognizeFormResultResponseFromReceipt(original) {
    var _a;
    const common = {
        status: original.status,
        createdOn: original.createdOn,
        errors: (_a = original.analyzeResult) === null || _a === void 0 ? void 0 : _a.errors,
        lastModified: original.lastModified,
        _response: original._response
    };
    if (original.status !== "succeeded") {
        return common;
    }
    if (!original.analyzeResult) {
        throw new Error("Expecting valid analyzeResult from the service response");
    }
    const pages = original.analyzeResult.readResults.map(toFormPage);
    return Object.assign(Object.assign({}, common), { version: original.analyzeResult.version, forms: original
            .analyzeResult.documentResults.filter((d) => {
            return !!d.fields;
        })
            .map((d) => {
            if (d.docType !== "prebuilt:receipt") {
                throw new RangeError("The document type is not 'prebuilt:receipt'");
            }
            return toRecognizedForm(d, pages);
        }) });
}
function toFormModelResponse(response) {
    var _a, _b, _c, _d;
    const common = Object.assign(Object.assign({}, response.modelInfo), { trainingDocuments: (_a = response.trainResult) === null || _a === void 0 ? void 0 : _a.trainingDocuments, errors: (_b = response.trainResult) === null || _b === void 0 ? void 0 : _b.errors, _response: response._response });
    if (response.modelInfo.status !== "ready") {
        return common;
    }
    if (((_c = response.trainResult) === null || _c === void 0 ? void 0 : _c.averageModelAccuracy) || ((_d = response.trainResult) === null || _d === void 0 ? void 0 : _d.fields)) {
        // training with forms and labels, populate from trainingResult.fields
        const fields = {};
        for (const f of response.trainResult.fields) {
            fields[f.fieldName] = { name: f.fieldName, accuracy: f.accuracy, label: null };
        }
        return Object.assign(Object.assign({}, common), { submodels: [
                {
                    accuracy: response.trainResult.averageModelAccuracy,
                    formType: `form-${response.modelInfo.modelId}`,
                    fields
                }
            ] });
    }
    else if (response.keys) {
        // training with forms, populate from trainingResult.keys
        const submodels = [];
        for (const clusterKey in response.keys.clusters) {
            const cluster = response.keys.clusters[clusterKey];
            const fields = {};
            for (let i = 0; i < cluster.length; i++) {
                fields[`field-${i}`] = { name: `field-${i}`, label: cluster[i] };
            }
            submodels.push({ formType: `form-${clusterKey}`, fields });
        }
        return Object.assign(Object.assign({}, common), { submodels });
    }
    else {
        throw new Error("Expecting model(s) from traning result but got none");
    }
}

// Copyright (c) Microsoft Corporation.
const API_KEY_HEADER_NAME = "Ocp-Apim-Subscription-Key";
/**
 * Create an HTTP pipeline policy to authenticate a request
 * using an `AzureKeyCredential` for Azure Form Recognizer
 */
function createFormRecognizerAzureKeyCredentialPolicy(credential) {
    return {
        create: (nextPolicy, options) => {
            return new FormRecognizerAzureKeyCredentialPolicy(nextPolicy, options, credential);
        }
    };
}
/**
 * A concrete implementation of an AzureKeyCredential policy
 * using the appropriate header for Azure Form Recognizer
 */
class FormRecognizerAzureKeyCredentialPolicy extends coreHttp.BaseRequestPolicy {
    constructor(nextPolicy, options, credential) {
        super(nextPolicy, options);
        this.credential = credential;
    }
    sendRequest(webResource) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            if (!webResource) {
                throw new Error("webResource cannot be null or undefined");
            }
            webResource.headers.set(API_KEY_HEADER_NAME, this.credential.key);
            return this._nextPolicy.sendRequest(webResource);
        });
    }
}

// Copyright (c) Microsoft Corporation.
/**
 * Client class for interacting with Azure Form Recognizer service.
 */
class FormRecognizerClient {
    /**
     * Creates an instance of FormRecognizerClient.
     *
     * Example usage:
     * ```ts
     * import { FormRecognizerClient, AzureKeyCredential } from "@azure/ai-form-recognizer";
     *
     * const client = new FormRecognizerClient(
     *    "<service endpoint>",
     *    new AzureKeyCredential("<api key>")
     * );
     * ```
     * @param {string} endpointUrl Url to an Azure Form Recognizer service endpoint
     * @param {TokenCredential | KeyCredential} credential Used to authenticate requests to the service.
     * @param {FormRecognizerClientOptions} [options] Used to configure the Form Recognizer client.
     */
    constructor(endpointUrl, credential, options = {}) {
        this.endpointUrl = endpointUrl;
        const pipelineOptions = tslib.__rest(options, []);
        const libInfo = `azsdk-js-ai-formrecognizer/${SDK_VERSION}`;
        if (!pipelineOptions.userAgentOptions) {
            pipelineOptions.userAgentOptions = {};
        }
        if (pipelineOptions.userAgentOptions.userAgentPrefix) {
            pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;
        }
        else {
            pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;
        }
        const authPolicy = coreHttp.isTokenCredential(credential)
            ? coreHttp.bearerTokenAuthenticationPolicy(credential, DEFAULT_COGNITIVE_SCOPE)
            : createFormRecognizerAzureKeyCredentialPolicy(credential);
        const internalPipelineOptions = Object.assign(Object.assign({}, pipelineOptions), {
            loggingOptions: {
                logger: logger.info,
                allowedHeaderNames: FormRecognizerLoggingAllowedHeaderNames,
                allowedQueryParameters: FormRecognizerLoggingAllowedQueryParameters
            }
        });
        const pipeline = coreHttp.createPipelineFromOptions(internalPipelineOptions, authPolicy);
        this.client = new GeneratedClient(this.endpointUrl, pipeline);
    }
    /**
     * Recognizes content, including text and table structure from a form document.
     *
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const path = "./Invoice_7.pdf";
     * const readStream = fs.createReadStream(path);
     *
     * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await client.beginRecognizeContent(readStream, "application/pdf", {
     *   onProgress: (state) => { console.log(`status: ${state.status}`); }
     * });
     *
     * const pages = await poller.pollUntilDone();
     * ```
     * @summary Recognizes content/layout information from a given document
     * @param {FormRecognizerRequestBody} form Input document
     * @param {BeginRecognizeContentOptions} [options] Options to start content recognition operation
     */
    beginRecognizeContent(form, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const analyzePollerClient = {
                beginRecognize: (...args) => recognizeLayoutInternal(this.client, ...args),
                getRecognizeResult: (...args) => this.getRecognizedContent(...args)
            };
            const poller = new BeginRecognizeContentPoller(Object.assign({ client: analyzePollerClient, source: form }, options));
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Recognizes content, including text and table structure from a url to a form document.
     *
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const url = "<form document url>";
     *
     * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await client.beginRecognizeContentFromUrl(url, {
     *   onProgress: (state) => { console.log(`status: ${state.status}`); }
     * });
     *
     * const pages = await poller.pollUntilDone();
     * ```
     * @summary Recognizes content/layout information from a url to a form document
     * @param {string} formUrl Url to a form document that is accessible from the service. Must be a valid, encoded URL to one of the following supported document types: PDF, JPEG, PNG, and TIFF.
     * @param {BeginRecognizeContentOptions} [options] Options to start content recognition operation
     */
    beginRecognizeContentFromUrl(formUrl, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const analyzePollerClient = {
                beginRecognize: (...args) => recognizeLayoutInternal(this.client, ...args),
                getRecognizeResult: (...args) => this.getRecognizedContent(...args)
            };
            if (options.contentType) {
                logger.warning("Ignoring 'contentType' parameter passed to URL-based method.");
            }
            const poller = new BeginRecognizeContentPoller(Object.assign(Object.assign({ client: analyzePollerClient, source: formUrl }, options), { contentType: undefined }));
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Retrieves result of content recognition operation.
     * @private
     */
    getRecognizedContent(resultId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const realOptions = options || {};
            const { span, updatedOptions: finalOptions } = createSpan("FormRecognizerClient-getRecognizedLayoutResult", realOptions);
            try {
                const requestOptions = coreHttp.operationOptionsToRequestOptionsBase(finalOptions);
                const analyzeResult = yield this.client.getAnalyzeLayoutResult(resultId, requestOptions);
                return toRecognizeContentResultResponse(analyzeResult);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Recognizes forms from a given document using a custom form model from training.
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const path = "./Invoice_6.pdf";
     * const readStream = fs.createReadStream(path);
     *
     * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await client.beginRecognizeCustomForms(modelId, readStream, "application/pdf", {
     *   onProgress: (state) => { console.log(`status: ${state.status}`); }
     * });
     * const forms = await poller.pollUntilDone();
     * ```
     * @summary Recognizes form information from a given document using a custom form model.
     * @param {string} modelId Id of the custom form model to use
     * @param {FormRecognizerRequestBody} form Input form document
     * @param {BeginRecognizeFormsOptions} [options] Options to start the form recognition operation
     */
    beginRecognizeCustomForms(modelId, form, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            if (!modelId) {
                throw new RangeError("Invalid model id");
            }
            const analyzePollerClient = {
                beginRecognize: (body, modelId, contentType, analyzeOptions = {}) => recognizeCustomFormInternal(this.client, body, contentType, analyzeOptions, modelId),
                getRecognizeResult: (resultId, options) => this.getRecognizedForm(modelId, resultId, options)
            };
            const poller = new BeginRecognizeCustomFormPoller(Object.assign({ client: analyzePollerClient, modelId, source: form }, options));
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Recognizes forms from a url to a form document using a custom form model from training.
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const url = "<form document url>";
     *
     * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await client.beginRecognizeCustomFormsFromUrl(modelId, url, {
     *   onProgress: (state) => { console.log(`status: ${state.status}`); }
     * });
     * const forms = await poller.pollUntilDone();
     * ```
     * @summary Recognizes form information from a url to a form document using a custom form model.
     * @param {string} modelId Id of the custom form model to use
     * @param {string} formUrl Url to a form document that is accessible from the service. Must be a valid, encoded URL to one of the following supported document types: PDF, JPEG, PNG, and TIFF.
     * @param {BeginRecognizeFormsOptions} [options] Options to start the form recognition operation
     */
    beginRecognizeCustomFormsFromUrl(modelId, formUrl, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            if (!modelId) {
                throw new RangeError("Invalid modelId");
            }
            const analyzePollerClient = {
                beginRecognize: (body, modelId, contentType, analyzeOptions = {}) => recognizeCustomFormInternal(this.client, body, contentType, analyzeOptions, modelId),
                getRecognizeResult: (resultId, options) => this.getRecognizedForm(modelId, resultId, options)
            };
            if (options.contentType) {
                logger.warning("Ignoring 'contentType' parameter passed to URL-based method.");
            }
            const poller = new BeginRecognizeCustomFormPoller(Object.assign(Object.assign({ client: analyzePollerClient, modelId, source: formUrl }, options), { contentType: undefined }));
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Retrieves result of a form recognition operation.
     * @private
     */
    getRecognizedForm(modelId, resultId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const realOptions = options || {};
            const { span, updatedOptions: finalOptions } = createSpan("FormRecognizerClient-getRecognizedForm", realOptions);
            try {
                const result = yield this.client.getAnalyzeFormResult(modelId, resultId, coreHttp.operationOptionsToRequestOptionsBase(finalOptions));
                return toRecognizeFormResultResponse(result);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Recognizes data from receipts using pre-built receipt model, enabling you to extract structure data
     * from receipts such as merchant name, merchant phone number, transaction date, and more.
     *
     * For a list of fields that are contained in the response, please refer to the "Supported fields" section at the following link: https://aka.ms/azsdk/formrecognizer/receiptfields
     *
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const path = "./contoso-allinone.jpg";
     * const readStream = fs.createReadStream(path);
     *
     * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await client.beginRecognizeReceipts(readStream, "image/jpeg", {
     *   onProgress: (state) => { console.log(`status: ${state.status}`); }
     * });
     *
     * const receipts = await poller.pollUntilDone();
     *  if (!receipts || receipts.length <= 0) {
     *    throw new Error("Expecting at lease one receipt in analysis result");
     *  }
     *
     * const receipt = receipts[0];
     * console.log("First receipt:");
     * const receiptTypeField = receipt.fields["ReceiptType"];
     * if (receiptTypeField.valueType === "string") {
     *   console.log(`  Receipt Type: '${receiptTypeField.value || "<missing>"}', with confidence of ${receiptTypeField.confidence}`);
     * }
     * const merchantNameField = receipt.fields["MerchantName"];
     * if (merchantNameField.valueType === "string") {
     *   console.log(`  Merchant Name: '${merchantNameField.value || "<missing>"}', with confidence of ${merchantNameField.confidence}`);
     * }
     * const transactionDate = receipt.fields["TransactionDate"];
     * if (transactionDate.valueType === "date") {
     *   console.log(`  Transaction Date: '${transactionDate.value || "<missing>"}', with confidence of ${transactionDate.confidence}`);
     * }
     * const itemsField = receipt.fields["Items"];
     * if (itemsField.valueType === "array") {
     *   for (const itemField of itemsField.value || []) {
     *     if (itemField.valueType === "object") {
     *       const itemNameField = itemField.value!["Name"];
     *       if (itemNameField.valueType === "string") {
     *         console.log(`    Item Name: '${itemNameField.value || "<missing>"}', with confidence of ${itemNameField.confidence}`);
     *       }
     *     }
     *  }
     * }
     * const totalField = receipt.fields["Total"];
     * if (totalField.valueType === "number") {
     *   console.log(`  Total: '${totalField.value || "<missing>"}', with confidence of ${totalField.confidence}`);
     * }
     * ```
     * @summary Recognizes receipt information from a given document
     * @param {FormRecognizerRequestBody} receipt Input document
     * @param {FormContentType} contentType Content type of the input. Supported types are "application/pdf", "image/jpeg", "image/png", and "image/tiff";
     * @param {BeginRecognizeFormsOptions} [options] Options to start the receipt recognition operation
     */
    beginRecognizeReceipts(receipt, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const analyzePollerClient = {
                beginRecognize: (...args) => recognizeReceiptInternal(this.client, ...args),
                getRecognizeResult: (...args) => this.getReceipts(...args)
            };
            const poller = new BeginRecognizeReceiptPoller(Object.assign({ client: analyzePollerClient, source: receipt }, options));
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Recognizes receipt information from a url using pre-built receipt model, enabling you to extract structure data
     * from receipts such as merchant name, merchant phone number, transaction date, and more.
     *
     * For a list of fields that are contained in the response, please refer to the "Supported fields" section at the following link: https://aka.ms/azsdk/formrecognizer/receiptfields
     *
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const url = "<url to the receipt document>";
     * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await client.beginRecognizeReceiptsFromUrl(
     *   url, {
     *     includeFieldElements: true,
     *     onProgress: (state) => { console.log(`analyzing status: ${state.status}`); }
     * });
     * const receipts = await poller.pollUntilDone();
     *  if (!receipts || receipts.length <= 0) {
     *    throw new Error("Expecting at lease one receipt in analysis result");
     *  }
     *
     * const receipt = receipts[0];
     * console.log("First receipt:");
     * const receiptTypeField = receipt.fields["ReceiptType"];
     * if (receiptTypeField.valueType === "string") {
     *   console.log(`  Receipt Type: '${receiptTypeField.value || "<missing>"}', with confidence of ${receiptTypeField.confidence}`);
     * }
     * const merchantNameField = receipt.fields["MerchantName"];
     * if (merchantNameField.valueType === "string") {
     *   console.log(`  Merchant Name: '${merchantNameField.value || "<missing>"}', with confidence of ${merchantNameField.confidence}`);
     * }
     * const transactionDate = receipt.fields["TransactionDate"];
     * if (transactionDate.valueType === "date") {
     *   console.log(`  Transaction Date: '${transactionDate.value || "<missing>"}', with confidence of ${transactionDate.confidence}`);
     * }
     * const itemsField = receipt.fields["Items"];
     * if (itemsField.valueType === "array") {
     *   for (const itemField of itemsField.value || []) {
     *     if (itemField.valueType === "object") {
     *       const itemNameField = itemField.value!["Name"];
     *       if (itemNameField.valueType === "string") {
     *         console.log(`    Item Name: '${itemNameField.value || "<missing>"}', with confidence of ${itemNameField.confidence}`);
     *       }
     *     }
     *  }
     * }
     * const totalField = receipt.fields["Total"];
     * if (totalField.valueType === "number") {
     *   console.log(`  Total: '${totalField.value || "<missing>"}', with confidence of ${totalField.confidence}`);
     * }
     * ```
     * @summary Recognizes receipt information from a given accessible url to input document
     * @param {string} receiptUrl Url to a receipt document that is accessible from the service. Must be a valid, encoded URL to one of the following supported document types: PDF, JPEG, PNG, and TIFF.
     * @param {BeginRecognizeFormsOptions} [options] Options to start receipt recognition operation
     */
    beginRecognizeReceiptsFromUrl(receiptUrl, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const analyzePollerClient = {
                beginRecognize: (...args) => recognizeReceiptInternal(this.client, ...args),
                getRecognizeResult: (...args) => this.getReceipts(...args)
            };
            if (options.contentType) {
                logger.warning("Ignoring 'contentType' parameter passed to URL-based method.");
            }
            const poller = new BeginRecognizeReceiptPoller(Object.assign(Object.assign({ client: analyzePollerClient, source: receiptUrl }, options), { contentType: undefined }));
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Retrieves result of a receipt recognition operation.
     * @private
     */
    getReceipts(resultId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const realOptions = options || {};
            const { span, updatedOptions: finalOptions } = createSpan("FormRecognizerClient-getRecognizedReceipt", realOptions);
            try {
                const result = yield this.client.getAnalyzeReceiptResult(resultId, coreHttp.operationOptionsToRequestOptionsBase(finalOptions));
                return toRecognizeFormResultResponseFromReceipt(result);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
}
/**
 * @internal
 */
function recognizeLayoutInternal(client, body, contentType, options, _modelId) {
    return tslib.__awaiter(this, void 0, void 0, function* () {
        const realOptions = options || {};
        const { span, updatedOptions: finalOptions } = createSpan("analyzeLayoutInternal", realOptions);
        const requestBody = yield toRequestBody(body);
        const requestContentType = contentType ? contentType : yield getContentType(requestBody);
        try {
            if (requestContentType) {
                return yield client.analyzeLayoutAsync(requestContentType, requestBody, coreHttp.operationOptionsToRequestOptionsBase(finalOptions));
            }
            return yield client.analyzeLayoutAsync("application/json", Object.assign({ fileStream: requestBody }, coreHttp.operationOptionsToRequestOptionsBase(finalOptions)));
        }
        catch (e) {
            span.setStatus({
                code: api.CanonicalCode.UNKNOWN,
                message: e.message
            });
            throw e;
        }
        finally {
            span.end();
        }
    });
}
/**
 * @internal
 */
function recognizeCustomFormInternal(client, body, contentType, options = {}, modelId) {
    return tslib.__awaiter(this, void 0, void 0, function* () {
        const { span, updatedOptions: finalOptions } = createSpan("analyzeCustomFormInternal", Object.assign(Object.assign({}, options), { includeTextDetails: options.includeFieldElements }));
        const requestBody = yield toRequestBody(body);
        const requestContentType = contentType !== null && contentType !== void 0 ? contentType : (yield getContentType(requestBody));
        try {
            if (requestContentType) {
                return yield client.analyzeWithCustomModel(modelId, requestContentType, requestBody, coreHttp.operationOptionsToRequestOptionsBase(finalOptions));
            }
            return yield client.analyzeWithCustomModel(modelId, "application/json", Object.assign({ fileStream: requestBody }, coreHttp.operationOptionsToRequestOptionsBase(finalOptions)));
        }
        catch (e) {
            span.setStatus({
                code: api.CanonicalCode.UNKNOWN,
                message: e.message
            });
            throw e;
        }
        finally {
            span.end();
        }
    });
}
/**
 * @internal
 */
function recognizeReceiptInternal(client, body, contentType, options, _modelId) {
    return tslib.__awaiter(this, void 0, void 0, function* () {
        const realOptions = options || { includeFieldElements: false };
        const { span, updatedOptions: finalOptions } = createSpan("analyzeReceiptInternal", Object.assign(Object.assign({}, realOptions), { includeTextDetails: realOptions.includeFieldElements }));
        const requestBody = yield toRequestBody(body);
        const requestContentType = contentType !== null && contentType !== void 0 ? contentType : (yield getContentType(requestBody));
        try {
            if (requestContentType) {
                return yield client.analyzeReceiptAsync(requestContentType, requestBody, coreHttp.operationOptionsToRequestOptionsBase(finalOptions));
            }
            return yield client.analyzeReceiptAsync("application/json", Object.assign({ fileStream: requestBody }, coreHttp.operationOptionsToRequestOptionsBase(finalOptions)));
        }
        catch (e) {
            span.setStatus({
                code: api.CanonicalCode.UNKNOWN,
                message: e.message
            });
            throw e;
        }
        finally {
            span.end();
        }
    });
}

// Copyright (c) Microsoft Corporation.
/**
 * Class that represents a poller that waits until a model has been trained.
 */
class BeginTrainingPoller extends coreLro.Poller {
    constructor(options) {
        const { client, source, updateIntervalInMs = 5000, onProgress, resumeFrom, trainModelOptions } = options;
        let state;
        if (resumeFrom) {
            state = JSON.parse(resumeFrom).state;
        }
        const operation = makeBeginTrainingPollOperation(Object.assign(Object.assign({}, state), { client,
            source, status: "creating", trainModelOptions }));
        super(operation);
        if (typeof onProgress === "function") {
            this.onProgress(onProgress);
        }
        this.updateIntervalInMs = updateIntervalInMs;
    }
    delay() {
        return coreHttp.delay(this.updateIntervalInMs);
    }
}
/**
 * Creates a poll operation given the provided state.
 * @ignore
 */
function makeBeginTrainingPollOperation(state) {
    return {
        state: Object.assign({}, state),
        cancel(_options = {}) {
            return tslib.__awaiter(this, void 0, void 0, function* () {
                throw new Error("Cancel operation is not supported.");
            });
        },
        update(options = {}) {
            var _a, _b;
            return tslib.__awaiter(this, void 0, void 0, function* () {
                const state = this.state;
                const { client, source, trainModelOptions } = state;
                if (!state.isStarted) {
                    state.isStarted = true;
                    const result = yield client.trainCustomModelInternal(source, false, trainModelOptions || {});
                    if (!result.location) {
                        throw new Error("Expect a valid 'operationLocation' to retrieve analyze results");
                    }
                    const lastSlashIndex = result.location.lastIndexOf("/");
                    state.modelId = result.location.substring(lastSlashIndex + 1);
                }
                const model = yield client.getCustomModel(state.modelId, {
                    abortSignal: trainModelOptions === null || trainModelOptions === void 0 ? void 0 : trainModelOptions.abortSignal
                });
                state.status = model.status;
                if (!state.isCompleted) {
                    if (typeof options.fireProgress === "function") {
                        options.fireProgress(state);
                    }
                    if (model.status === "ready") {
                        state.result = model;
                        state.isCompleted = true;
                    }
                    else if (model.status === "invalid") {
                        const errors = (_a = model.errors) === null || _a === void 0 ? void 0 : _a.map((e) => `  code ${e.code}, message: '${e.message}'`).join("\n");
                        const additionalInfo = (_b = model.trainingDocuments) === null || _b === void 0 ? void 0 : _b.map((d) => {
                            var _a;
                            return `  document: ${d.name}, status: ${d.status}, errors: ${(_a = d.errors) === null || _a === void 0 ? void 0 : _a.map((e) => `code ${e.code}, message: '${e.message}'`).join("\n")}`;
                        }).join("\n");
                        const message = `Model training failed. Invalid model was created with id '${state.modelId}'.
Error(s):
${errors || ""}
Additional information:
${additionalInfo || ""}
`;
                        throw new Error(message);
                    }
                }
                return makeBeginTrainingPollOperation(state);
            });
        },
        toString() {
            return JSON.stringify({ state: this.state }, (key, value) => {
                if (key === "client") {
                    return undefined;
                }
                return value;
            });
        }
    };
}

// Copyright (c) Microsoft Corporation.
/**
 * Class that represents a poller that waits until a model has been trained.
 */
class BeginCopyModelPoller extends coreLro.Poller {
    constructor(options) {
        const { client, updateIntervalInMs = 5000, modelId, resultId, targetResourceId, targetResourceRegion, copyAuthorization, onProgress, resumeFrom } = options;
        let state;
        if (resumeFrom) {
            state = JSON.parse(resumeFrom).state;
        }
        const operation = makeBeginCopyModelPollOperation(Object.assign(Object.assign({}, state), { client,
            modelId,
            targetResourceId,
            targetResourceRegion,
            copyAuthorization,
            resultId, status: "notStarted", copyModelOptions: options }));
        super(operation);
        if (typeof onProgress === "function") {
            this.onProgress(onProgress);
        }
        this.updateIntervalInMs = updateIntervalInMs;
    }
    delay() {
        return coreHttp.delay(this.updateIntervalInMs);
    }
}
/**
 * Creates a poll operation given the provided state.
 * @ignore
 */
function makeBeginCopyModelPollOperation(state) {
    return {
        state: Object.assign({}, state),
        cancel(_options = {}) {
            return tslib.__awaiter(this, void 0, void 0, function* () {
                throw new Error("Cancel operation is not supported.");
            });
        },
        update(options = {}) {
            return tslib.__awaiter(this, void 0, void 0, function* () {
                const state = this.state;
                const { client, modelId, copyAuthorization, copyModelOptions } = state;
                if (!state.isStarted) {
                    state.isStarted = true;
                    const result = yield client.beginCopyModel(modelId, copyAuthorization, copyModelOptions || {});
                    if (!result.operationLocation) {
                        throw new Error("Expect a valid 'operationLocation' to retrieve analyze results");
                    }
                    const lastSlashIndex = result.operationLocation.lastIndexOf("/");
                    state.resultId = result.operationLocation.substring(lastSlashIndex + 1);
                }
                const response = yield client.getCopyModelResult(modelId, state.resultId, {
                    abortSignal: copyModelOptions === null || copyModelOptions === void 0 ? void 0 : copyModelOptions.abortSignal
                });
                state.status = response.status;
                if (!state.isCompleted) {
                    if ((response.status === "running" || response.status === "notStarted") &&
                        typeof options.fireProgress === "function") {
                        options.fireProgress(state);
                    }
                    else if (response.status === "succeeded") {
                        state.result = {
                            status: "ready",
                            trainingStartedOn: response.createdOn,
                            trainingCompletedOn: response.lastModified,
                            modelId: copyAuthorization.modelId
                        };
                        state.isCompleted = true;
                    }
                    else if (response.status === "failed") {
                        throw new Error(`Copy model operation failed: ${response._response.bodyAsText}`);
                    }
                }
                return makeBeginCopyModelPollOperation(state);
            });
        },
        toString() {
            return JSON.stringify({ state: this.state }, (key, value) => {
                if (key === "client" || key === "source") {
                    return undefined;
                }
                return value;
            });
        }
    };
}

// Copyright (c) Microsoft Corporation.
/**
 * Client class for training and managing custom form models.
 */
class FormTrainingClient {
    /**
     * Creates an instance of FormTrainingClient.
     *
     * Example usage:
     * ```ts
     * import {FormTrainingClient, AzureKeyCredential } from "@azure/ai-form-recognizer";
     *
     * const client = new FormTrainingClient(
     *    "<service endpoint>",
     *    new AzureKeyCredential("<api key>")
     * );
     * ```
     * @param {string} endpointUrl Url to an Azure Form Recognizer service endpoint
     * @param {TokenCredential | KeyCredential} credential Used to authenticate requests to the service.
     * @param {FormRecognizerClientOptions} [options] Used to configure the client.
     */
    constructor(endpointUrl, credential, options = {}) {
        this.endpointUrl = endpointUrl;
        this.credential = credential;
        this.clientOptions = options;
        const pipelineOptions = tslib.__rest(options, []);
        const libInfo = `azsdk-js-ai-formrecognizer/${SDK_VERSION}`;
        if (!pipelineOptions.userAgentOptions) {
            pipelineOptions.userAgentOptions = {};
        }
        if (pipelineOptions.userAgentOptions.userAgentPrefix) {
            pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;
        }
        else {
            pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;
        }
        const authPolicy = coreHttp.isTokenCredential(credential)
            ? coreHttp.bearerTokenAuthenticationPolicy(credential, DEFAULT_COGNITIVE_SCOPE)
            : createFormRecognizerAzureKeyCredentialPolicy(credential);
        const internalPipelineOptions = Object.assign(Object.assign({}, pipelineOptions), {
            loggingOptions: {
                logger: logger.info,
                allowedHeaderNames: FormRecognizerLoggingAllowedHeaderNames,
                allowedQueryParameters: FormRecognizerLoggingAllowedQueryParameters
            }
        });
        const pipeline = coreHttp.createPipelineFromOptions(internalPipelineOptions, authPolicy);
        this.client = new GeneratedClient(this.endpointUrl, pipeline);
    }
    /**
     * Retrieves summary information about the cognitive service account
     *
     * @param {GetAccountPropertiesOptions} options Options to GetSummary operation
     */
    getAccountProperties(options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const realOptions = options || {};
            const { span, updatedOptions: finalOptions } = createSpan("FormTrainingClient-listCustomModels", realOptions);
            try {
                const result = yield this.client.getCustomModels(Object.assign({}, coreHttp.operationOptionsToRequestOptionsBase(finalOptions)));
                return {
                    customModelLimit: result.summary.limit,
                    customModelCount: result.summary.count
                };
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Creates an instance of {@link FormTrainingClient} to perform training operations
     * and to manage trained custom form models.
     */
    getFormRecognizerClient() {
        return new FormRecognizerClient(this.endpointUrl, this.credential, this.clientOptions);
    }
    /**
     * Mark model for deletion. Model artifacts will be permanently removed within 48 hours.
     *
     * @param {string} modelId Id of the model to mark for deletion
     * @param {DeleteModelOptions} options Options to the Delete Model operation
     */
    deleteModel(modelId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const realOptions = options || {};
            const { span, updatedOptions: finalOptions } = createSpan("FormTrainingClient-deleteModel", realOptions);
            try {
                return yield this.client.deleteCustomModel(modelId, coreHttp.operationOptionsToRequestOptionsBase(finalOptions));
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Get detailed information about a custom model from training.
     *
     * @param {string} modelId Id of the model to get information
     * @param {GetModelOptions} options Options to the Get Model operation
     */
    getCustomModel(modelId, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const realOptions = options || {};
            const { span, updatedOptions: finalOptions } = createSpan("FormTrainingClient-getCustomModel", realOptions);
            try {
                const response = yield this.client.getCustomModel(modelId, Object.assign(Object.assign({}, coreHttp.operationOptionsToRequestOptionsBase(finalOptions)), { 
                    // Include keys is always set to true -- the service does not have a use case for includeKeys: false.
                    includeKeys: true }));
                return toFormModelResponse(response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    listModelsPage(settings, options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listModelsPage_1() {
            let result;
            if (settings.continuationToken) {
                result = yield tslib.__await(this.listNextPage(settings.continuationToken, options));
            }
            else {
                result = yield tslib.__await(this.list(options));
            }
            yield yield tslib.__await(result);
            while (result.nextLink) {
                result = yield tslib.__await(this.listNextPage(result.nextLink, options));
                yield yield tslib.__await(result);
            }
        });
    }
    listModelsAll(settings, options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listModelsAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listModelsPage(settings, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page.modelList || [])));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns an async iterable iterator to list information about all models in the cognitive service account.
     *
     * .byPage() returns an async iterable iterator to list the blobs in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * const client = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));
     * const result = client.listCustomModels();
     * let i = 1;
     * for await (const model of result) {
     *   console.log(`model ${i++}:`);
     *   console.log(model);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * let iter = client.listCustomModels();
     * let modelItem = await iter.next();
     * while (!modelItem.done) {
     *   console.log(`model ${i++}: ${modelItem.value}`);
     *   modelItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     *  let i = 1;
     *  for await (const response of client.listCustomModels().byPage()) {
     *    for (const modelInfo of response.modelList!) {
     *      console.log(`model ${i++}: ${modelInfo.modelId}`);
     *    }
     *  }
     * ```
     *
     * @param {ListModelOptions} options Options to the List Models operation
     */
    listCustomModels(options = {}) {
        const iter = this.listModelsAll({}, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => {
                return this.listModelsPage(settings, options);
            }
        };
    }
    list(options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const realOptions = options || {};
            const { span, updatedOptions: finalOptions } = createSpan("FormTrainingClient-list", realOptions);
            try {
                const result = yield this.client.listCustomModels(Object.assign({}, coreHttp.operationOptionsToRequestOptionsBase(finalOptions)));
                return result;
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    listNextPage(nextLink, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const realOptions = options || {};
            const { span, updatedOptions: finalOptions } = createSpan("FormTrainingClient-listNextPage", realOptions);
            try {
                const result = yield this.client.listCustomModelsNext(nextLink, Object.assign({}, coreHttp.operationOptionsToRequestOptionsBase(finalOptions)));
                return result;
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Creates and trains a custom form model.
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Note that when training operation fails, a model is still created in Azure Form Recognizer resource.
     *
     * Example usage:
     * ```ts
     * const trainingFilesUrl = "<url to the blob container storing training documents>";
     * const trainingClient = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));
     *
     * const poller = await trainingClient.beginTraining(trainingFilesUrl, false, {
     *   onProgress: (state) => { console.log("training status: "); console.log(state); }
     * });
     * const model = await poller.pollUntilDone();
     * ```
     * @summary Creates and trains a model
     * @param {string} trainingFilesUrl Accessible url to an Azure Storage Blob container storing the training documents
     * @param {boolean} useTrainingLabels specifies whether to training the model using label files
     * @param {BeginTrainingOptions} [options] Options to start model training operation
     */
    beginTraining(trainingFilesUrl, useTrainingLabels, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const trainPollerClient = {
                getCustomModel: (modelId, options) => this.getCustomModel(modelId, options),
                trainCustomModelInternal: (source, _useLabelFile, options) => trainCustomModelInternal(this.client, source, useTrainingLabels, options)
            };
            const poller = new BeginTrainingPoller({
                client: trainPollerClient,
                source: trainingFilesUrl,
                updateIntervalInMs: options.updateIntervalInMs,
                onProgress: options.onProgress,
                resumeFrom: options.resumeFrom,
                trainModelOptions: options
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Generate an authorization for copying a custom model into this Azure Form Recognizer resource.
     *
     * This method should be called on a client that is authenticated using the target resource (where the
     * model will be copied to) credentials, and the output can be passed as the `target` parameter to the
     * `beginCopyModel` method of a source client.
     *
     * The required `resourceId` and `resourceRegion` are properties of an Azure Form Recognizer resource and their values can be found in the Azure Portal.
     *
     * @param {string} resourceId Id of the Azure Form Recognizer resource where a custom model will be copied to
     * @param {string} resourceRegion Location of the Azure Form Recognizer resource, must be a valid region name supported by Azure Cognitive Services. See https://aka.ms/azsdk/cognitiveservices/regionalavailability for information about the regional availability of Azure Cognitive Services.
     * @param {GetCopyAuthorizationOptions} [options={}] Options to get copy authorization operation
     * @returns {Promise<CopyAuthorization>} The authorization to copy a custom model
     */
    getCopyAuthorization(resourceId, resourceRegion, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions: finalOptions } = createSpan("FormTrainingClient-getCopyAuthorization", options);
            try {
                const response = (yield this.client.generateModelCopyAuthorization(coreHttp.operationOptionsToRequestOptionsBase(finalOptions)));
                return {
                    resourceId: resourceId,
                    resourceRegion: resourceRegion,
                    expiresOn: new Date(response.expirationDateTimeTicks * 1000),
                    modelId: response.modelId,
                    accessToken: response.accessToken
                };
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Copies a custom model from this resource (the source) to the specified target Form Recognizer resource.
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const targetClient = new FormTrainingClient(targetEndpoint, new AzureKeyCredential(targetApiKey));
     * const authorization = await targetClient.getCopyAuthorization(targetResourceId, targetResourceRegion);
     *
     * const sourceClient = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await sourceClient.beginCopyModel(sourceModelId, authorization, {
     *   onProgress: (state) => {
     *     console.log(`Copy model status: ${state.status}`);
     *   }
     * });
     * const result = await poller.pollUntilDone();
     * ```
     * @summary Copies custom model to target resource
     * @param {string} modelId Id of the custom model in this resource to be copied to the target Form Recognizer resource
     * @param {CopyAuthorization} target Copy authorization produced by calling `targetTrainingClient.getCopyAuthorization()`
     * @param {BeginTrainingOptions} [options] Options to copy model operation
     */
    beginCopyModel(modelId, target, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const copyModelClient = {
                beginCopyModel: (...args) => this.beginCopyModelInternal(...args),
                getCopyModelResult: (...args) => this.getCopyModelResult(...args)
            };
            const poller = new BeginCopyModelPoller(Object.assign({ client: copyModelClient, modelId, targetResourceId: target.resourceId, targetResourceRegion: target.resourceRegion, copyAuthorization: target, onProgress: options.onProgress, resumeFrom: options.resumeFrom }, options));
            yield poller.poll();
            return poller;
        });
    }
    beginCopyModelInternal(modelId, copyAuthorization, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions: finalOptions } = createSpan("FormTrainingClient-beginCopyModelInternal", options);
            try {
                return yield this.client.copyCustomModel(modelId, {
                    targetResourceId: copyAuthorization.resourceId,
                    targetResourceRegion: copyAuthorization.resourceRegion,
                    copyAuthorization: {
                        modelId: copyAuthorization.modelId,
                        accessToken: copyAuthorization.accessToken,
                        expirationDateTimeTicks: copyAuthorization.expiresOn.getTime() / 1000
                    }
                }, coreHttp.operationOptionsToRequestOptionsBase(finalOptions));
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    getCopyModelResult(modelId, resultId, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions: finalOptions } = createSpan("FormTrainingClient-getCopyModelResult", options);
            try {
                return yield this.client.getCustomModelCopyResult(modelId, resultId, coreHttp.operationOptionsToRequestOptionsBase(finalOptions));
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
}
/**
 * @private
 */
function trainCustomModelInternal(client, source, useLabelFile, options) {
    return tslib.__awaiter(this, void 0, void 0, function* () {
        const realOptions = options || {};
        const { span, updatedOptions: finalOptions } = createSpan("trainCustomModelInternal", realOptions);
        try {
            return yield client.trainCustomModelAsync({
                source: source,
                sourceFilter: {
                    prefix: realOptions.prefix,
                    includeSubfolders: realOptions.includeSubfolders
                },
                useLabelFile
            }, coreHttp.operationOptionsToRequestOptionsBase(finalOptions));
        }
        catch (e) {
            span.setStatus({
                code: api.CanonicalCode.UNKNOWN,
                message: e.message
            });
            throw e;
        }
        finally {
            span.end();
        }
    });
}

Object.defineProperty(exports, 'AzureKeyCredential', {
    enumerable: true,
    get: function () {
        return coreAuth.AzureKeyCredential;
    }
});
exports.FormRecognizerClient = FormRecognizerClient;
exports.FormTrainingClient = FormTrainingClient;
//# sourceMappingURL=index.js.map
