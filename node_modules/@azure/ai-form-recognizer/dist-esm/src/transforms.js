// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
export function toBoundingBox(original) {
    return [
        { x: original[0], y: original[1] },
        { x: original[2], y: original[3] },
        { x: original[4], y: original[5] },
        { x: original[6], y: original[7] }
    ];
}
export function toTextLine(original, pageNumber) {
    const line = {
        kind: "line",
        pageNumber: pageNumber,
        text: original.text,
        boundingBox: toBoundingBox(original.boundingBox),
        words: original.words.map((w) => {
            return {
                kind: "word",
                text: w.text,
                boundingBox: toBoundingBox(w.boundingBox),
                confidence: w.confidence || 1,
                pageNumber: pageNumber
            };
        })
    };
    return line;
}
export function toFormPage(original) {
    var _a;
    return {
        pageNumber: original.pageNumber,
        textAngle: original.angle,
        width: original.width,
        height: original.height,
        unit: original.unit,
        lines: (_a = original.lines) === null || _a === void 0 ? void 0 : _a.map((l) => toTextLine(l, original.pageNumber))
    };
}
// Note: might need to support other element types in future, e.g., checkbox
const textPattern = /\/readResults\/(\d+)\/lines\/(\d+)(?:\/words\/(\d+))?/;
export function toFormContent(element, readResults) {
    const result = textPattern.exec(element);
    if (!result || !result[0] || !result[1] || !result[2]) {
        throw new Error(`Unexpected element reference encountered: ${element}`);
    }
    const readIndex = Number.parseInt(result[1]);
    const lineIndex = Number.parseInt(result[2]);
    if (result[3]) {
        const wordIndex = Number.parseInt(result[3]);
        return readResults[readIndex].lines[lineIndex].words[wordIndex];
    }
    else {
        return readResults[readIndex].lines[lineIndex];
    }
}
export function toFieldData(pageNumber, original, readResults) {
    var _a;
    return {
        pageNumber,
        text: original.text,
        boundingBox: original.boundingBox ? toBoundingBox(original.boundingBox) : undefined,
        fieldElements: (_a = original.elements) === null || _a === void 0 ? void 0 : _a.map((element) => toFormContent(element, readResults))
    };
}
export function toFormFieldFromKeyValuePairModel(pageNumber, original, readResults) {
    return {
        name: original.label,
        confidence: original.confidence || 1,
        labelData: toFieldData(pageNumber, original.key, readResults),
        valueData: toFieldData(pageNumber, original.value, readResults),
        value: original.value.text,
        valueType: "string"
    };
}
export function toFormTable(original, readResults, pageNumber) {
    return {
        rowCount: original.rows,
        columnCount: original.columns,
        cells: original.cells.map((cell) => {
            var _a, _b, _c, _d, _e, _f;
            return ({
                boundingBox: toBoundingBox(cell.boundingBox),
                columnIndex: cell.columnIndex,
                fieldElements: (_a = cell.elements) === null || _a === void 0 ? void 0 : _a.map((element) => toFormContent(element, readResults)),
                rowIndex: cell.rowIndex,
                columnSpan: (_b = cell.columnSpan) !== null && _b !== void 0 ? _b : 1,
                rowSpan: (_c = cell.rowSpan) !== null && _c !== void 0 ? _c : 1,
                isHeader: (_d = cell.isHeader) !== null && _d !== void 0 ? _d : false,
                isFooter: (_e = cell.isFooter) !== null && _e !== void 0 ? _e : false,
                confidence: (_f = cell.confidence) !== null && _f !== void 0 ? _f : 1,
                text: cell.text,
                pageNumber
            });
        }),
        pageNumber
    };
}
export function toFormPages(readResults, pageResults) {
    var _a;
    const transformed = readResults === null || readResults === void 0 ? void 0 : readResults.map(toFormPage);
    // maps from page numbers to the objects
    const readMap = new Map(transformed === null || transformed === void 0 ? void 0 : transformed.map((r) => [r.pageNumber, r]));
    const pageMap = new Map(pageResults === null || pageResults === void 0 ? void 0 : pageResults.map((r) => [r.pageNumber, r]));
    const result = [];
    for (const pageNumber of readMap.keys()) {
        const readResult = readMap.get(pageNumber);
        if (readResult) {
            const pageResult = pageMap.get(pageNumber);
            if (pageResult) {
                readResult.tables = (_a = pageResult.tables) === null || _a === void 0 ? void 0 : _a.map((table) => toFormTable(table, transformed, pageNumber));
                result.push(readResult);
            }
        }
    }
    return result;
}
export function toRecognizeFormResultResponse(original) {
    var _a, _b, _c, _d;
    const pages = toFormPages((_a = original.analyzeResult) === null || _a === void 0 ? void 0 : _a.readResults, (_b = original.analyzeResult) === null || _b === void 0 ? void 0 : _b.pageResults);
    const common = {
        status: original.status,
        createdOn: original.createdOn,
        errors: (_c = original.analyzeResult) === null || _c === void 0 ? void 0 : _c.errors,
        lastModified: original.lastModified,
        _response: original._response
    };
    if (original.status !== "succeeded") {
        return common;
    }
    const additional = original.analyzeResult
        ? {
            version: original.analyzeResult.version,
            forms: original.analyzeResult.documentResults &&
                original.analyzeResult.documentResults.length > 0
                ? original.analyzeResult.documentResults.map((d) => toRecognizedForm(d, pages)) // supervised
                : (_d = original.analyzeResult.pageResults) === null || _d === void 0 ? void 0 : _d.map((p) => toFormFromPageResult(p, pages)) // unsupervised
        }
        : undefined;
    return Object.assign(Object.assign({}, common), additional);
}
export function toFormFieldFromFieldValueModel(original, key, readResults) {
    var _a, _b, _c;
    let value;
    switch (original.type) {
        case "string":
            value = original.valueString;
            break;
        case "date":
            value = original.valueDate;
            break;
        case "time":
            value = original.valueTime;
            break;
        case "integer":
            value = original.valueInteger;
            break;
        case "number":
            value = original.valueNumber;
            break;
        case "phoneNumber":
            value = original.valuePhoneNumber;
            break;
        case "array":
            value = (_a = original.valueArray) === null || _a === void 0 ? void 0 : _a.map((fieldValueModel) => toFormFieldFromFieldValueModel(fieldValueModel, key, readResults));
            break;
        case "object":
            value = original.valueObject
                ? toFieldsFromFieldValue(original.valueObject, readResults)
                : undefined;
            break;
    }
    return {
        confidence: original.confidence || 1,
        name: key,
        valueData: {
            pageNumber: (_b = original.pageNumber) !== null && _b !== void 0 ? _b : 0,
            text: original.text,
            boundingBox: original.boundingBox ? toBoundingBox(original.boundingBox) : undefined,
            fieldElements: (_c = original.elements) === null || _c === void 0 ? void 0 : _c.map((element) => toFormContent(element, readResults))
        },
        valueType: original.type,
        value
    };
}
export function toFieldsFromFieldValue(original, readResults) {
    const result = {};
    for (const key in original) {
        // eslint-disable-next-line no-prototype-builtins
        if (original.hasOwnProperty(key)) {
            if (!original[key]) {
                result[key] = { name: key };
                continue;
            }
            const formField = toFormFieldFromFieldValueModel(original[key], key, readResults);
            result[key] = formField;
        }
    }
    return result;
}
export function toFieldsFromKeyValuePairs(pageNumber, original, pages) {
    const result = {};
    for (let i = 0; i < original.length; i++) {
        const pair = original[i];
        const stringField = toFormFieldFromKeyValuePairModel(pageNumber, pair, pages);
        stringField.name = stringField.name || `field-${i}`;
        result[`field-${i}`] = stringField;
    }
    return result;
}
export function toFormFromPageResult(original, pages) {
    return {
        formType: `form-${original.clusterId}`,
        pageRange: { firstPageNumber: original.pageNumber, lastPageNumber: original.pageNumber },
        pages: pages.filter((p) => p.pageNumber === original.pageNumber),
        fields: original.keyValuePairs
            ? toFieldsFromKeyValuePairs(original.pageNumber, original.keyValuePairs, pages)
            : {}
    };
}
export function toRecognizedForm(original, pages) {
    return {
        formType: original.docType,
        pageRange: { firstPageNumber: original.pageRange[0], lastPageNumber: original.pageRange[1] },
        fields: toFieldsFromFieldValue(original.fields, pages),
        pages: pages.filter((p) => original.pageRange[0] <= p.pageNumber && p.pageNumber <= original.pageRange[1])
    };
}
export function toRecognizeContentResultResponse(original) {
    var _a;
    function toRecognizeContentResult(model) {
        if (!model) {
            return undefined;
        }
        const pages = toFormPages(model.readResults, model.pageResults);
        return {
            version: model.version,
            pages: pages
        };
    }
    const common = {
        status: original.status,
        createdOn: original.createdOn,
        errors: (_a = original.analyzeResult) === null || _a === void 0 ? void 0 : _a.errors,
        lastModified: original.lastModified,
        _response: original._response
    };
    if (original.status === "succeeded") {
        return Object.assign(Object.assign({}, common), toRecognizeContentResult(original.analyzeResult));
    }
    else {
        return common;
    }
}
export function toRecognizeFormResultResponseFromReceipt(original) {
    var _a;
    const common = {
        status: original.status,
        createdOn: original.createdOn,
        errors: (_a = original.analyzeResult) === null || _a === void 0 ? void 0 : _a.errors,
        lastModified: original.lastModified,
        _response: original._response
    };
    if (original.status !== "succeeded") {
        return common;
    }
    if (!original.analyzeResult) {
        throw new Error("Expecting valid analyzeResult from the service response");
    }
    const pages = original.analyzeResult.readResults.map(toFormPage);
    return Object.assign(Object.assign({}, common), { version: original.analyzeResult.version, forms: original
            .analyzeResult.documentResults.filter((d) => {
            return !!d.fields;
        })
            .map((d) => {
            if (d.docType !== "prebuilt:receipt") {
                throw new RangeError("The document type is not 'prebuilt:receipt'");
            }
            return toRecognizedForm(d, pages);
        }) });
}
export function toFormModelResponse(response) {
    var _a, _b, _c, _d;
    const common = Object.assign(Object.assign({}, response.modelInfo), { trainingDocuments: (_a = response.trainResult) === null || _a === void 0 ? void 0 : _a.trainingDocuments, errors: (_b = response.trainResult) === null || _b === void 0 ? void 0 : _b.errors, _response: response._response });
    if (response.modelInfo.status !== "ready") {
        return common;
    }
    if (((_c = response.trainResult) === null || _c === void 0 ? void 0 : _c.averageModelAccuracy) || ((_d = response.trainResult) === null || _d === void 0 ? void 0 : _d.fields)) {
        // training with forms and labels, populate from trainingResult.fields
        const fields = {};
        for (const f of response.trainResult.fields) {
            fields[f.fieldName] = { name: f.fieldName, accuracy: f.accuracy, label: null };
        }
        return Object.assign(Object.assign({}, common), { submodels: [
                {
                    accuracy: response.trainResult.averageModelAccuracy,
                    formType: `form-${response.modelInfo.modelId}`,
                    fields
                }
            ] });
    }
    else if (response.keys) {
        // training with forms, populate from trainingResult.keys
        const submodels = [];
        for (const clusterKey in response.keys.clusters) {
            const cluster = response.keys.clusters[clusterKey];
            const fields = {};
            for (let i = 0; i < cluster.length; i++) {
                fields[`field-${i}`] = { name: `field-${i}`, label: cluster[i] };
            }
            submodels.push({ formType: `form-${clusterKey}`, fields });
        }
        return Object.assign(Object.assign({}, common), { submodels });
    }
    else {
        throw new Error("Expecting model(s) from traning result but got none");
    }
}
//# sourceMappingURL=transforms.js.map