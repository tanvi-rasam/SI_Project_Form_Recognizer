/// <reference types="node" />
/// <reference lib="esnext.asynciterable" />
import { AzureKeyCredential } from '@azure/core-auth';
import * as coreHttp from '@azure/core-http';
import { KeyCredential } from '@azure/core-auth';
import { OperationOptions } from '@azure/core-http';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PipelineOptions } from '@azure/core-http';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';
import { RestResponse } from '@azure/core-http';
import { TokenCredential } from '@azure/identity';

/**
 * Summary of all models in the cognitive service account.
 */
export declare interface AccountProperties {
    /**
     * Current count of trained custom models.
     */
    customModelCount: number;
    /**
     * Max number of models that can be trained for this account.
     */
    customModelLimit: number;
}
export { AzureKeyCredential }

/**
 * Options for begin copy model operation
 */
export declare type BeginCopyModelOptions = FormRecognizerOperationOptions & {
    updateIntervalInMs?: number;
    onProgress?: (state: CopyModelOperationState) => void;
    resumeFrom?: string;
};

/**
 * Options for the start content/layout recognition operation
 */
export declare type BeginRecognizeContentOptions = RecognizeContentOptions & {
    /**
     * Delay to wait until next poll, in milliseconds
     */
    updateIntervalInMs?: number;
    /**
     * Callback to progress events triggered in the content recognition Long-Running-Operation (LRO)
     */
    onProgress?: (state: RecognizeContentOperationState) => void;
    /**
     * A serialized poller which can be used to resume an existing paused Long-Running-Operation.
     */
    resumeFrom?: string;
    /**
     * Content type of the input. Supported types are "application/pdf", "image/jpeg", "image/png", and "image/tiff".
     */
    contentType?: FormContentType;
};

/**
 * Options for starting the analyze form operation
 */
export declare type BeginRecognizeFormsOptions = RecognizeFormsOptions & {
    /**
     * Delay to wait until next poll, in milliseconds
     */
    updateIntervalInMs?: number;
    /**
     * Callback to progress events triggered in the Recognize Form Long-Running-Operation (LRO)
     */
    onProgress?: (state: RecognizeFormsOperationState) => void;
    /**
     * A serialized poller which can be used to resume an existing paused Long-Running-Operation.
     */
    resumeFrom?: string;
    /**
     * Content type of the input. Supported types are "application/pdf", "image/jpeg", "image/png", and "image/tiff".
     */
    contentType?: FormContentType;
};

/**
 * Options for starting the receipt recognition operation
 */
export declare type BeginRecognizeReceiptsOptions = BeginRecognizeFormsOptions;

/**
 * Options for starting model training operation.
 */
export declare type BeginTrainingOptions = TrainingFileFilter & {
    updateIntervalInMs?: number;
    onProgress?: (state: TrainingOperationState) => void;
    resumeFrom?: string;
};

/**
 * Properties common to the recognized text field
 */
export declare interface CommonFieldValue {
    /**
     * Text content of the recognized field.
     */
    text?: string;
    /**
     * Bounding box of the field value, if appropriate.
     */
    boundingBox?: Point2D[];
    /**
     * Confidence score.
     */
    confidence?: number;
    /**
     * When includeFieldElements is set to true, a list of references to the elements constituting
     * this field.
     */
    fieldElements?: FormElement[];
    /**
     * The 1-based page number in the input document.
     */
    pageNumber?: number;
}

/**
 * The Long-Running-Operation (LRO) poller that allows you to wait until form content is recognized.
 */
export declare type ContentPollerLike = PollerLike<PollOperationState<FormPageArray>, FormPageArray>;

/**
 * Request parameter that contains authorization claims for copy operation.
 */
export declare interface CopyAuthorization {
    /**
     * Model identifier.
     */
    modelId: string;
    /**
     * Token claim used to authorize the copy request.
     */
    accessToken: string;
    /**
     * Target resource Id.
     */
    resourceId: string;
    /**
     * Target resource region.
     */
    resourceRegion: string;
    /**
     * The time when the access token expires.
     */
    expiresOn: Date;
}

/**
 * The status of a copy model operation
 */
export declare type CopyModelOperationState = PollOperationState<CustomFormModel> & {
    /**
     * A string representing the current status of the operation.
     */
    status: OperationStatus;
};

/**
 * Options for the copy custom model operation.
 */
export declare type CopyModelOptions = FormRecognizerOperationOptions;

/**
 * Represents a model from training.
 */
export declare interface CustomFormModel {
    /**
     * Model identifier.
     */
    modelId: string;
    /**
     * Status of the model.
     */
    status: ModelStatus;
    /**
     * Date and time (UTC) when the custom model training started.
     */
    trainingStartedOn: Date;
    /**
     * Date and time (UTC) when the training operation completed.
     */
    trainingCompletedOn: Date;
    /**
     * List of document used to train the model and any errors reported for each document.
     */
    trainingDocuments?: TrainingDocumentInfo[];
    /**
     * Errors returned during training operation.
     */
    errors?: FormRecognizerError[];
    /**
     * Form models created by training.
     */
    submodels?: CustomFormSubmodel[];
}

export declare interface CustomFormModelField {
    /**
     * Estimated extraction accuracy for this field.
     */
    accuracy?: number;
    /**
     * Training field name.
     */
    name: string;
    /**
     * Training field label.
     */
    label: string | null;
}

/**
 * Basic custom model information.
 */
export declare interface CustomFormModelInfo {
    /**
     * Model identifier.
     */
    modelId: string;
    /**
     * Status of the model.
     */
    status: ModelStatus;
    /**
     * Date and time (UTC) when the custom model training started.
     */
    trainingStartedOn: Date;
    /**
     * Date and time (UTC) when the training operation completed.
     */
    trainingCompletedOn: Date;
}

/**
 * Represents the model for a type of custom form from the training.
 */
export declare interface CustomFormSubmodel {
    /**
     * Estimated extraction accuracy for this field.
     */
    accuracy?: number;
    /**
     * Form fields
     */
    fields: Record<string, CustomFormModelField>;
    /**
     * Form type
     */
    formType: string;
}

/**
 * Options for the delete model operation.
 */
export declare type DeleteModelOptions = FormRecognizerOperationOptions;

/**
 * Represents recognized elements of label-value pairs.
 * For example, "Work Address" is the label of
 * "Work Address: One Microsoft Way, Redmond, WA"
 */
export declare interface FieldData {
    /**
     * The 1-based page number in the input document.
     */
    pageNumber: number;
    /**
     * The bounding box of the recognized label or value
     */
    boundingBox?: Point2D[];
    /**
     * When includeFieldElements is set to true, a list of references to the
     * form elements that constitute this label-value pair.
     */
    fieldElements?: FormElement[];
    /**
     * The text content of the recognized label or value
     */
    text?: string;
}

/**
 * Content types supported by Form Recognizer service.
 */
export declare type FormContentType = "application/pdf" | "image/jpeg" | "image/png" | "image/tiff";

/**
 * Represents a recognized check box
 */
/**
 * Information about a recognized element in the form. Examples include
 * words, lines, checkbox, etc.
 */
export declare type FormElement = FormWord | FormLine;

/**
 * Represents common properties of recognized form elements.
 */
export declare interface FormElementCommon {
    /**
     * The 1-based page number in the input document.
     */
    pageNumber: number;
    /**
     * The text content of the word.
     */
    text: string;
    /**
     * Bounding box of a recognized word.
     */
    boundingBox: Point2D[];
}

/**
 * Represents recognized text elements in label-value pairs.
 * For example, "Address": "One Microsoft Way, Redmond, WA"
 */
export declare type FormField = {
    /**
     * Confidence value.
     */
    confidence?: number;
    /**
     * Contains the recognized field label's text, bounding box, and field elements.
     */
    labelData?: FieldData;
    /**
     * A user defined label for the field.
     */
    name?: string;
    /**
     * Contains the recognized field value's text, bounding box, and field elements.
     */
    valueData?: FieldData;
} & ({
    /**
     * value of the recognized field.
     */
    value?: string;
    /**
     * Type of the 'value' field
     */
    valueType?: "string";
} | {
    value?: number;
    valueType?: "number";
} | {
    value?: Date;
    valueType?: "date";
} | {
    value?: string;
    valueType?: "time";
} | {
    value?: string;
    valueType?: "phoneNumber";
} | {
    value?: number;
    valueType?: "integer";
} | {
    value?: FormField[];
    valueType?: "array";
} | {
    value?: Record<string, FormField>;
    valueType?: "object";
});

/**
 * Report for a custom model training field.
 */
export declare interface FormFieldsReport {
    /**
     * Training field name.
     */
    fieldName: string;
    /**
     * Estimated extraction accuracy for this field.
     */
    accuracy: number;
}

/**
 * Represents a recognized text line.
 */
export declare interface FormLine extends FormElementCommon {
    /**
     * Element kind - "line"
     */
    kind: "line";
    /**
     * The detected language of this line, if different from the overall page language. Possible
     * values include: 'en', 'es'
     */
    /**
     * List of words in the text line.
     */
    words: FormWord[];
}

/**
 * Contains the response data for retrieving a model from unlabeled training.
 */
export declare type FormModelResponse = CustomFormModel & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: Model;
    };
};

/**
 * Raw texts recognized from a page in the input document.
 */
export declare interface FormPage {
    /**
     * The 1-based page number in the input document.
     */
    pageNumber: number;
    /**
     * The general orientation of the text in clockwise direction, measured in degrees between (-180,
     * 180].
     */
    textAngle: number;
    /**
     * The width of the image/PDF in pixels/inches, respectively.
     */
    width: number;
    /**
     * The height of the image/PDF in pixels/inches, respectively.
     */
    height: number;
    /**
     * The unit used by the width, height and boundingBox properties. For images, the unit is
     * "pixel". For PDF, the unit is "inch". Possible values include: 'pixel', 'inch'
     */
    unit: LengthUnit;
    /**
     * The detected language on the page overall. Possible values include: 'en', 'es'
     */
    /**
     * When `includeFieldElements` is set to true, a list of recognized text lines. The maximum number of
     * lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in
     * certain cases proximity is treated with higher priority. As the sorting order depends on the
     * detected text, it may change across images and OCR version updates. Thus, business logic
     * should be built upon the actual line location instead of order.
     */
    lines?: FormLine[];
    /**
     * List of data tables recognized form the page
     */
    tables?: FormTable[];
}

/**
 * Array of {@link FormPage}
 */
export declare interface FormPageArray extends Array<FormPage> {
}

/**
 * Represents a Form page range
 */
export declare interface FormPageRange {
    /**
     * The page number of the first page in the range
     */
    firstPageNumber: number;
    /**
     * The page number of the last page in the range
     */
    lastPageNumber: number;
}

/**
 * Result type of the Recognize Form Long-Running-Operation (LRO)
 */
export declare type FormPollerLike = PollerLike<RecognizeFormsOperationState, RecognizedFormArray>;

/**
 * Client class for interacting with Azure Form Recognizer service.
 */
export declare class FormRecognizerClient {
    /**
     * Url to an Azure Form Recognizer service endpoint
     */
    readonly endpointUrl: string;
    /* Excluded from this release type: client */
    /**
     * Creates an instance of FormRecognizerClient.
     *
     * Example usage:
     * ```ts
     * import { FormRecognizerClient, AzureKeyCredential } from "@azure/ai-form-recognizer";
     *
     * const client = new FormRecognizerClient(
     *    "<service endpoint>",
     *    new AzureKeyCredential("<api key>")
     * );
     * ```
     * @param {string} endpointUrl Url to an Azure Form Recognizer service endpoint
     * @param {TokenCredential | KeyCredential} credential Used to authenticate requests to the service.
     * @param {FormRecognizerClientOptions} [options] Used to configure the Form Recognizer client.
     */
    constructor(endpointUrl: string, credential: TokenCredential | KeyCredential, options?: FormRecognizerClientOptions);
    /**
     * Recognizes content, including text and table structure from a form document.
     *
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const path = "./Invoice_7.pdf";
     * const readStream = fs.createReadStream(path);
     *
     * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await client.beginRecognizeContent(readStream, "application/pdf", {
     *   onProgress: (state) => { console.log(`status: ${state.status}`); }
     * });
     *
     * const pages = await poller.pollUntilDone();
     * ```
     * @summary Recognizes content/layout information from a given document
     * @param {FormRecognizerRequestBody} form Input document
     * @param {BeginRecognizeContentOptions} [options] Options to start content recognition operation
     */
    beginRecognizeContent(form: FormRecognizerRequestBody, options?: BeginRecognizeContentOptions): Promise<ContentPollerLike>;
    /**
     * Recognizes content, including text and table structure from a url to a form document.
     *
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const url = "<form document url>";
     *
     * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await client.beginRecognizeContentFromUrl(url, {
     *   onProgress: (state) => { console.log(`status: ${state.status}`); }
     * });
     *
     * const pages = await poller.pollUntilDone();
     * ```
     * @summary Recognizes content/layout information from a url to a form document
     * @param {string} formUrl Url to a form document that is accessible from the service. Must be a valid, encoded URL to one of the following supported document types: PDF, JPEG, PNG, and TIFF.
     * @param {BeginRecognizeContentOptions} [options] Options to start content recognition operation
     */
    beginRecognizeContentFromUrl(formUrl: string, options?: BeginRecognizeContentOptions): Promise<ContentPollerLike>;
    /**
     * Retrieves result of content recognition operation.
     * @private
     */
    private getRecognizedContent;
    /**
     * Recognizes forms from a given document using a custom form model from training.
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const path = "./Invoice_6.pdf";
     * const readStream = fs.createReadStream(path);
     *
     * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await client.beginRecognizeCustomForms(modelId, readStream, "application/pdf", {
     *   onProgress: (state) => { console.log(`status: ${state.status}`); }
     * });
     * const forms = await poller.pollUntilDone();
     * ```
     * @summary Recognizes form information from a given document using a custom form model.
     * @param {string} modelId Id of the custom form model to use
     * @param {FormRecognizerRequestBody} form Input form document
     * @param {BeginRecognizeFormsOptions} [options] Options to start the form recognition operation
     */
    beginRecognizeCustomForms(modelId: string, form: FormRecognizerRequestBody, options?: BeginRecognizeFormsOptions): Promise<FormPollerLike>;
    /**
     * Recognizes forms from a url to a form document using a custom form model from training.
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const url = "<form document url>";
     *
     * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await client.beginRecognizeCustomFormsFromUrl(modelId, url, {
     *   onProgress: (state) => { console.log(`status: ${state.status}`); }
     * });
     * const forms = await poller.pollUntilDone();
     * ```
     * @summary Recognizes form information from a url to a form document using a custom form model.
     * @param {string} modelId Id of the custom form model to use
     * @param {string} formUrl Url to a form document that is accessible from the service. Must be a valid, encoded URL to one of the following supported document types: PDF, JPEG, PNG, and TIFF.
     * @param {BeginRecognizeFormsOptions} [options] Options to start the form recognition operation
     */
    beginRecognizeCustomFormsFromUrl(modelId: string, formUrl: string, options?: BeginRecognizeFormsOptions): Promise<FormPollerLike>;
    /**
     * Retrieves result of a form recognition operation.
     * @private
     */
    private getRecognizedForm;
    /**
     * Recognizes data from receipts using pre-built receipt model, enabling you to extract structure data
     * from receipts such as merchant name, merchant phone number, transaction date, and more.
     *
     * For a list of fields that are contained in the response, please refer to the "Supported fields" section at the following link: https://aka.ms/azsdk/formrecognizer/receiptfields
     *
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const path = "./contoso-allinone.jpg";
     * const readStream = fs.createReadStream(path);
     *
     * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await client.beginRecognizeReceipts(readStream, "image/jpeg", {
     *   onProgress: (state) => { console.log(`status: ${state.status}`); }
     * });
     *
     * const receipts = await poller.pollUntilDone();
     *  if (!receipts || receipts.length <= 0) {
     *    throw new Error("Expecting at lease one receipt in analysis result");
     *  }
     *
     * const receipt = receipts[0];
     * console.log("First receipt:");
     * const receiptTypeField = receipt.fields["ReceiptType"];
     * if (receiptTypeField.valueType === "string") {
     *   console.log(`  Receipt Type: '${receiptTypeField.value || "<missing>"}', with confidence of ${receiptTypeField.confidence}`);
     * }
     * const merchantNameField = receipt.fields["MerchantName"];
     * if (merchantNameField.valueType === "string") {
     *   console.log(`  Merchant Name: '${merchantNameField.value || "<missing>"}', with confidence of ${merchantNameField.confidence}`);
     * }
     * const transactionDate = receipt.fields["TransactionDate"];
     * if (transactionDate.valueType === "date") {
     *   console.log(`  Transaction Date: '${transactionDate.value || "<missing>"}', with confidence of ${transactionDate.confidence}`);
     * }
     * const itemsField = receipt.fields["Items"];
     * if (itemsField.valueType === "array") {
     *   for (const itemField of itemsField.value || []) {
     *     if (itemField.valueType === "object") {
     *       const itemNameField = itemField.value!["Name"];
     *       if (itemNameField.valueType === "string") {
     *         console.log(`    Item Name: '${itemNameField.value || "<missing>"}', with confidence of ${itemNameField.confidence}`);
     *       }
     *     }
     *  }
     * }
     * const totalField = receipt.fields["Total"];
     * if (totalField.valueType === "number") {
     *   console.log(`  Total: '${totalField.value || "<missing>"}', with confidence of ${totalField.confidence}`);
     * }
     * ```
     * @summary Recognizes receipt information from a given document
     * @param {FormRecognizerRequestBody} receipt Input document
     * @param {FormContentType} contentType Content type of the input. Supported types are "application/pdf", "image/jpeg", "image/png", and "image/tiff";
     * @param {BeginRecognizeFormsOptions} [options] Options to start the receipt recognition operation
     */
    beginRecognizeReceipts(receipt: FormRecognizerRequestBody, options?: BeginRecognizeReceiptsOptions): Promise<FormPollerLike>;
    /**
     * Recognizes receipt information from a url using pre-built receipt model, enabling you to extract structure data
     * from receipts such as merchant name, merchant phone number, transaction date, and more.
     *
     * For a list of fields that are contained in the response, please refer to the "Supported fields" section at the following link: https://aka.ms/azsdk/formrecognizer/receiptfields
     *
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const url = "<url to the receipt document>";
     * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await client.beginRecognizeReceiptsFromUrl(
     *   url, {
     *     includeFieldElements: true,
     *     onProgress: (state) => { console.log(`analyzing status: ${state.status}`); }
     * });
     * const receipts = await poller.pollUntilDone();
     *  if (!receipts || receipts.length <= 0) {
     *    throw new Error("Expecting at lease one receipt in analysis result");
     *  }
     *
     * const receipt = receipts[0];
     * console.log("First receipt:");
     * const receiptTypeField = receipt.fields["ReceiptType"];
     * if (receiptTypeField.valueType === "string") {
     *   console.log(`  Receipt Type: '${receiptTypeField.value || "<missing>"}', with confidence of ${receiptTypeField.confidence}`);
     * }
     * const merchantNameField = receipt.fields["MerchantName"];
     * if (merchantNameField.valueType === "string") {
     *   console.log(`  Merchant Name: '${merchantNameField.value || "<missing>"}', with confidence of ${merchantNameField.confidence}`);
     * }
     * const transactionDate = receipt.fields["TransactionDate"];
     * if (transactionDate.valueType === "date") {
     *   console.log(`  Transaction Date: '${transactionDate.value || "<missing>"}', with confidence of ${transactionDate.confidence}`);
     * }
     * const itemsField = receipt.fields["Items"];
     * if (itemsField.valueType === "array") {
     *   for (const itemField of itemsField.value || []) {
     *     if (itemField.valueType === "object") {
     *       const itemNameField = itemField.value!["Name"];
     *       if (itemNameField.valueType === "string") {
     *         console.log(`    Item Name: '${itemNameField.value || "<missing>"}', with confidence of ${itemNameField.confidence}`);
     *       }
     *     }
     *  }
     * }
     * const totalField = receipt.fields["Total"];
     * if (totalField.valueType === "number") {
     *   console.log(`  Total: '${totalField.value || "<missing>"}', with confidence of ${totalField.confidence}`);
     * }
     * ```
     * @summary Recognizes receipt information from a given accessible url to input document
     * @param {string} receiptUrl Url to a receipt document that is accessible from the service. Must be a valid, encoded URL to one of the following supported document types: PDF, JPEG, PNG, and TIFF.
     * @param {BeginRecognizeFormsOptions} [options] Options to start receipt recognition operation
     */
    beginRecognizeReceiptsFromUrl(receiptUrl: string, options?: BeginRecognizeReceiptsOptions): Promise<FormPollerLike>;
    /**
     * Retrieves result of a receipt recognition operation.
     * @private
     */
    private getReceipts;
}

/**
 * Client options used to configure Form Recognizer API requests.
 */
export declare interface FormRecognizerClientOptions extends PipelineOptions {
}

/**
 * Represents errors from Azure Form Recognizer service
 */
export declare interface FormRecognizerError {
    /**
     * Error code
     */
    code: string;
    /**
     * Error message
     */
    message: string;
}

/**
 * Options common to all form recognizer operations.
 */
export declare interface FormRecognizerOperationOptions extends OperationOptions {
}

/**
 * Types of binary data allowed as input to recognition operations
 */
export declare type FormRecognizerRequestBody = Blob | ArrayBuffer | ArrayBufferView | NodeJS.ReadableStream;

/**
 * Information about the recognized table contained in a page.
 */
export declare interface FormTable {
    /**
     * Number of rows in the data table
     */
    rowCount: number;
    /**
     * Number of columns in the data table
     */
    columnCount: number;
    /**
     * List of cells in the data table
     */
    cells: FormTableCell[];
    /**
     * The 1-based page number in the input document where the table appears.
     */
    pageNumber: number;
}

/**
 * Represents a cell in recognized table
 */
export declare interface FormTableCell {
    /**
     * Row index of the cell.
     */
    rowIndex: number;
    /**
     * Column index of the cell.
     */
    columnIndex: number;
    /**
     * Number of rows spanned by this cell.
     */
    rowSpan: number;
    /**
     * Number of columns spanned by this cell.
     */
    columnSpan: number;
    /**
     * Text content of the cell.
     */
    text: string;
    /**
     * Bounding box of the cell.
     */
    boundingBox: Point2D[];
    /**
     * Confidence value.
     */
    confidence: number;
    /**
     * When includeFieldElements is set to true, a list of references to the elements constituting this table cell.
     */
    fieldElements?: FormElement[];
    /**
     * Is the current cell a header cell?
     */
    isHeader: boolean;
    /**
     * Is the current cell a footer cell?
     */
    isFooter: boolean;
    /**
     * The 1-based page number in the input document where the table cell appears.
     */
    pageNumber: number;
}

/**
 * Client class for training and managing custom form models.
 */
export declare class FormTrainingClient {
    /**
     * Url to an Azure Form Recognizer service endpoint
     */
    readonly endpointUrl: string;
    /* Excluded from this release type: credential */
    /* Excluded from this release type: clientOptions */
    /* Excluded from this release type: client */
    /**
     * Creates an instance of FormTrainingClient.
     *
     * Example usage:
     * ```ts
     * import {FormTrainingClient, AzureKeyCredential } from "@azure/ai-form-recognizer";
     *
     * const client = new FormTrainingClient(
     *    "<service endpoint>",
     *    new AzureKeyCredential("<api key>")
     * );
     * ```
     * @param {string} endpointUrl Url to an Azure Form Recognizer service endpoint
     * @param {TokenCredential | KeyCredential} credential Used to authenticate requests to the service.
     * @param {FormRecognizerClientOptions} [options] Used to configure the client.
     */
    constructor(endpointUrl: string, credential: TokenCredential | KeyCredential, options?: FormRecognizerClientOptions);
    /**
     * Retrieves summary information about the cognitive service account
     *
     * @param {GetAccountPropertiesOptions} options Options to GetSummary operation
     */
    getAccountProperties(options?: GetAccountPropertiesOptions): Promise<AccountProperties>;
    /**
     * Creates an instance of {@link FormTrainingClient} to perform training operations
     * and to manage trained custom form models.
     */
    getFormRecognizerClient(): FormRecognizerClient;
    /**
     * Mark model for deletion. Model artifacts will be permanently removed within 48 hours.
     *
     * @param {string} modelId Id of the model to mark for deletion
     * @param {DeleteModelOptions} options Options to the Delete Model operation
     */
    deleteModel(modelId: string, options?: DeleteModelOptions): Promise<RestResponse>;
    /**
     * Get detailed information about a custom model from training.
     *
     * @param {string} modelId Id of the model to get information
     * @param {GetModelOptions} options Options to the Get Model operation
     */
    getCustomModel(modelId: string, options?: GetModelOptions): Promise<FormModelResponse>;
    private listModelsPage;
    private listModelsAll;
    /**
     * Returns an async iterable iterator to list information about all models in the cognitive service account.
     *
     * .byPage() returns an async iterable iterator to list the blobs in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * const client = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));
     * const result = client.listCustomModels();
     * let i = 1;
     * for await (const model of result) {
     *   console.log(`model ${i++}:`);
     *   console.log(model);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * let iter = client.listCustomModels();
     * let modelItem = await iter.next();
     * while (!modelItem.done) {
     *   console.log(`model ${i++}: ${modelItem.value}`);
     *   modelItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     *  let i = 1;
     *  for await (const response of client.listCustomModels().byPage()) {
     *    for (const modelInfo of response.modelList!) {
     *      console.log(`model ${i++}: ${modelInfo.modelId}`);
     *    }
     *  }
     * ```
     *
     * @param {ListModelOptions} options Options to the List Models operation
     */
    listCustomModels(options?: ListModelsOptions): PagedAsyncIterableIterator<CustomFormModelInfo, ListCustomModelsResponse>;
    private list;
    private listNextPage;
    /**
     * Creates and trains a custom form model.
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Note that when training operation fails, a model is still created in Azure Form Recognizer resource.
     *
     * Example usage:
     * ```ts
     * const trainingFilesUrl = "<url to the blob container storing training documents>";
     * const trainingClient = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));
     *
     * const poller = await trainingClient.beginTraining(trainingFilesUrl, false, {
     *   onProgress: (state) => { console.log("training status: "); console.log(state); }
     * });
     * const model = await poller.pollUntilDone();
     * ```
     * @summary Creates and trains a model
     * @param {string} trainingFilesUrl Accessible url to an Azure Storage Blob container storing the training documents
     * @param {boolean} useTrainingLabels specifies whether to training the model using label files
     * @param {BeginTrainingOptions} [options] Options to start model training operation
     */
    beginTraining(trainingFilesUrl: string, useTrainingLabels: boolean, options?: BeginTrainingOptions): Promise<PollerLike<TrainingOperationState, CustomFormModel>>;
    /**
     * Generate an authorization for copying a custom model into this Azure Form Recognizer resource.
     *
     * This method should be called on a client that is authenticated using the target resource (where the
     * model will be copied to) credentials, and the output can be passed as the `target` parameter to the
     * `beginCopyModel` method of a source client.
     *
     * The required `resourceId` and `resourceRegion` are properties of an Azure Form Recognizer resource and their values can be found in the Azure Portal.
     *
     * @param {string} resourceId Id of the Azure Form Recognizer resource where a custom model will be copied to
     * @param {string} resourceRegion Location of the Azure Form Recognizer resource, must be a valid region name supported by Azure Cognitive Services. See https://aka.ms/azsdk/cognitiveservices/regionalavailability for information about the regional availability of Azure Cognitive Services.
     * @param {GetCopyAuthorizationOptions} [options={}] Options to get copy authorization operation
     * @returns {Promise<CopyAuthorization>} The authorization to copy a custom model
     */
    getCopyAuthorization(resourceId: string, resourceRegion: string, options?: GetCopyAuthorizationOptions): Promise<CopyAuthorization>;
    /**
     * Copies a custom model from this resource (the source) to the specified target Form Recognizer resource.
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the operation is completed.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * Example usage:
     * ```ts
     * const targetClient = new FormTrainingClient(targetEndpoint, new AzureKeyCredential(targetApiKey));
     * const authorization = await targetClient.getCopyAuthorization(targetResourceId, targetResourceRegion);
     *
     * const sourceClient = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));
     * const poller = await sourceClient.beginCopyModel(sourceModelId, authorization, {
     *   onProgress: (state) => {
     *     console.log(`Copy model status: ${state.status}`);
     *   }
     * });
     * const result = await poller.pollUntilDone();
     * ```
     * @summary Copies custom model to target resource
     * @param {string} modelId Id of the custom model in this resource to be copied to the target Form Recognizer resource
     * @param {CopyAuthorization} target Copy authorization produced by calling `targetTrainingClient.getCopyAuthorization()`
     * @param {BeginTrainingOptions} [options] Options to copy model operation
     */
    beginCopyModel(modelId: string, target: CopyAuthorization, options?: BeginCopyModelOptions): Promise<PollerLike<CopyModelOperationState, CustomFormModelInfo>>;
    private beginCopyModelInternal;
    private getCopyModelResult;
}

/**
 * Represents a recognized word.
 */
export declare interface FormWord extends FormElementCommon {
    /**
     * Element kind - "word"
     */
    kind: "word";
    /**
     * Confidence value.
     */
    confidence?: number;
}

/**
 * Options for the get account properties operation.
 */
export declare type GetAccountPropertiesOptions = FormRecognizerOperationOptions;

/**
 * Options for the generate copy model authorization operation.
 */
export declare type GetCopyAuthorizationOptions = FormRecognizerOperationOptions;

/**
 * Options for the get copy model result operation.
 */
export declare type GetCopyModelResultOptions = FormRecognizerOperationOptions;

/**
 * Options for the get model operation.
 */
export declare type GetModelOptions = FormRecognizerOperationOptions;

/**
 * Keys extracted by the custom model.
 */
export declare interface KeysResult {
    /**
     * Object mapping clusterIds to a list of keys.
     */
    clusters: {
        [propertyName: string]: string[];
    };
}

/**
 * Information about the extracted key or value in a key-value pair.
 */
export declare interface KeyValueElementModel {
    /**
     * The text content of the key or value.
     */
    text: string;
    /**
     * Bounding box of the key or value.
     */
    boundingBox?: number[];
    /**
     * When includeTextDetails is set to true, a list of references to the text elements constituting this key or value.
     */
    elements?: string[];
}

/**
 * Information about the extracted key-value pair.
 */
export declare interface KeyValuePairModel {
    /**
     * A user defined label for the key/value pair entry.
     */
    label?: string;
    /**
     * Information about the extracted key in a key-value pair.
     */
    key: KeyValueElementModel;
    /**
     * Information about the extracted value in a key-value pair.
     */
    value: KeyValueElementModel;
    /**
     * Confidence value.
     */
    confidence: number;
}

/**
 * Defines values for Language.
 */
export declare type Language = "en" | "es";

/**
 * Defines values for LengthUnit.
 */
export declare type LengthUnit = "pixel" | "inch";

/**
 * Contains response data for the listCustomModels operation.
 */
export declare type ListCustomModelsResponse = Models & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: Models;
    };
};

/**
 * Options for model listing operation.
 */
export declare type ListModelsOptions = FormRecognizerOperationOptions;

/**
 * Response to the get custom model operation.
 */
export declare interface Model {
    /**
     * Basic custom model information.
     */
    modelInfo: CustomFormModelInfo;
    /**
     * Keys extracted by the custom model.
     */
    keys?: KeysResult;
    /**
     * Custom model training result.
     */
    trainResult?: TrainResult;
}

/**
 * Response to the list custom models operation.
 */
export declare interface Models {
    /**
     * Summary of all trained custom models.
     */
    summary?: ModelsSummary;
    /**
     * Collection of trained custom models.
     */
    modelList?: CustomFormModelInfo[];
    /**
     * Link to the next page of custom models.
     */
    nextLink?: string;
}

/**
 * Summary of all trained custom models.
 */
export declare interface ModelsSummary {
    /**
     * Current count of trained custom models.
     */
    count: number;
    /**
     * Max number of models that can be trained for this account.
     */
    limit: number;
    /**
     * Date and time (UTC) when the summary was last updated.
     */
    lastModified: Date;
}

/**
 * Defines values for ModelStatus.
 */
declare type ModelStatus = "creating" | "ready" | "invalid";
export { ModelStatus as CustomFormModelStatus }
export { ModelStatus }

/**
 * Defines values for OperationStatus.
 */
export declare type OperationStatus = "notStarted" | "running" | "succeeded" | "failed";

/**
 * Represents a point used to defined bounding boxes. The unit is either 'pixel' or 'inch' (See {link @LengthUnit}).
 */
export declare interface Point2D {
    /**
     * x coordinate
     */
    x: number;
    /**
     * y coordinate
     */
    y: number;
}

/**
 * The state of a recognize content operation
 */
export declare type RecognizeContentOperationState = PollOperationState<FormPageArray> & {
    /**
     * A string representing the current status of the operation.
     */
    status: OperationStatus;
};

/**
 * Options for content/layout recognition.
 */
export declare type RecognizeContentOptions = FormRecognizerOperationOptions;

/**
 * Represent recognized form consists of text fields that have semantic meanings.
 */
export declare interface RecognizedForm {
    /**
     * Document type.
     */
    formType: string;
    /**
     * First and last page number where the document is found.
     */
    pageRange: FormPageRange;
    /**
     * Dictionary of named field values.
     */
    fields: Record<string, FormField>;
    /**
     * Texts and tables extracted from a page in the input
     */
    pages: FormPage[];
}

/**
 * Array of {@link RecognizedForm}
 */
export declare interface RecognizedFormArray extends Array<RecognizedForm> {
}

/**
 * The status of a form recognition operation
 */
export declare type RecognizeFormsOperationState = PollOperationState<RecognizedFormArray> & {
    /**
     * A string representing the current status of the operation.
     */
    status: OperationStatus;
};

/**
 * Options for recognition of forms
 */
export declare type RecognizeFormsOptions = FormRecognizerOperationOptions & {
    /**
     * Specifies whether to include text lines and element references in the result
     */
    includeFieldElements?: boolean;
};
export { RestResponse }

/**
 * Report for a custom model training document.
 */
export declare interface TrainingDocumentInfo {
    /**
     * Training document name.
     */
    name: string;
    /**
     * Total number of pages trained.
     */
    pageCount: number;
    /**
     * List of errors.
     */
    errors: FormRecognizerError[];
    /**
     * Status of the training operation.
     */
    status: TrainingStatus;
}

/**
 * Options for training models
 */
export declare type TrainingFileFilter = FormRecognizerOperationOptions & {
    prefix?: string;
    includeSubfolders?: boolean;
};

/**
 * The status of a form training operation
 */
export declare type TrainingOperationState = PollOperationState<CustomFormModelInfo> & {
    /**
     * A string representing the current status of the operation.
     */
    status: ModelStatus;
};

/**
 * Defines values for TrainStatus.
 */
export declare type TrainingStatus = "succeeded" | "partiallySucceeded" | "failed";

/**
 * Custom model training result.
 */
export declare interface TrainResult {
    /**
     * List of the documents used to train the model and any errors reported in each document.
     */
    trainingDocuments: TrainingDocumentInfo[];
    /**
     * List of fields used to train the model and the train operation error reported by each.
     */
    fields?: FormFieldsReport[];
    /**
     * Average accuracy.
     */
    averageModelAccuracy?: number;
    /**
     * Errors returned during the training operation.
     */
    errors?: FormRecognizerError[];
}

export { }
