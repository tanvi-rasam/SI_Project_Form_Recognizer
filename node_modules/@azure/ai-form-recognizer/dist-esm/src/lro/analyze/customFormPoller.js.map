{"version":3,"file":"customFormPoller.js","sourceRoot":"","sources":["../../../../src/lro/analyze/customFormPoller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay, AbortSignalLike } from \"@azure/core-http\";\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { RecognizeFormsOptions } from \"../../formRecognizerClient\";\n\nimport {\n  GeneratedClientAnalyzeWithCustomModelResponse as AnalyzeWithCustomModelResponseModel,\n  OperationStatus\n} from \"../../generated/models\";\nimport { FormContentType } from \"../../common\";\nimport { FormRecognizerRequestBody, RecognizedFormArray } from \"../../models\";\nimport { RecognizeFormResultResponse } from \"../../internalModels\";\nexport { OperationStatus };\n\nexport interface CustomFormPollerOperationOptions {\n  /**\n   * Time between each polling in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * callback to receive events on the progress of download operation.\n   */\n  onProgress?: (state: BeginRecognizeCustomFormPollState) => void;\n  /**\n   * A serialized poller, used to resume an existing operation\n   */\n  resumeFrom?: string;\n}\n\n/**\n * Defines the operations from a analyze client that are needed for the poller\n * to work\n */\nexport type RecognizeCustomFormPollerClient = {\n  // returns a result id to retrieve results\n  beginRecognize: (\n    source: FormRecognizerRequestBody | string,\n    modelId: string,\n    contentType?: FormContentType,\n    analyzeOptions?: RecognizeFormsOptions\n  ) => Promise<AnalyzeWithCustomModelResponseModel>;\n  // retrieves analyze result\n  getRecognizeResult: (\n    resultId: string,\n    options: { abortSignal?: AbortSignalLike }\n  ) => Promise<RecognizeFormResultResponse>;\n};\n\nexport interface BeginRecognizeCustomFormPollState extends PollOperationState<RecognizedFormArray> {\n  readonly client: RecognizeCustomFormPollerClient;\n  source?: FormRecognizerRequestBody | string;\n  contentType?: FormContentType;\n  modelId: string;\n  resultId?: string;\n  status: OperationStatus;\n  readonly analyzeOptions?: RecognizeFormsOptions;\n}\n\nexport interface BeginRecognizeCustomFormPollerOperation\n  extends PollOperation<BeginRecognizeCustomFormPollState, RecognizedFormArray> {}\n\n/**\n * @internal\n */\nexport type BeginRecognizeCustomFormPollerOptions = {\n  client: RecognizeCustomFormPollerClient;\n  source: FormRecognizerRequestBody | string;\n  contentType?: FormContentType;\n  modelId: string;\n  updateIntervalInMs?: number;\n  resultId?: string;\n  onProgress?: (state: BeginRecognizeCustomFormPollState) => void;\n  resumeFrom?: string;\n} & RecognizeFormsOptions;\n\n/**\n * Class that represents a poller that waits until a model has been trained.\n */\nexport class BeginRecognizeCustomFormPoller extends Poller<\n  BeginRecognizeCustomFormPollState,\n  RecognizedFormArray\n> {\n  public updateIntervalInMs: number;\n\n  constructor(options: BeginRecognizeCustomFormPollerOptions) {\n    const {\n      client,\n      source,\n      contentType,\n      updateIntervalInMs = 5000,\n      resultId,\n      modelId,\n      onProgress,\n      resumeFrom\n    } = options;\n\n    let state: BeginRecognizeCustomFormPollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBeginRecognizePollOperation({\n      ...state,\n      client,\n      source,\n      contentType,\n      resultId,\n      modelId,\n      status: \"notStarted\",\n      analyzeOptions: options\n    });\n\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n/**\n * Creates a poll operation given the provided state.\n * @ignore\n */\nfunction makeBeginRecognizePollOperation(\n  state: BeginRecognizeCustomFormPollState\n): BeginRecognizeCustomFormPollerOperation {\n  return {\n    state: { ...state },\n\n    async cancel(_options = {}): Promise<BeginRecognizeCustomFormPollerOperation> {\n      throw new Error(\"Cancel operation is not supported.\");\n    },\n\n    async update(options = {}): Promise<BeginRecognizeCustomFormPollerOperation> {\n      const state = this.state;\n      const { client, source, contentType, analyzeOptions, modelId } = state;\n\n      if (!state.isStarted) {\n        if (!source) {\n          throw new Error(\"Expect a valid 'source'\");\n        }\n\n        state.isStarted = true;\n        const result = await client.beginRecognize(\n          source,\n          modelId,\n          contentType,\n          analyzeOptions || {}\n        );\n        if (!result.operationLocation) {\n          throw new Error(\"Expect a valid 'operationLocation' to retrieve analyze results\");\n        }\n        const lastSlashIndex = result.operationLocation.lastIndexOf(\"/\");\n        state.resultId = result.operationLocation.substring(lastSlashIndex + 1);\n        // source is no longer needed\n        state.source = undefined;\n      }\n\n      const response = await client.getRecognizeResult(state.resultId!, {\n        abortSignal: analyzeOptions?.abortSignal\n      });\n\n      state.status = response.status;\n      if (!state.isCompleted) {\n        if (typeof options.fireProgress === \"function\") {\n          options.fireProgress(state);\n        }\n\n        if (response.status === \"succeeded\") {\n          state.result = response.forms;\n          state.isCompleted = true;\n        } else if (response.status === \"failed\") {\n          const errors = response.errors\n            ?.map((e) => `  code ${e.code}, message: '${e.message}'`)\n            .join(\"\\n\");\n          const message = `Custom form recognition failed using model ${state.modelId}.\nError(s):\n${errors || \"\"}\n`;\n          throw new Error(message);\n        }\n      }\n\n      return makeBeginRecognizePollOperation(state);\n    },\n\n    toString() {\n      return JSON.stringify({ state: this.state }, (key, value) => {\n        if (key === \"client\" || key === \"source\") {\n          return undefined;\n        }\n        return value;\n      });\n    }\n  };\n}\n"]}