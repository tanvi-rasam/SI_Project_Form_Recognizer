{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../../src/lro/copy/poller.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AACzC,OAAO,EAAE,MAAM,EAAqC,MAAM,iBAAiB,CAAC;AAwG5E;;GAEG;AACH,MAAM,OAAO,oBAAqB,SAAQ,MAAoD;IAG5F,YAAY,OAAoC;QAC9C,MAAM,EACJ,MAAM,EACN,kBAAkB,GAAG,IAAI,EACzB,OAAO,EACP,QAAQ,EACR,gBAAgB,EAChB,oBAAoB,EACpB,iBAAiB,EACjB,UAAU,EACV,UAAU,EACX,GAAG,OAAO,CAAC;QAEZ,IAAI,KAA0C,CAAC;QAE/C,IAAI,UAAU,EAAE;YACd,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;SACtC;QAED,MAAM,SAAS,GAAG,+BAA+B,iCAC5C,KAAK,KACR,MAAM;YACN,OAAO;YACP,gBAAgB;YAChB,oBAAoB;YACpB,iBAAiB;YACjB,QAAQ,EACR,MAAM,EAAE,YAAY,EACpB,gBAAgB,EAAE,OAAO,IACzB,CAAC;QAEH,KAAK,CAAC,SAAS,CAAC,CAAC;QAEjB,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE;YACpC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;SAC7B;QAED,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEM,KAAK;QACV,OAAO,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACxC,CAAC;CACF;AACD;;;GAGG;AACH,SAAS,+BAA+B,CACtC,KAA8B;IAE9B,OAAO;QACL,KAAK,oBAAO,KAAK,CAAE;QAEb,MAAM,CAAC,QAAQ,GAAG,EAAE;;gBACxB,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;YACxD,CAAC;SAAA;QAEK,MAAM,CAAC,OAAO,GAAG,EAAE;;gBACvB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACzB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,GAAG,KAAK,CAAC;gBAEvE,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;oBACpB,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;oBACvB,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,cAAc,CACxC,OAAO,EACP,iBAAiB,EACjB,gBAAgB,IAAI,EAAE,CACvB,CAAC;oBACF,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE;wBAC7B,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;qBACnF;oBACD,MAAM,cAAc,GAAG,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;oBACjE,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;iBACzE;gBAED,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,CAAC,QAAS,EAAE;oBACzE,WAAW,EAAE,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,WAAW;iBAC3C,CAAC,CAAC;gBAEH,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;gBAC/B,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;oBACtB,IACE,CAAC,QAAQ,CAAC,MAAM,KAAK,SAAS,IAAI,QAAQ,CAAC,MAAM,KAAK,YAAY,CAAC;wBACnE,OAAO,OAAO,CAAC,YAAY,KAAK,UAAU,EAC1C;wBACA,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;qBAC7B;yBAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,WAAW,EAAE;wBAC1C,KAAK,CAAC,MAAM,GAAG;4BACb,MAAM,EAAE,OAAO;4BACf,iBAAiB,EAAE,QAAQ,CAAC,SAAS;4BACrC,mBAAmB,EAAE,QAAQ,CAAC,YAAY;4BAC1C,OAAO,EAAE,iBAAiB,CAAC,OAAO;yBACnC,CAAC;wBACF,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;qBAC1B;yBAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,QAAQ,EAAE;wBACvC,MAAM,IAAI,KAAK,CAAC,gCAAgC,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC;qBAClF;iBACF;gBAED,OAAO,+BAA+B,CAAC,KAAK,CAAC,CAAC;YAChD,CAAC;SAAA;QAED,QAAQ;YACN,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;gBAC1D,IAAI,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,QAAQ,EAAE;oBACxC,OAAO,SAAS,CAAC;iBAClB;gBACD,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay } from \"@azure/core-http\";\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { CopyModelOptions, GetCopyModelResultOptions } from \"../../formTrainingClient\";\n\nimport {\n  GeneratedClientGetCustomModelCopyResultResponse as GetCustomModelCopyResultResponse,\n  GeneratedClientCopyCustomModelResponse as CopyCustomModelResponseModel,\n  OperationStatus\n} from \"../../generated/models\";\nimport { CopyAuthorization, CustomFormModelInfo } from \"../../models\";\nexport { OperationStatus };\n\nexport interface CopyPollerOperationOptions {\n  /**\n   * Time between each polling in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * callback to receive events on the progress of download operation.\n   */\n  onProgress?: (state: BeginCopyModelPollState) => void;\n  /**\n   * A serialized poller, used to resume an existing operation\n   */\n  resumeFrom?: string;\n}\n\n/**\n * Defines the operations from a training client that are needed for the poller\n * to work\n */\nexport type CopyModelPollerClient = {\n  // returns a result id to retrieve results\n  beginCopyModel: (\n    modelId: string,\n    copyAuthorization: CopyAuthorization,\n    copyModelOptions?: CopyModelOptions\n  ) => Promise<CopyCustomModelResponseModel>;\n  // retrieves copy model result\n  getCopyModelResult: (\n    modelId: string,\n    resultId: string,\n    options: GetCopyModelResultOptions\n  ) => Promise<GetCustomModelCopyResultResponse>;\n};\n\n/**\n * The state used by the poller returned from {@link FormTrainingClient.beginCopyModel}.\n *\n * This state is passed into the user-specified `onProgress` callback\n * whenever copy progress is detected.\n */\nexport interface BeginCopyModelPollState extends PollOperationState<CustomFormModelInfo> {\n  /**\n   * The instance of {@link CopyModelPollerClient} that is used when calling {@link FormTrainingClient.beginCopyModel}.\n   */\n  readonly client: CopyModelPollerClient;\n  /**\n   * Id of the model being copied\n   */\n  modelId: string;\n  /**\n   * Id of the target Form Recognizer resource\n   */\n  targetResourceId: string;\n  /**\n   * Region of the target Form Recognizer resource\n   */\n  targetResourceRegion: string;\n  /**\n   * The copy authorization generated by the target Form Recognizer resource.\n   */\n  copyAuthorization: CopyAuthorization;\n  /**\n   * Id of the copy model operation result.\n   */\n  resultId?: string;\n  /**\n   * Status of the copy model operation.\n   */\n  status: OperationStatus;\n  /**\n   * Option to the copy model operation.\n   */\n  readonly copyModelOptions?: CopyModelOptions;\n}\n\nexport interface BeginCopyModelPollerOperation\n  extends PollOperation<BeginCopyModelPollState, CustomFormModelInfo> {}\n\n/**\n * @internal\n */\nexport type BeginCopyModelPollerOptions = {\n  client: CopyModelPollerClient;\n  modelId: string;\n  targetResourceId: string;\n  targetResourceRegion: string;\n  copyAuthorization: CopyAuthorization;\n  updateIntervalInMs?: number;\n  resultId?: string;\n  onProgress?: (state: BeginCopyModelPollState) => void;\n  resumeFrom?: string;\n} & CopyModelOptions;\n\n/**\n * Class that represents a poller that waits until a model has been trained.\n */\nexport class BeginCopyModelPoller extends Poller<BeginCopyModelPollState, CustomFormModelInfo> {\n  public updateIntervalInMs: number;\n\n  constructor(options: BeginCopyModelPollerOptions) {\n    const {\n      client,\n      updateIntervalInMs = 5000,\n      modelId,\n      resultId,\n      targetResourceId,\n      targetResourceRegion,\n      copyAuthorization,\n      onProgress,\n      resumeFrom\n    } = options;\n\n    let state: BeginCopyModelPollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBeginCopyModelPollOperation({\n      ...state,\n      client,\n      modelId,\n      targetResourceId,\n      targetResourceRegion,\n      copyAuthorization,\n      resultId,\n      status: \"notStarted\",\n      copyModelOptions: options\n    });\n\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n/**\n * Creates a poll operation given the provided state.\n * @ignore\n */\nfunction makeBeginCopyModelPollOperation(\n  state: BeginCopyModelPollState\n): BeginCopyModelPollerOperation {\n  return {\n    state: { ...state },\n\n    async cancel(_options = {}): Promise<BeginCopyModelPollerOperation> {\n      throw new Error(\"Cancel operation is not supported.\");\n    },\n\n    async update(options = {}): Promise<BeginCopyModelPollerOperation> {\n      const state = this.state;\n      const { client, modelId, copyAuthorization, copyModelOptions } = state;\n\n      if (!state.isStarted) {\n        state.isStarted = true;\n        const result = await client.beginCopyModel(\n          modelId,\n          copyAuthorization,\n          copyModelOptions || {}\n        );\n        if (!result.operationLocation) {\n          throw new Error(\"Expect a valid 'operationLocation' to retrieve analyze results\");\n        }\n        const lastSlashIndex = result.operationLocation.lastIndexOf(\"/\");\n        state.resultId = result.operationLocation.substring(lastSlashIndex + 1);\n      }\n\n      const response = await client.getCopyModelResult(modelId, state.resultId!, {\n        abortSignal: copyModelOptions?.abortSignal\n      });\n\n      state.status = response.status;\n      if (!state.isCompleted) {\n        if (\n          (response.status === \"running\" || response.status === \"notStarted\") &&\n          typeof options.fireProgress === \"function\"\n        ) {\n          options.fireProgress(state);\n        } else if (response.status === \"succeeded\") {\n          state.result = {\n            status: \"ready\",\n            trainingStartedOn: response.createdOn,\n            trainingCompletedOn: response.lastModified,\n            modelId: copyAuthorization.modelId\n          };\n          state.isCompleted = true;\n        } else if (response.status === \"failed\") {\n          throw new Error(`Copy model operation failed: ${response._response.bodyAsText}`);\n        }\n      }\n\n      return makeBeginCopyModelPollOperation(state);\n    },\n\n    toString() {\n      return JSON.stringify({ state: this.state }, (key, value) => {\n        if (key === \"client\" || key === \"source\") {\n          return undefined;\n        }\n        return value;\n      });\n    }\n  };\n}\n"]}