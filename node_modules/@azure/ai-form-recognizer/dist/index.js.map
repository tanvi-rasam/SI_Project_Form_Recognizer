{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/logger.ts","../src/tracing.ts","../src/utils/utils.node.ts","../src/common.ts","../src/generated/models/mappers.ts","../src/generated/models/parameters.ts","../src/generated/generatedClientContext.ts","../src/generated/generatedClient.ts","../src/lro/analyze/contentPoller.ts","../src/lro/analyze/customFormPoller.ts","../src/lro/analyze/receiptPoller.ts","../src/transforms.ts","../src/azureKeyCredentialPolicy.ts","../src/formRecognizerClient.ts","../src/lro/train/poller.ts","../src/lro/copy/poller.ts","../src/formTrainingClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const SDK_VERSION: string = \"3.0.0\";\n\nexport const DEFAULT_COGNITIVE_SCOPE = \"https://cognitiveservices.azure.com/.default\";\n\nexport const LIB_INFO = `azsdk-js-ai-formrecognizer/${SDK_VERSION}`;\n\n/**\n * Maximum size of input documents allowed by the Azure Form Recognizer service.\n * @internal\n */\nexport const MAX_INPUT_DOCUMENT_SIZE = 50 * 1024 * 1024; // 50 MB\n\nexport const FormRecognizerLoggingAllowedHeaderNames = [\n  \"apim-request-id\",\n  \"Location\",\n  \"Operation-Location\",\n  \"Strict-Transport-Security\",\n  \"X-Content-Type-Options\",\n  \"x-envoy-upstream-service-time\"\n];\n\nexport const FormRecognizerLoggingAllowedQueryParameters = [\n  \"includeTextDetails\",\n  \"includeKeys\",\n  \"op\"\n];\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The @azure/logger configuration for this package.\n */\nexport const logger = createClientLogger(\"ai-form-recognizer\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getTracer, OperationTracingOptions } from \"@azure/core-tracing\";\nimport { Span, SpanOptions, SpanKind } from \"@opentelemetry/api\";\nimport { OperationOptions } from \"@azure/core-http\";\n\n/**\n * Creates a span using the global tracer.\n * @ignore\n * @param name The name of the operation being performed.\n * @param tracingOptions The options for the underlying http request.\n */\nexport function createSpan<T extends OperationOptions>(\n  operationName: string,\n  operationOptions: T\n): { span: Span; updatedOptions: T } {\n  const tracer = getTracer();\n  const tracingOptions = operationOptions.tracingOptions || {};\n  const spanOptions: SpanOptions = {\n    ...tracingOptions.spanOptions,\n    kind: SpanKind.INTERNAL\n  };\n\n  const span = tracer.startSpan(\n    `Azure.CognitiveServices.FormRecognizer.${operationName}`,\n    spanOptions\n  );\n\n  span.setAttribute(\"az.namespace\", \"Microsoft.CognitiveServices\");\n\n  let newSpanOptions = tracingOptions.spanOptions || {};\n  if (span.isRecording()) {\n    newSpanOptions = {\n      ...tracingOptions.spanOptions,\n      parent: span.context(),\n      attributes: {\n        ...spanOptions.attributes,\n        \"az.namespace\": \"Microsoft.CognitiveServices\"\n      }\n    };\n  }\n\n  const newTracingOptions: OperationTracingOptions = {\n    ...tracingOptions,\n    spanOptions: newSpanOptions\n  };\n\n  const newOperationOptions: T = {\n    ...operationOptions,\n    tracingOptions: newTracingOptions\n  };\n\n  return {\n    span,\n    updatedOptions: newOperationOptions\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst SIZE_ONE_MEGA = 1024 * 1024;\n\n/**\n * Reads a readable stream into buffer entirely. NodeJS only.\n * The maximum allowed size is specified in {@link MAX_INPUT_DOCUMENT_SIZE}.\n *\n * @export\n * @param {NodeJS.ReadableStream} stream A Node.js Readable stream\n * @returns {Promise<Buffer>} The resultant buffer.\n * @throws {Error} If buffer size is not big enough.\n */\nexport async function streamToBuffer(\n  stream: NodeJS.ReadableStream,\n  maxSize: number\n): Promise<Buffer> {\n  let pos = 0; // Position in stream\n  let size = SIZE_ONE_MEGA;\n  let buffer = Buffer.alloc(size);\n\n  return new Promise<Buffer>((resolve, reject) => {\n    stream.on(\"readable\", () => {\n      const chunk = stream.read();\n      if (!chunk) {\n        return;\n      }\n      const nextPos = pos + chunk.length;\n      if (size < nextPos && nextPos <= maxSize) {\n        // Keep doubling buffer until it is large enough or over max size\n        const oldSize = size;\n        while (size < nextPos && size * 2 < maxSize) {\n          size *= 2;\n        }\n\n        if (nextPos < size && size < maxSize) {\n          const newBuffer = Buffer.alloc(size - oldSize);\n          buffer = Buffer.concat([buffer, newBuffer]);\n        } else {\n          const newBuffer = Buffer.alloc(maxSize - oldSize);\n          size = maxSize;\n          buffer = Buffer.concat([buffer, newBuffer]);\n        }\n      } else if (nextPos > maxSize) {\n        reject(new Error(`Input stream exceeds maximum allowed size: ${maxSize}`));\n        return;\n      }\n\n      buffer.fill(chunk, pos, nextPos);\n      pos = nextPos;\n    });\n\n    stream.on(\"end\", () => {\n      resolve(buffer.slice(0, pos));\n    });\n\n    stream.on(\"error\", reject);\n  });\n}\n\nexport function getFirstFourBytesFromBlob(_data: Blob): Promise<Uint8Array> {\n  throw new Error(\"Blob is not supported in NodeJS environment\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineOptions, OperationOptions } from \"@azure/core-http\";\nimport { FormRecognizerRequestBody } from \"./models\";\nimport { SourcePath } from \"./generated/models\";\nimport { getFirstFourBytesFromBlob, streamToBuffer } from \"./utils/utils.node\";\nimport { MAX_INPUT_DOCUMENT_SIZE } from \"./constants\";\n\n/**\n * Content types supported by Form Recognizer service.\n */\nexport type FormContentType = \"application/pdf\" | \"image/jpeg\" | \"image/png\" | \"image/tiff\";\n\n/**\n * Client options used to configure Form Recognizer API requests.\n */\nexport interface FormRecognizerClientOptions extends PipelineOptions {}\n\n/**\n * Options common to all form recognizer operations.\n */\nexport interface FormRecognizerOperationOptions extends OperationOptions {}\n\n/**\n * Translate the content to a format that is understood by Form Recognizer service\n * @internal\n */\nexport async function toRequestBody(\n  body: FormRecognizerRequestBody | string\n): Promise<Blob | ArrayBuffer | ArrayBufferView | SourcePath> {\n  if (typeof body === \"string\") {\n    return {\n      source: body\n    };\n  } else {\n    // cache stream to allow retry\n    if (isReadableStream(body)) {\n      return streamToBuffer(body, MAX_INPUT_DOCUMENT_SIZE);\n    }\n\n    return body;\n  }\n}\n\nfunction isReadableStream(data: FormRecognizerRequestBody): data is NodeJS.ReadableStream {\n  return \"read\" in data && typeof data.read === \"function\";\n}\n\nfunction isBlob(data: FormRecognizerRequestBody): data is Blob {\n  return \"size\" in data && \"type\" in data;\n}\n\nfunction isArrayBuffer(data: FormRecognizerRequestBody): data is ArrayBuffer {\n  return \"byteLength\" in data && \"slice\" in data && typeof data.slice === \"function\";\n}\n\nfunction isArrayBufferView(data: FormRecognizerRequestBody): data is ArrayBufferView {\n  return \"buffer\" in data && \"byteLength\" in data && \"byteOffset\" in data;\n}\n\nfunction isSourcePath(data: FormRecognizerRequestBody | SourcePath): data is SourcePath {\n  return \"source\" in data && typeof data.source === \"string\";\n}\n\n/**\n * Detects the content type of binary data.\n * See https://en.wikipedia.org/wiki/List_of_file_signatures\n * @internal\n */\nexport async function getContentType(\n  data: Blob | ArrayBuffer | ArrayBufferView | SourcePath\n): Promise<FormContentType | undefined> {\n  if (isSourcePath(data)) {\n    return undefined;\n  }\n  let bytes: Uint8Array;\n  if (isArrayBuffer(data)) {\n    // ArrayBuffer\n    if (data.byteLength < 4) {\n      throw new RangeError(\"Invalid input. Expect more than 4 bytes of data\");\n    }\n\n    bytes = new Uint8Array(data, 0, 4);\n  } else if (isArrayBufferView(data)) {\n    // ArrayBufferView\n    if (data.byteLength < 4) {\n      throw new RangeError(\"Invalid input. Expect more than 4 bytes of data\");\n    }\n\n    bytes = new Uint8Array(data.buffer, 0, 4);\n  } else if (isBlob(data)) {\n    // Blob\n    bytes = await getFirstFourBytesFromBlob(data);\n  } else {\n    throw new Error(\"unsupported request body type\");\n  }\n\n  if (bytes[0] === 0x25 && bytes[1] === 0x50 && bytes[2] === 0x44 && bytes[3] === 0x46) {\n    return \"application/pdf\";\n  } else if (bytes[0] === 0xff && bytes[1] === 0xd8) {\n    return \"image/jpeg\";\n  } else if (bytes[0] === 0x89 && bytes[1] === 0x50 && bytes[2] === 0x4e && bytes[3] === 0x47) {\n    return \"image/png\";\n  } else if (\n    (bytes[0] === 0x49 && bytes[1] === 0x49 && bytes[2] === 0x2a && bytes[3] === 0x0) ||\n    (bytes[0] === 0x4d && bytes[1] === 0x4d && bytes[2] === 0x0 && bytes[3] === 0x2a)\n  ) {\n    return \"image/tiff\";\n  } else {\n    throw new RangeError(\"content type could not be detected\");\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const TrainRequest: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TrainRequest\",\n    modelProperties: {\n      source: {\n        constraints: {\n          MaxLength: 2048\n        },\n        serializedName: \"source\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      sourceFilter: {\n        serializedName: \"sourceFilter\",\n        type: {\n          name: \"Composite\",\n          className: \"TrainSourceFilter\"\n        }\n      },\n      useLabelFile: {\n        serializedName: \"useLabelFile\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const TrainSourceFilter: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TrainSourceFilter\",\n    modelProperties: {\n      prefix: {\n        constraints: {\n          MaxLength: 1024\n        },\n        serializedName: \"prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      includeSubfolders: {\n        serializedName: \"includeSubFolders\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponse: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponse\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorInformation\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorInformation: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorInformation\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Model: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Model\",\n    modelProperties: {\n      modelInfo: {\n        serializedName: \"modelInfo\",\n        type: {\n          name: \"Composite\",\n          className: \"ModelInfo\"\n        }\n      },\n      keys: {\n        serializedName: \"keys\",\n        type: {\n          name: \"Composite\",\n          className: \"KeysResult\"\n        }\n      },\n      trainResult: {\n        serializedName: \"trainResult\",\n        type: {\n          name: \"Composite\",\n          className: \"TrainResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const ModelInfo: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ModelInfo\",\n    modelProperties: {\n      modelId: {\n        serializedName: \"modelId\",\n        required: true,\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"creating\", \"ready\", \"invalid\"]\n        }\n      },\n      trainingStartedOn: {\n        serializedName: \"createdDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      trainingCompletedOn: {\n        serializedName: \"lastUpdatedDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeysResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeysResult\",\n    modelProperties: {\n      clusters: {\n        serializedName: \"clusters\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Sequence\", element: { type: { name: \"String\" } } },\n            constraints: { UniqueItems: true }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TrainResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TrainResult\",\n    modelProperties: {\n      trainingDocuments: {\n        serializedName: \"trainingDocuments\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"TrainingDocumentInfo\" }\n          }\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"FormFieldsReport\" }\n          }\n        }\n      },\n      averageModelAccuracy: {\n        serializedName: \"averageModelAccuracy\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"ErrorInformation\" }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TrainingDocumentInfo: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TrainingDocumentInfo\",\n    modelProperties: {\n      name: {\n        serializedName: \"documentName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pageCount: {\n        serializedName: \"pages\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"ErrorInformation\" }\n          }\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"succeeded\", \"partiallySucceeded\", \"failed\"]\n        }\n      }\n    }\n  }\n};\n\nexport const FormFieldsReport: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FormFieldsReport\",\n    modelProperties: {\n      fieldName: {\n        serializedName: \"fieldName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      accuracy: {\n        serializedName: \"accuracy\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SourcePath: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SourcePath\",\n    modelProperties: {\n      source: {\n        constraints: {\n          MaxLength: 2048\n        },\n        serializedName: \"source\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeOperationResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeOperationResult\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"notStarted\", \"running\", \"succeeded\", \"failed\"]\n        }\n      },\n      createdOn: {\n        serializedName: \"createdDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastModified: {\n        serializedName: \"lastUpdatedDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      analyzeResult: {\n        serializedName: \"analyzeResult\",\n        type: {\n          name: \"Composite\",\n          className: \"AnalyzeResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeResult\",\n    modelProperties: {\n      version: {\n        serializedName: \"version\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      readResults: {\n        serializedName: \"readResults\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"ReadResult\" } }\n        }\n      },\n      pageResults: {\n        serializedName: \"pageResults\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"PageResult\" } }\n        }\n      },\n      documentResults: {\n        serializedName: \"documentResults\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"DocumentResult\" } }\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"ErrorInformation\" }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ReadResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ReadResult\",\n    modelProperties: {\n      pageNumber: {\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"page\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      angle: {\n        constraints: {\n          InclusiveMaximum: 180,\n          InclusiveMinimum: -180\n        },\n        serializedName: \"angle\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      width: {\n        constraints: {},\n        serializedName: \"width\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        constraints: {},\n        serializedName: \"height\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      unit: {\n        serializedName: \"unit\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"pixel\", \"inch\"]\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lines: {\n        serializedName: \"lines\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"TextLine\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const TextLine: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextLine\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingBox: {\n        constraints: {\n          MinItems: 8,\n          MaxItems: 8\n        },\n        serializedName: \"boundingBox\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Number\" } }\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      words: {\n        serializedName: \"words\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"TextWord\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const TextWord: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextWord\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingBox: {\n        constraints: {\n          MinItems: 8,\n          MaxItems: 8\n        },\n        serializedName: \"boundingBox\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Number\" } }\n        }\n      },\n      confidence: {\n        constraints: {\n          InclusiveMaximum: 1\n        },\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PageResult\",\n    modelProperties: {\n      pageNumber: {\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"page\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      clusterId: {\n        constraints: {},\n        serializedName: \"clusterId\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      keyValuePairs: {\n        serializedName: \"keyValuePairs\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"KeyValuePair\" } }\n        }\n      },\n      tables: {\n        serializedName: \"tables\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"DataTable\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyValuePair: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyValuePair\",\n    modelProperties: {\n      label: {\n        serializedName: \"label\",\n        type: {\n          name: \"String\"\n        }\n      },\n      key: {\n        serializedName: \"key\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyValueElement\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyValueElement\"\n        }\n      },\n      confidence: {\n        constraints: {\n          InclusiveMaximum: 1\n        },\n        serializedName: \"confidence\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyValueElement: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyValueElement\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingBox: {\n        constraints: {\n          MinItems: 8,\n          MaxItems: 8\n        },\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Number\" } }\n        }\n      },\n      elements: {\n        serializedName: \"elements\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const DataTable: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataTable\",\n    modelProperties: {\n      rows: {\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"rows\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      columns: {\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"columns\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      cells: {\n        serializedName: \"cells\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"DataTableCell\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const DataTableCell: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DataTableCell\",\n    modelProperties: {\n      rowIndex: {\n        constraints: {},\n        serializedName: \"rowIndex\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      columnIndex: {\n        constraints: {},\n        serializedName: \"columnIndex\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      rowSpan: {\n        defaultValue: 1,\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"rowSpan\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      columnSpan: {\n        defaultValue: 1,\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"columnSpan\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingBox: {\n        constraints: {\n          MinItems: 8,\n          MaxItems: 8\n        },\n        serializedName: \"boundingBox\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Number\" } }\n        }\n      },\n      confidence: {\n        constraints: {\n          InclusiveMaximum: 1\n        },\n        serializedName: \"confidence\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      elements: {\n        serializedName: \"elements\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"String\" } }\n        }\n      },\n      isHeader: {\n        serializedName: \"isHeader\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      isFooter: {\n        serializedName: \"isFooter\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentResult\",\n    modelProperties: {\n      docType: {\n        serializedName: \"docType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pageRange: {\n        constraints: {\n          MinItems: 2,\n          MaxItems: 2\n        },\n        serializedName: \"pageRange\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Number\" },\n            constraints: { InclusiveMinimum: 1 }\n          }\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"Composite\", className: \"FieldValue\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const FieldValue: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FieldValue\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"string\",\n            \"date\",\n            \"time\",\n            \"phoneNumber\",\n            \"number\",\n            \"integer\",\n            \"array\",\n            \"object\"\n          ]\n        }\n      },\n      valueString: {\n        serializedName: \"valueString\",\n        type: {\n          name: \"String\"\n        }\n      },\n      valueDate: {\n        serializedName: \"valueDate\",\n        type: {\n          name: \"Date\"\n        }\n      },\n      valueTime: {\n        serializedName: \"valueTime\",\n        type: {\n          name: \"String\"\n        }\n      },\n      valuePhoneNumber: {\n        serializedName: \"valuePhoneNumber\",\n        type: {\n          name: \"String\"\n        }\n      },\n      valueNumber: {\n        serializedName: \"valueNumber\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      valueInteger: {\n        serializedName: \"valueInteger\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      valueArray: {\n        serializedName: \"valueArray\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"FieldValue\" } }\n        }\n      },\n      valueObject: {\n        serializedName: \"valueObject\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"Composite\", className: \"FieldValue\" } }\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingBox: {\n        constraints: {\n          MinItems: 8,\n          MaxItems: 8\n        },\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Number\" } }\n        }\n      },\n      confidence: {\n        constraints: {\n          InclusiveMaximum: 1\n        },\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      elements: {\n        serializedName: \"elements\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"String\" } }\n        }\n      },\n      pageNumber: {\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"page\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CopyRequest: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CopyRequest\",\n    modelProperties: {\n      targetResourceId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.CognitiveServices/accounts/[^/]*$\"\n          ),\n          MaxLength: 1024\n        },\n        serializedName: \"targetResourceId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      targetResourceRegion: {\n        constraints: {\n          Pattern: new RegExp(\"^[a-z0-9]+$\"),\n          MaxLength: 24,\n          MinLength: 1\n        },\n        serializedName: \"targetResourceRegion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      copyAuthorization: {\n        serializedName: \"copyAuthorization\",\n        type: {\n          name: \"Composite\",\n          className: \"CopyAuthorizationResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const CopyAuthorizationResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CopyAuthorizationResult\",\n    modelProperties: {\n      modelId: {\n        serializedName: \"modelId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      accessToken: {\n        serializedName: \"accessToken\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      expirationDateTimeTicks: {\n        serializedName: \"expirationDateTimeTicks\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CopyOperationResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CopyOperationResult\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"notStarted\", \"running\", \"succeeded\", \"failed\"]\n        }\n      },\n      createdOn: {\n        serializedName: \"createdDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastModified: {\n        serializedName: \"lastUpdatedDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      copyResult: {\n        serializedName: \"copyResult\",\n        type: {\n          name: \"Composite\",\n          className: \"CopyResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const CopyResult: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CopyResult\",\n    modelProperties: {\n      modelId: {\n        serializedName: \"modelId\",\n        required: true,\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"ErrorInformation\" }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Models: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Models\",\n    modelProperties: {\n      summary: {\n        serializedName: \"summary\",\n        type: {\n          name: \"Composite\",\n          className: \"ModelsSummary\"\n        }\n      },\n      modelList: {\n        serializedName: \"modelList\",\n        type: {\n          name: \"Sequence\",\n          element: { type: { name: \"Composite\", className: \"ModelInfo\" } }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ModelsSummary: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ModelsSummary\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      limit: {\n        serializedName: \"limit\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      lastModified: {\n        serializedName: \"lastUpdatedDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientTrainCustomModelAsyncHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientTrainCustomModelAsyncHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientAnalyzeWithCustomModelHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientAnalyzeWithCustomModelHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientCopyCustomModelHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientCopyCustomModelHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientGenerateModelCopyAuthorizationHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientGenerateModelCopyAuthorizationHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientAnalyzeReceiptAsyncHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientAnalyzeReceiptAsyncHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientAnalyzeLayoutAsyncHeaders: coreHttp.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientAnalyzeLayoutAsyncHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-http\";\nimport {\n  TrainRequest as TrainRequestMapper,\n  SourcePath as SourcePathMapper,\n  CopyRequest as CopyRequestMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const trainRequest: OperationParameter = {\n  parameterPath: \"trainRequest\",\n  mapper: TrainRequestMapper\n};\n\nexport const endpoint: OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    serializedName: \"endpoint\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const modelId: OperationURLParameter = {\n  parameterPath: \"modelId\",\n  mapper: {\n    serializedName: \"modelId\",\n    required: true,\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\n\nexport const includeKeys: OperationQueryParameter = {\n  parameterPath: [\"options\", \"includeKeys\"],\n  mapper: {\n    serializedName: \"includeKeys\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const contentType1: OperationParameter = {\n  parameterPath: \"contentType\",\n  mapper: {\n    serializedName: \"Content-Type\",\n    required: true,\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"application/pdf\",\n        \"image/jpeg\",\n        \"image/png\",\n        \"image/tiff\"\n      ]\n    }\n  }\n};\n\nexport const fileStream: OperationParameter = {\n  parameterPath: \"fileStream\",\n  mapper: {\n    serializedName: \"fileStream\",\n    required: true,\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\n\nexport const contentType2: OperationParameter = {\n  parameterPath: \"contentType\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const fileStream1: OperationParameter = {\n  parameterPath: [\"options\", \"fileStream\"],\n  mapper: SourcePathMapper\n};\n\nexport const includeTextDetails: OperationQueryParameter = {\n  parameterPath: [\"options\", \"includeTextDetails\"],\n  mapper: {\n    serializedName: \"includeTextDetails\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const resultId: OperationURLParameter = {\n  parameterPath: \"resultId\",\n  mapper: {\n    serializedName: \"resultId\",\n    required: true,\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\n\nexport const copyRequest: OperationParameter = {\n  parameterPath: \"copyRequest\",\n  mapper: CopyRequestMapper\n};\n\nexport const op: OperationQueryParameter = {\n  parameterPath: \"op\",\n  mapper: {\n    defaultValue: \"full\",\n    isConstant: true,\n    serializedName: \"op\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const op1: OperationQueryParameter = {\n  parameterPath: \"op\",\n  mapper: {\n    defaultValue: \"summary\",\n    isConstant: true,\n    serializedName: \"op\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const nextLink: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport { GeneratedClientOptionalParams } from \"./models\";\n\nconst packageName = \"@azure/ai-form-recognizer\";\nconst packageVersion = \"3.0.0\";\n\nexport class GeneratedClientContext extends coreHttp.ServiceClient {\n  endpoint: string;\n\n  /**\n   * Initializes a new instance of the GeneratedClientContext class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   *                 https://westus2.api.cognitive.microsoft.com).\n   * @param options The parameter options\n   */\n  constructor(endpoint: string, options?: GeneratedClientOptionalParams) {\n    if (endpoint === undefined) {\n      throw new Error(\"'endpoint' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.requestContentType = \"application/json; charset=utf-8\";\n\n    this.baseUri = options.endpoint || \"{endpoint}/formrecognizer/v2.0\";\n\n    // Parameter assignments\n    this.endpoint = endpoint;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport { GeneratedClientContext } from \"./generatedClientContext\";\nimport {\n  GeneratedClientOptionalParams,\n  TrainRequest,\n  GeneratedClientTrainCustomModelAsyncResponse,\n  GeneratedClientGetCustomModelOptionalParams,\n  GeneratedClientGetCustomModelResponse,\n  ContentType,\n  GeneratedClientAnalyzeWithCustomModel$binaryOptionalParams,\n  GeneratedClientAnalyzeWithCustomModel$jsonOptionalParams,\n  GeneratedClientAnalyzeWithCustomModelResponse,\n  GeneratedClientGetAnalyzeFormResultResponse,\n  CopyRequest,\n  GeneratedClientCopyCustomModelResponse,\n  GeneratedClientGetCustomModelCopyResultResponse,\n  GeneratedClientGenerateModelCopyAuthorizationResponse,\n  GeneratedClientAnalyzeReceiptAsync$binaryOptionalParams,\n  GeneratedClientAnalyzeReceiptAsync$jsonOptionalParams,\n  GeneratedClientAnalyzeReceiptAsyncResponse,\n  GeneratedClientGetAnalyzeReceiptResultResponse,\n  GeneratedClientAnalyzeLayoutAsync$binaryOptionalParams,\n  GeneratedClientAnalyzeLayoutAsync$jsonOptionalParams,\n  GeneratedClientAnalyzeLayoutAsyncResponse,\n  GeneratedClientGetAnalyzeLayoutResultResponse,\n  GeneratedClientListCustomModelsResponse,\n  GeneratedClientGetCustomModelsResponse,\n  GeneratedClientListCustomModelsNextResponse\n} from \"./models\";\n\nclass GeneratedClient extends GeneratedClientContext {\n  /**\n   * Initializes a new instance of the GeneratedClient class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   *                 https://westus2.api.cognitive.microsoft.com).\n   * @param options The parameter options\n   */\n  constructor(endpoint: string, options?: GeneratedClientOptionalParams) {\n    super(endpoint, options);\n  }\n\n  /**\n   * Create and train a custom model. The request must include a source parameter that is either an\n   * externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or\n   * valid path to a data folder in a locally mounted drive. When local paths are specified, they must\n   * follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration\n   * setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source\n   * path would be '/input/contosodataset'. All data to be trained is expected to be under the source\n   * folder or sub folders under it. Models are trained using documents that are of the following content\n   * type - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff'. Other type of content is ignored.\n   * @param trainRequest Training request parameters.\n   * @param options The options parameters.\n   */\n  trainCustomModelAsync(\n    trainRequest: TrainRequest,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientTrainCustomModelAsyncResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { trainRequest, options: operationOptions },\n      trainCustomModelAsyncOperationSpec\n    ) as Promise<GeneratedClientTrainCustomModelAsyncResponse>;\n  }\n\n  /**\n   * Get detailed information about a custom model.\n   * @param modelId Model identifier.\n   * @param options The options parameters.\n   */\n  getCustomModel(\n    modelId: string,\n    options?: GeneratedClientGetCustomModelOptionalParams\n  ): Promise<GeneratedClientGetCustomModelResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { modelId, options: operationOptions },\n      getCustomModelOperationSpec\n    ) as Promise<GeneratedClientGetCustomModelResponse>;\n  }\n\n  /**\n   * Mark model for deletion. Model artifacts will be permanently removed within a predetermined period.\n   * @param modelId Model identifier.\n   * @param options The options parameters.\n   */\n  deleteCustomModel(\n    modelId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { modelId, options: operationOptions },\n      deleteCustomModelOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Extract key-value pairs, tables, and semantic values from a given document. The input document must\n   * be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or\n   * 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path)\n   * of the document to be analyzed.\n   * @param modelId Model identifier.\n   * @param contentType Upload file type\n   * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.\n   * @param options The options parameters.\n   */\n  analyzeWithCustomModel(\n    modelId: string,\n    contentType: ContentType,\n    fileStream: coreHttp.HttpRequestBody,\n    options?: GeneratedClientAnalyzeWithCustomModel$binaryOptionalParams\n  ): Promise<GeneratedClientAnalyzeWithCustomModelResponse>;\n  /**\n   * Extract key-value pairs, tables, and semantic values from a given document. The input document must\n   * be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or\n   * 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path)\n   * of the document to be analyzed.\n   * @param modelId Model identifier.\n   * @param contentType Body Parameter content-type\n   * @param options The options parameters.\n   */\n  analyzeWithCustomModel(\n    modelId: string,\n    contentType: \"application/json\",\n    options?: GeneratedClientAnalyzeWithCustomModel$jsonOptionalParams\n  ): Promise<GeneratedClientAnalyzeWithCustomModelResponse>;\n  /**\n   * Extract key-value pairs, tables, and semantic values from a given document. The input document must\n   * be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or\n   * 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path)\n   * of the document to be analyzed.\n   * @param args Includes all the parameters for this operation.\n   */\n  analyzeWithCustomModel(\n    ...args:\n      | [\n          string,\n          ContentType,\n          coreHttp.HttpRequestBody,\n          GeneratedClientAnalyzeWithCustomModel$binaryOptionalParams?\n        ]\n      | [\n          string,\n          \"application/json\",\n          GeneratedClientAnalyzeWithCustomModel$jsonOptionalParams?\n        ]\n  ): Promise<GeneratedClientAnalyzeWithCustomModelResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (\n      args[1] === \"application/pdf\" ||\n      args[1] === \"image/jpeg\" ||\n      args[1] === \"image/png\" ||\n      args[1] === \"image/tiff\"\n    ) {\n      operationSpec = analyzeWithCustomModel$binaryOperationSpec;\n      operationArguments = {\n        modelId: args[0],\n        contentType: args[1],\n        fileStream: args[2],\n        options: args[3]\n      };\n    } else if (args[1] === \"application/json\") {\n      operationSpec = analyzeWithCustomModel$jsonOperationSpec;\n      operationArguments = {\n        modelId: args[0],\n        contentType: args[1],\n        options: args[2]\n      };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[1]}\".`\n      );\n    }\n    return this.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<GeneratedClientAnalyzeWithCustomModelResponse>;\n  }\n\n  /**\n   * Obtain current status and the result of the analyze form operation.\n   * @param modelId Model identifier.\n   * @param resultId Analyze operation result identifier.\n   * @param options The options parameters.\n   */\n  getAnalyzeFormResult(\n    modelId: string,\n    resultId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetAnalyzeFormResultResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { modelId, resultId, options: operationOptions },\n      getAnalyzeFormResultOperationSpec\n    ) as Promise<GeneratedClientGetAnalyzeFormResultResponse>;\n  }\n\n  /**\n   * Copy custom model stored in this resource (the source) to user specified target Form Recognizer\n   * resource.\n   * @param modelId Model identifier.\n   * @param copyRequest Copy request parameters.\n   * @param options The options parameters.\n   */\n  copyCustomModel(\n    modelId: string,\n    copyRequest: CopyRequest,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientCopyCustomModelResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { modelId, copyRequest, options: operationOptions },\n      copyCustomModelOperationSpec\n    ) as Promise<GeneratedClientCopyCustomModelResponse>;\n  }\n\n  /**\n   * Obtain current status and the result of a custom model copy operation.\n   * @param modelId Model identifier.\n   * @param resultId Copy operation result identifier.\n   * @param options The options parameters.\n   */\n  getCustomModelCopyResult(\n    modelId: string,\n    resultId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetCustomModelCopyResultResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { modelId, resultId, options: operationOptions },\n      getCustomModelCopyResultOperationSpec\n    ) as Promise<GeneratedClientGetCustomModelCopyResultResponse>;\n  }\n\n  /**\n   * Generate authorization to copy a model into the target Form Recognizer resource.\n   * @param options The options parameters.\n   */\n  generateModelCopyAuthorization(\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGenerateModelCopyAuthorizationResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { options: operationOptions },\n      generateModelCopyAuthorizationOperationSpec\n    ) as Promise<GeneratedClientGenerateModelCopyAuthorizationResponse>;\n  }\n\n  /**\n   * Extract field text and semantic values from a given receipt document. The input document must be of\n   * one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'.\n   * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the\n   * document to be analyzed.\n   * @param contentType Upload file type\n   * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.\n   * @param options The options parameters.\n   */\n  analyzeReceiptAsync(\n    contentType: ContentType,\n    fileStream: coreHttp.HttpRequestBody,\n    options?: GeneratedClientAnalyzeReceiptAsync$binaryOptionalParams\n  ): Promise<GeneratedClientAnalyzeReceiptAsyncResponse>;\n  /**\n   * Extract field text and semantic values from a given receipt document. The input document must be of\n   * one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'.\n   * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the\n   * document to be analyzed.\n   * @param contentType Body Parameter content-type\n   * @param options The options parameters.\n   */\n  analyzeReceiptAsync(\n    contentType: \"application/json\",\n    options?: GeneratedClientAnalyzeReceiptAsync$jsonOptionalParams\n  ): Promise<GeneratedClientAnalyzeReceiptAsyncResponse>;\n  /**\n   * Extract field text and semantic values from a given receipt document. The input document must be of\n   * one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'.\n   * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the\n   * document to be analyzed.\n   * @param args Includes all the parameters for this operation.\n   */\n  analyzeReceiptAsync(\n    ...args:\n      | [\n          ContentType,\n          coreHttp.HttpRequestBody,\n          GeneratedClientAnalyzeReceiptAsync$binaryOptionalParams?\n        ]\n      | [\n          \"application/json\",\n          GeneratedClientAnalyzeReceiptAsync$jsonOptionalParams?\n        ]\n  ): Promise<GeneratedClientAnalyzeReceiptAsyncResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (\n      args[0] === \"application/pdf\" ||\n      args[0] === \"image/jpeg\" ||\n      args[0] === \"image/png\" ||\n      args[0] === \"image/tiff\"\n    ) {\n      operationSpec = analyzeReceiptAsync$binaryOperationSpec;\n      operationArguments = {\n        contentType: args[0],\n        fileStream: args[1],\n        options: args[2]\n      };\n    } else if (args[0] === \"application/json\") {\n      operationSpec = analyzeReceiptAsync$jsonOperationSpec;\n      operationArguments = {\n        contentType: args[0],\n        options: args[1]\n      };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[0]}\".`\n      );\n    }\n    return this.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<GeneratedClientAnalyzeReceiptAsyncResponse>;\n  }\n\n  /**\n   * Track the progress and obtain the result of the analyze receipt operation.\n   * @param resultId Analyze operation result identifier.\n   * @param options The options parameters.\n   */\n  getAnalyzeReceiptResult(\n    resultId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetAnalyzeReceiptResultResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { resultId, options: operationOptions },\n      getAnalyzeReceiptResultOperationSpec\n    ) as Promise<GeneratedClientGetAnalyzeReceiptResultResponse>;\n  }\n\n  /**\n   * Extract text and layout information from a given document. The input document must be of one of the\n   * supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'.\n   * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the\n   * document to be analyzed.\n   * @param contentType Upload file type\n   * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.\n   * @param options The options parameters.\n   */\n  analyzeLayoutAsync(\n    contentType: ContentType,\n    fileStream: coreHttp.HttpRequestBody,\n    options?: GeneratedClientAnalyzeLayoutAsync$binaryOptionalParams\n  ): Promise<GeneratedClientAnalyzeLayoutAsyncResponse>;\n  /**\n   * Extract text and layout information from a given document. The input document must be of one of the\n   * supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'.\n   * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the\n   * document to be analyzed.\n   * @param contentType Body Parameter content-type\n   * @param options The options parameters.\n   */\n  analyzeLayoutAsync(\n    contentType: \"application/json\",\n    options?: GeneratedClientAnalyzeLayoutAsync$jsonOptionalParams\n  ): Promise<GeneratedClientAnalyzeLayoutAsyncResponse>;\n  /**\n   * Extract text and layout information from a given document. The input document must be of one of the\n   * supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'.\n   * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the\n   * document to be analyzed.\n   * @param args Includes all the parameters for this operation.\n   */\n  analyzeLayoutAsync(\n    ...args:\n      | [\n          ContentType,\n          coreHttp.HttpRequestBody,\n          GeneratedClientAnalyzeLayoutAsync$binaryOptionalParams?\n        ]\n      | [\n          \"application/json\",\n          GeneratedClientAnalyzeLayoutAsync$jsonOptionalParams?\n        ]\n  ): Promise<GeneratedClientAnalyzeLayoutAsyncResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (\n      args[0] === \"application/pdf\" ||\n      args[0] === \"image/jpeg\" ||\n      args[0] === \"image/png\" ||\n      args[0] === \"image/tiff\"\n    ) {\n      operationSpec = analyzeLayoutAsync$binaryOperationSpec;\n      operationArguments = {\n        contentType: args[0],\n        fileStream: args[1],\n        options: args[2]\n      };\n    } else if (args[0] === \"application/json\") {\n      operationSpec = analyzeLayoutAsync$jsonOperationSpec;\n      operationArguments = {\n        contentType: args[0],\n        options: args[1]\n      };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[0]}\".`\n      );\n    }\n    return this.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<GeneratedClientAnalyzeLayoutAsyncResponse>;\n  }\n\n  /**\n   * Track the progress and obtain the result of the analyze layout operation\n   * @param resultId Analyze operation result identifier.\n   * @param options The options parameters.\n   */\n  getAnalyzeLayoutResult(\n    resultId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetAnalyzeLayoutResultResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { resultId, options: operationOptions },\n      getAnalyzeLayoutResultOperationSpec\n    ) as Promise<GeneratedClientGetAnalyzeLayoutResultResponse>;\n  }\n\n  /**\n   * Get information about all custom models\n   * @param options The options parameters.\n   */\n  listCustomModels(\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientListCustomModelsResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { options: operationOptions },\n      listCustomModelsOperationSpec\n    ) as Promise<GeneratedClientListCustomModelsResponse>;\n  }\n\n  /**\n   * Get information about all custom models\n   * @param options The options parameters.\n   */\n  getCustomModels(\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetCustomModelsResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { options: operationOptions },\n      getCustomModelsOperationSpec\n    ) as Promise<GeneratedClientGetCustomModelsResponse>;\n  }\n\n  /**\n   * ListCustomModelsNext\n   * @param nextLink The nextLink from the previous successful call to the ListCustomModels method.\n   * @param options The options parameters.\n   */\n  listCustomModelsNext(\n    nextLink: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientListCustomModelsNextResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.sendOperationRequest(\n      { nextLink, options: operationOptions },\n      listCustomModelsNextOperationSpec\n    ) as Promise<GeneratedClientListCustomModelsNextResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst trainCustomModelAsyncOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      headersMapper: Mappers.GeneratedClientTrainCustomModelAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.trainRequest,\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getCustomModelOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Model\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.includeKeys],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  serializer\n};\nconst deleteCustomModelOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  serializer\n};\nconst analyzeWithCustomModel$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeWithCustomModelHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream,\n  queryParameters: [Parameters.includeTextDetails],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.contentType1],\n  mediaType: \"binary\",\n  serializer\n};\nconst analyzeWithCustomModel$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeWithCustomModelHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream1,\n  queryParameters: [Parameters.includeTextDetails],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst getAnalyzeFormResultOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}/analyzeResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.modelId, Parameters.resultId],\n  serializer\n};\nconst copyCustomModelOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}/copy\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientCopyCustomModelHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.copyRequest,\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getCustomModelCopyResultOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}/copyResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CopyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.modelId, Parameters.resultId],\n  serializer\n};\nconst generateModelCopyAuthorizationOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/copyAuthorization\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.CopyAuthorizationResult,\n      headersMapper:\n        Mappers.GeneratedClientGenerateModelCopyAuthorizationHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint],\n  serializer\n};\nconst analyzeReceiptAsync$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/receipt/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeReceiptAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream,\n  queryParameters: [Parameters.includeTextDetails],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType1],\n  mediaType: \"binary\",\n  serializer\n};\nconst analyzeReceiptAsync$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/receipt/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeReceiptAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream1,\n  queryParameters: [Parameters.includeTextDetails],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst getAnalyzeReceiptResultOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/receipt/analyzeResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.resultId],\n  serializer\n};\nconst analyzeLayoutAsync$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/layout/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeLayoutAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream,\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType1],\n  mediaType: \"binary\",\n  serializer\n};\nconst analyzeLayoutAsync$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/layout/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeLayoutAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream1,\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst getAnalyzeLayoutResultOperationSpec: coreHttp.OperationSpec = {\n  path: \"/layout/analyzeResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.resultId],\n  serializer\n};\nconst listCustomModelsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Models\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.op],\n  urlParameters: [Parameters.endpoint],\n  serializer\n};\nconst getCustomModelsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Models\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.op1],\n  urlParameters: [Parameters.endpoint],\n  serializer\n};\nconst listCustomModelsNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Models\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.op],\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  serializer\n};\n\n// Operation Specifications\n\nexport {\n  GeneratedClient,\n  GeneratedClientContext,\n  Models as GeneratedModels,\n  Mappers as GeneratedMappers\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay, AbortSignalLike } from \"@azure/core-http\";\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { RecognizeContentOptions } from \"../../formRecognizerClient\";\nimport { FormContentType } from \"../../common\";\n\nimport {\n  GeneratedClientAnalyzeLayoutAsyncResponse as AnalyzeLayoutAsyncResponseModel,\n  OperationStatus\n} from \"../../generated/models\";\nimport { FormRecognizerRequestBody, FormPageArray } from \"../../models\";\nimport { RecognizeContentResultResponse } from \"../../internalModels\";\nexport { OperationStatus };\n\nexport interface ContentPollerOperationOptions {\n  /**\n   * Time between each polling in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * callback to receive events on the progress of download operation.\n   */\n  onProgress?: (state: BeginRecognizeContentPollState) => void;\n  /**\n   * A serialized poller, used to resume an existing operation\n   */\n  resumeFrom?: string;\n}\n\n/**\n * Defines the operations from a analyze client that are needed for the poller\n * to work\n */\nexport type RecognizeContentPollerClient = {\n  // returns a result id to retrieve results\n  beginRecognize: (\n    source: FormRecognizerRequestBody | string,\n    contentType?: FormContentType,\n    analyzeOptions?: RecognizeContentOptions\n  ) => Promise<AnalyzeLayoutAsyncResponseModel>;\n  // retrieves analyze result\n  getRecognizeResult: (\n    resultId: string,\n    options: { abortSignal?: AbortSignalLike }\n  ) => Promise<RecognizeContentResultResponse>;\n};\n\nexport interface BeginRecognizeContentPollState extends PollOperationState<FormPageArray> {\n  readonly client: RecognizeContentPollerClient;\n  source?: FormRecognizerRequestBody | string;\n  contentType?: FormContentType;\n  resultId?: string;\n  status: OperationStatus;\n  readonly analyzeOptions?: RecognizeContentOptions;\n}\n\nexport interface BeginRecognizeContentPollerOperation\n  extends PollOperation<BeginRecognizeContentPollState, FormPageArray> {}\n\n/**\n * @internal\n */\nexport type BeginRecognizeContentPollerOptions = {\n  client: RecognizeContentPollerClient;\n  source: FormRecognizerRequestBody | string;\n  contentType?: FormContentType;\n  updateIntervalInMs?: number;\n  resultId?: string;\n  onProgress?: (state: BeginRecognizeContentPollState) => void;\n  resumeFrom?: string;\n} & RecognizeContentOptions;\n\n/**\n * Class that represents a poller that waits until a model has been trained.\n */\nexport class BeginRecognizeContentPoller extends Poller<\n  BeginRecognizeContentPollState,\n  FormPageArray\n> {\n  public updateIntervalInMs: number;\n\n  constructor(options: BeginRecognizeContentPollerOptions) {\n    const {\n      client,\n      source,\n      contentType,\n      updateIntervalInMs = 5000,\n      resultId,\n      onProgress,\n      resumeFrom\n    } = options;\n\n    let state: BeginRecognizeContentPollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBeginRecognizePollOperation({\n      ...state,\n      client,\n      source,\n      contentType,\n      resultId,\n      status: \"notStarted\",\n      analyzeOptions: options\n    });\n\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n/**\n * Creates a poll operation given the provided state.\n * @ignore\n */\nfunction makeBeginRecognizePollOperation(\n  state: BeginRecognizeContentPollState\n): BeginRecognizeContentPollerOperation {\n  return {\n    state: { ...state },\n\n    async cancel(_options = {}): Promise<BeginRecognizeContentPollerOperation> {\n      throw new Error(\"Cancel operation is not supported.\");\n    },\n\n    async update(options = {}): Promise<BeginRecognizeContentPollerOperation> {\n      const state = this.state;\n      const { client, source, contentType, analyzeOptions } = state;\n\n      if (!state.isStarted) {\n        if (!source) {\n          throw new Error(\"Expect a valid 'source'\");\n        }\n\n        state.isStarted = true;\n        const result = await client.beginRecognize(source, contentType, analyzeOptions || {});\n        if (!result.operationLocation) {\n          throw new Error(\"Expect a valid 'operationLocation' to retrieve analyze results\");\n        }\n        const lastSlashIndex = result.operationLocation.lastIndexOf(\"/\");\n        state.resultId = result.operationLocation.substring(lastSlashIndex + 1);\n        // source is no longer needed\n        state.source = undefined;\n      }\n\n      const response = await client.getRecognizeResult(state.resultId!, {\n        abortSignal: analyzeOptions?.abortSignal\n      });\n\n      state.status = response.status;\n      if (!state.isCompleted) {\n        if (typeof options.fireProgress === \"function\") {\n          options.fireProgress(state);\n        }\n\n        if (response.status === \"succeeded\") {\n          state.result = response.pages;\n          state.isCompleted = true;\n        } else if (response.status === \"failed\") {\n          const errors = response.errors\n            ?.map((e) => `  code ${e.code}, message: '${e.message}'`)\n            .join(\"\\n\");\n          const message = `Content recognition failed.\nError(s):\n${errors || \"\"}\n`;\n          throw new Error(message);\n        }\n      }\n\n      return makeBeginRecognizePollOperation(state);\n    },\n\n    toString() {\n      return JSON.stringify({ state: this.state }, (key, value) => {\n        if (key === \"client\" || key === \"source\") {\n          return undefined;\n        }\n        return value;\n      });\n    }\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay, AbortSignalLike } from \"@azure/core-http\";\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { RecognizeFormsOptions } from \"../../formRecognizerClient\";\n\nimport {\n  GeneratedClientAnalyzeWithCustomModelResponse as AnalyzeWithCustomModelResponseModel,\n  OperationStatus\n} from \"../../generated/models\";\nimport { FormContentType } from \"../../common\";\nimport { FormRecognizerRequestBody, RecognizedFormArray } from \"../../models\";\nimport { RecognizeFormResultResponse } from \"../../internalModels\";\nexport { OperationStatus };\n\nexport interface CustomFormPollerOperationOptions {\n  /**\n   * Time between each polling in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * callback to receive events on the progress of download operation.\n   */\n  onProgress?: (state: BeginRecognizeCustomFormPollState) => void;\n  /**\n   * A serialized poller, used to resume an existing operation\n   */\n  resumeFrom?: string;\n}\n\n/**\n * Defines the operations from a analyze client that are needed for the poller\n * to work\n */\nexport type RecognizeCustomFormPollerClient = {\n  // returns a result id to retrieve results\n  beginRecognize: (\n    source: FormRecognizerRequestBody | string,\n    modelId: string,\n    contentType?: FormContentType,\n    analyzeOptions?: RecognizeFormsOptions\n  ) => Promise<AnalyzeWithCustomModelResponseModel>;\n  // retrieves analyze result\n  getRecognizeResult: (\n    resultId: string,\n    options: { abortSignal?: AbortSignalLike }\n  ) => Promise<RecognizeFormResultResponse>;\n};\n\nexport interface BeginRecognizeCustomFormPollState extends PollOperationState<RecognizedFormArray> {\n  readonly client: RecognizeCustomFormPollerClient;\n  source?: FormRecognizerRequestBody | string;\n  contentType?: FormContentType;\n  modelId: string;\n  resultId?: string;\n  status: OperationStatus;\n  readonly analyzeOptions?: RecognizeFormsOptions;\n}\n\nexport interface BeginRecognizeCustomFormPollerOperation\n  extends PollOperation<BeginRecognizeCustomFormPollState, RecognizedFormArray> {}\n\n/**\n * @internal\n */\nexport type BeginRecognizeCustomFormPollerOptions = {\n  client: RecognizeCustomFormPollerClient;\n  source: FormRecognizerRequestBody | string;\n  contentType?: FormContentType;\n  modelId: string;\n  updateIntervalInMs?: number;\n  resultId?: string;\n  onProgress?: (state: BeginRecognizeCustomFormPollState) => void;\n  resumeFrom?: string;\n} & RecognizeFormsOptions;\n\n/**\n * Class that represents a poller that waits until a model has been trained.\n */\nexport class BeginRecognizeCustomFormPoller extends Poller<\n  BeginRecognizeCustomFormPollState,\n  RecognizedFormArray\n> {\n  public updateIntervalInMs: number;\n\n  constructor(options: BeginRecognizeCustomFormPollerOptions) {\n    const {\n      client,\n      source,\n      contentType,\n      updateIntervalInMs = 5000,\n      resultId,\n      modelId,\n      onProgress,\n      resumeFrom\n    } = options;\n\n    let state: BeginRecognizeCustomFormPollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBeginRecognizePollOperation({\n      ...state,\n      client,\n      source,\n      contentType,\n      resultId,\n      modelId,\n      status: \"notStarted\",\n      analyzeOptions: options\n    });\n\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n/**\n * Creates a poll operation given the provided state.\n * @ignore\n */\nfunction makeBeginRecognizePollOperation(\n  state: BeginRecognizeCustomFormPollState\n): BeginRecognizeCustomFormPollerOperation {\n  return {\n    state: { ...state },\n\n    async cancel(_options = {}): Promise<BeginRecognizeCustomFormPollerOperation> {\n      throw new Error(\"Cancel operation is not supported.\");\n    },\n\n    async update(options = {}): Promise<BeginRecognizeCustomFormPollerOperation> {\n      const state = this.state;\n      const { client, source, contentType, analyzeOptions, modelId } = state;\n\n      if (!state.isStarted) {\n        if (!source) {\n          throw new Error(\"Expect a valid 'source'\");\n        }\n\n        state.isStarted = true;\n        const result = await client.beginRecognize(\n          source,\n          modelId,\n          contentType,\n          analyzeOptions || {}\n        );\n        if (!result.operationLocation) {\n          throw new Error(\"Expect a valid 'operationLocation' to retrieve analyze results\");\n        }\n        const lastSlashIndex = result.operationLocation.lastIndexOf(\"/\");\n        state.resultId = result.operationLocation.substring(lastSlashIndex + 1);\n        // source is no longer needed\n        state.source = undefined;\n      }\n\n      const response = await client.getRecognizeResult(state.resultId!, {\n        abortSignal: analyzeOptions?.abortSignal\n      });\n\n      state.status = response.status;\n      if (!state.isCompleted) {\n        if (typeof options.fireProgress === \"function\") {\n          options.fireProgress(state);\n        }\n\n        if (response.status === \"succeeded\") {\n          state.result = response.forms;\n          state.isCompleted = true;\n        } else if (response.status === \"failed\") {\n          const errors = response.errors\n            ?.map((e) => `  code ${e.code}, message: '${e.message}'`)\n            .join(\"\\n\");\n          const message = `Custom form recognition failed using model ${state.modelId}.\nError(s):\n${errors || \"\"}\n`;\n          throw new Error(message);\n        }\n      }\n\n      return makeBeginRecognizePollOperation(state);\n    },\n\n    toString() {\n      return JSON.stringify({ state: this.state }, (key, value) => {\n        if (key === \"client\" || key === \"source\") {\n          return undefined;\n        }\n        return value;\n      });\n    }\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay, AbortSignalLike } from \"@azure/core-http\";\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\n\nimport {\n  GeneratedClientAnalyzeReceiptAsyncResponse as AnalyzeReceiptAsyncResponseModel,\n  OperationStatus\n} from \"../../generated/models\";\nimport { FormContentType } from \"../../common\";\nimport { FormRecognizerRequestBody, RecognizedFormArray } from \"../../models\";\nimport { RecognizeFormResultResponse } from \"../../internalModels\";\nimport { RecognizeFormsOptions } from \"../../formRecognizerClient\";\nexport { OperationStatus };\n\nexport interface ReceiptPollerOperationOptions {\n  /**\n   * Time between each polling in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * callback to receive events on the progress of download operation.\n   */\n  onProgress?: (state: BeginRecognizeReceiptPollState) => void;\n  /**\n   * A serialized poller, used to resume an existing operation\n   */\n  resumeFrom?: string;\n}\n\n/**\n * Defines the operations from a analyze client that are needed for the poller\n * to work\n */\nexport type RecognizeReceiptPollerClient = {\n  // returns a result id to retrieve results\n  beginRecognize: (\n    source: FormRecognizerRequestBody | string,\n    contentType?: FormContentType,\n    analyzeOptions?: RecognizeFormsOptions\n  ) => Promise<AnalyzeReceiptAsyncResponseModel>;\n  // retrieves analyze result\n  getRecognizeResult: (\n    resultId: string,\n    options: { abortSignal?: AbortSignalLike }\n  ) => Promise<RecognizeFormResultResponse>;\n};\n\nexport interface BeginRecognizeReceiptPollState extends PollOperationState<RecognizedFormArray> {\n  readonly client: RecognizeReceiptPollerClient;\n  source?: FormRecognizerRequestBody | string;\n  contentType?: FormContentType;\n  resultId?: string;\n  status: OperationStatus;\n  readonly analyzeOptions?: RecognizeFormsOptions;\n}\n\nexport interface BeginRecognizeReceiptPollerOperation\n  extends PollOperation<BeginRecognizeReceiptPollState, RecognizedFormArray> {}\n\n/**\n * @internal\n */\nexport type BeginRecognizeReceiptPollerOptions = {\n  client: RecognizeReceiptPollerClient;\n  source: FormRecognizerRequestBody | string;\n  contentType?: FormContentType;\n  updateIntervalInMs?: number;\n  resultId?: string;\n  onProgress?: (state: BeginRecognizeReceiptPollState) => void;\n  resumeFrom?: string;\n} & RecognizeFormsOptions;\n\n/**\n * Class that represents a poller that waits until a model has been trained.\n */\nexport class BeginRecognizeReceiptPoller extends Poller<\n  BeginRecognizeReceiptPollState,\n  RecognizedFormArray\n> {\n  public updateIntervalInMs: number;\n\n  constructor(options: BeginRecognizeReceiptPollerOptions) {\n    const {\n      client,\n      source,\n      contentType,\n      updateIntervalInMs = 5000,\n      resultId,\n      onProgress,\n      resumeFrom\n    } = options;\n\n    let state: BeginRecognizeReceiptPollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBeginRecognizePollOperation({\n      ...state,\n      client,\n      source,\n      contentType,\n      resultId,\n      status: \"notStarted\",\n      analyzeOptions: options\n    });\n\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n/**\n * Creates a poll operation given the provided state.\n * @ignore\n */\nfunction makeBeginRecognizePollOperation(\n  state: BeginRecognizeReceiptPollState\n): BeginRecognizeReceiptPollerOperation {\n  return {\n    state: { ...state },\n\n    async cancel(_options = {}): Promise<BeginRecognizeReceiptPollerOperation> {\n      throw new Error(\"Cancel operation is not supported.\");\n    },\n\n    async update(options = {}): Promise<BeginRecognizeReceiptPollerOperation> {\n      const state = this.state;\n      const { client, source, contentType, analyzeOptions } = state;\n\n      if (!state.isStarted) {\n        if (!source) {\n          throw new Error(\"Expect a valid 'source'\");\n        }\n\n        state.isStarted = true;\n        const result = await client.beginRecognize(source, contentType, analyzeOptions || {});\n        if (!result.operationLocation) {\n          throw new Error(\"Expect a valid 'operationLocation' to retrieve analyze results\");\n        }\n        const lastSlashIndex = result.operationLocation.lastIndexOf(\"/\");\n        state.resultId = result.operationLocation.substring(lastSlashIndex + 1);\n        // source is no longer needed\n        state.source = undefined;\n      }\n\n      const response = await client.getRecognizeResult(state.resultId!, {\n        abortSignal: analyzeOptions?.abortSignal\n      });\n\n      state.status = response.status;\n      if (!state.isCompleted) {\n        if (typeof options.fireProgress === \"function\") {\n          options.fireProgress(state);\n        }\n\n        if (response.status === \"succeeded\") {\n          state.result = response.forms;\n          state.isCompleted = true;\n        } else if (response.status === \"failed\") {\n          const errors = response.errors\n            ?.map((e) => `  code ${e.code}, message: '${e.message}'`)\n            .join(\"\\n\");\n          const message = `Receipt recognition failed.\nError(s):\n${errors || \"\"}\n`;\n          throw new Error(message);\n        }\n      }\n\n      return makeBeginRecognizePollOperation(state);\n    },\n\n    toString() {\n      return JSON.stringify({ state: this.state }, (key, value) => {\n        if (key === \"client\" || key === \"source\") {\n          return undefined;\n        }\n        return value;\n      });\n    }\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AnalyzeResult as AnalyzeResultModel,\n  DataTable as DataTableModel,\n  DocumentResult as DocumentResultModel,\n  FieldValue as FieldValueModel,\n  KeyValueElement as KeyValueElementModel,\n  KeyValuePair as KeyValuePairModel,\n  PageResult as PageResultModel,\n  ReadResult as ReadResultModel,\n  TextLine as TextLineModel,\n  GeneratedClientGetAnalyzeFormResultResponse as GetAnalyzeFormResultResponse,\n  GeneratedClientGetAnalyzeReceiptResultResponse as GetAnalyzeReceiptResultResponse,\n  GeneratedClientGetAnalyzeLayoutResultResponse as GetAnalyzeLayoutResultResponse,\n  GeneratedClientGetCustomModelResponse as GetCustomModelResponse\n} from \"./generated/models\";\n\nimport {\n  FormPage,\n  FormLine,\n  FormElement,\n  FormTable,\n  RecognizedForm,\n  FieldData,\n  FormField,\n  Point2D,\n  FormModelResponse,\n  CustomFormModelField,\n  CustomFormSubmodel\n} from \"./models\";\nimport { RecognizeFormResultResponse, RecognizeContentResultResponse } from \"./internalModels\";\n\nexport function toBoundingBox(original: number[]): Point2D[] {\n  return [\n    { x: original[0], y: original[1] },\n    { x: original[2], y: original[3] },\n    { x: original[4], y: original[5] },\n    { x: original[6], y: original[7] }\n  ];\n}\n\nexport function toTextLine(original: TextLineModel, pageNumber: number): FormLine {\n  const line: FormLine = {\n    kind: \"line\",\n    pageNumber: pageNumber,\n    text: original.text,\n    boundingBox: toBoundingBox(original.boundingBox),\n    words: original.words.map((w) => {\n      return {\n        kind: \"word\",\n        text: w.text,\n        boundingBox: toBoundingBox(w.boundingBox),\n        confidence: w.confidence || 1,\n        pageNumber: pageNumber\n      };\n    })\n  };\n\n  return line;\n}\n\nexport function toFormPage(original: ReadResultModel): FormPage {\n  return {\n    pageNumber: original.pageNumber,\n    textAngle: original.angle,\n    width: original.width,\n    height: original.height,\n    unit: original.unit,\n    lines: original.lines?.map((l) => toTextLine(l, original.pageNumber))\n  };\n}\n\n// Note: might need to support other element types in future, e.g., checkbox\nconst textPattern = /\\/readResults\\/(\\d+)\\/lines\\/(\\d+)(?:\\/words\\/(\\d+))?/;\n\nexport function toFormContent(element: string, readResults: FormPage[]): FormElement {\n  const result = textPattern.exec(element);\n  if (!result || !result[0] || !result[1] || !result[2]) {\n    throw new Error(`Unexpected element reference encountered: ${element}`);\n  }\n\n  const readIndex = Number.parseInt(result[1]);\n  const lineIndex = Number.parseInt(result[2]);\n  if (result[3]) {\n    const wordIndex = Number.parseInt(result[3]);\n    return readResults[readIndex].lines![lineIndex].words[wordIndex];\n  } else {\n    return readResults[readIndex].lines![lineIndex];\n  }\n}\n\nexport function toFieldData(\n  pageNumber: number,\n  original: KeyValueElementModel,\n  readResults?: FormPage[]\n): FieldData {\n  return {\n    pageNumber,\n    text: original.text,\n    boundingBox: original.boundingBox ? toBoundingBox(original.boundingBox) : undefined,\n    fieldElements: original.elements?.map((element) => toFormContent(element, readResults!))\n  };\n}\n\nexport function toFormFieldFromKeyValuePairModel(\n  pageNumber: number,\n  original: KeyValuePairModel,\n  readResults?: FormPage[]\n): FormField {\n  return {\n    name: original.label,\n    confidence: original.confidence || 1,\n    labelData: toFieldData(pageNumber, original.key, readResults),\n    valueData: toFieldData(pageNumber, original.value, readResults),\n    value: original.value.text,\n    valueType: \"string\"\n  };\n}\n\nexport function toFormTable(\n  original: DataTableModel,\n  readResults: FormPage[],\n  pageNumber: number\n): FormTable {\n  return {\n    rowCount: original.rows,\n    columnCount: original.columns,\n    cells: original.cells.map((cell) => ({\n      boundingBox: toBoundingBox(cell.boundingBox),\n      columnIndex: cell.columnIndex,\n      fieldElements: cell.elements?.map((element) => toFormContent(element, readResults)),\n      rowIndex: cell.rowIndex,\n      columnSpan: cell.columnSpan ?? 1,\n      rowSpan: cell.rowSpan ?? 1,\n      isHeader: cell.isHeader ?? false,\n      isFooter: cell.isFooter ?? false,\n      confidence: cell.confidence ?? 1,\n      text: cell.text,\n      pageNumber\n    })),\n    pageNumber\n  };\n}\n\nexport function toFormPages(\n  readResults?: ReadResultModel[],\n  pageResults?: PageResultModel[]\n): FormPage[] {\n  const transformed = readResults?.map(toFormPage);\n  // maps from page numbers to the objects\n  const readMap = new Map<number, FormPage>(transformed?.map((r) => [r.pageNumber, r]));\n  const pageMap = new Map<number, PageResultModel>(pageResults?.map((r) => [r.pageNumber, r]));\n  const result = [];\n  for (const pageNumber of readMap.keys()) {\n    const readResult = readMap.get(pageNumber);\n    if (readResult) {\n      const pageResult = pageMap.get(pageNumber);\n      if (pageResult) {\n        readResult.tables = pageResult.tables?.map((table) =>\n          toFormTable(table, transformed!, pageNumber)\n        );\n        result.push(readResult);\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function toRecognizeFormResultResponse(\n  original: GetAnalyzeFormResultResponse\n): RecognizeFormResultResponse {\n  const pages = toFormPages(\n    original.analyzeResult?.readResults,\n    original.analyzeResult?.pageResults\n  );\n  const common = {\n    status: original.status,\n    createdOn: original.createdOn,\n    errors: original.analyzeResult?.errors,\n    lastModified: original.lastModified,\n    _response: original._response\n  };\n\n  if (original.status !== \"succeeded\") {\n    return common;\n  }\n\n  const additional = original.analyzeResult\n    ? {\n        version: original.analyzeResult.version,\n        forms:\n          original.analyzeResult.documentResults &&\n          original.analyzeResult.documentResults.length > 0\n            ? original.analyzeResult.documentResults.map((d) => toRecognizedForm(d, pages)) // supervised\n            : original.analyzeResult.pageResults?.map((p) => toFormFromPageResult(p, pages)) // unsupervised\n      }\n    : undefined;\n  return {\n    ...common,\n    ...additional\n  };\n}\n\nexport function toFormFieldFromFieldValueModel(\n  original: FieldValueModel,\n  key: string,\n  readResults: FormPage[]\n): FormField {\n  let value:\n    | string\n    | Date\n    | number\n    | FormField[]\n    | { [propertyName: string]: FormField }\n    | undefined;\n  switch (original.type) {\n    case \"string\":\n      value = original.valueString;\n      break;\n    case \"date\":\n      value = original.valueDate;\n      break;\n    case \"time\":\n      value = original.valueTime;\n      break;\n    case \"integer\":\n      value = original.valueInteger;\n      break;\n    case \"number\":\n      value = original.valueNumber;\n      break;\n    case \"phoneNumber\":\n      value = original.valuePhoneNumber;\n      break;\n    case \"array\":\n      value = original.valueArray?.map((fieldValueModel) =>\n        toFormFieldFromFieldValueModel(fieldValueModel, key, readResults)\n      );\n      break;\n    case \"object\":\n      value = original.valueObject\n        ? toFieldsFromFieldValue(original.valueObject, readResults)\n        : undefined;\n      break;\n  }\n  return {\n    confidence: original.confidence || 1,\n    name: key,\n    valueData: {\n      pageNumber: original.pageNumber ?? 0,\n      text: original.text,\n      boundingBox: original.boundingBox ? toBoundingBox(original.boundingBox) : undefined,\n      fieldElements: original.elements?.map((element) => toFormContent(element, readResults))\n    },\n    valueType: original.type,\n    value\n  } as FormField;\n}\n\nexport function toFieldsFromFieldValue(\n  original: { [propertyName: string]: FieldValueModel | null },\n  readResults: FormPage[]\n): { [propertyName: string]: FormField } {\n  const result: { [propertyName: string]: FormField } = {};\n  for (const key in original) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (original.hasOwnProperty(key)) {\n      if (!original[key]) {\n        result[key] = { name: key };\n        continue;\n      }\n      const formField = toFormFieldFromFieldValueModel(original[key]!, key, readResults);\n      result[key] = formField;\n    }\n  }\n\n  return result;\n}\n\nexport function toFieldsFromKeyValuePairs(\n  pageNumber: number,\n  original: KeyValuePairModel[],\n  pages: FormPage[]\n): { [propertyName: string]: FormField } {\n  const result: { [propertyName: string]: FormField } = {};\n  for (let i = 0; i < original.length; i++) {\n    const pair = original[i];\n    const stringField = toFormFieldFromKeyValuePairModel(pageNumber, pair, pages);\n    stringField.name = stringField.name || `field-${i}`;\n\n    result[`field-${i}`] = stringField;\n  }\n\n  return result;\n}\n\nexport function toFormFromPageResult(original: PageResultModel, pages: FormPage[]): RecognizedForm {\n  return {\n    formType: `form-${original.clusterId}`,\n    pageRange: { firstPageNumber: original.pageNumber, lastPageNumber: original.pageNumber },\n    pages: pages.filter((p) => p.pageNumber === original.pageNumber),\n    fields: original.keyValuePairs\n      ? toFieldsFromKeyValuePairs(original.pageNumber, original.keyValuePairs, pages)\n      : {}\n  };\n}\n\nexport function toRecognizedForm(original: DocumentResultModel, pages: FormPage[]): RecognizedForm {\n  return {\n    formType: original.docType,\n    pageRange: { firstPageNumber: original.pageRange[0], lastPageNumber: original.pageRange[1] },\n    fields: toFieldsFromFieldValue(original.fields, pages),\n    pages: pages.filter(\n      (p) => original.pageRange[0] <= p.pageNumber && p.pageNumber <= original.pageRange[1]\n    )\n  };\n}\n\nexport function toRecognizeContentResultResponse(\n  original: GetAnalyzeLayoutResultResponse\n): RecognizeContentResultResponse {\n  function toRecognizeContentResult(\n    model?: AnalyzeResultModel\n  ): { version?: string; pages?: FormPage[] } | undefined {\n    if (!model) {\n      return undefined;\n    }\n    const pages = toFormPages(model.readResults, model.pageResults);\n    return {\n      version: model.version,\n      pages: pages\n    };\n  }\n\n  const common = {\n    status: original.status,\n    createdOn: original.createdOn,\n    errors: original.analyzeResult?.errors,\n    lastModified: original.lastModified,\n    _response: original._response\n  };\n  if (original.status === \"succeeded\") {\n    return {\n      ...common,\n      ...toRecognizeContentResult(original.analyzeResult)\n    };\n  } else {\n    return common;\n  }\n}\n\nexport function toRecognizeFormResultResponseFromReceipt(\n  original: GetAnalyzeReceiptResultResponse\n): RecognizeFormResultResponse {\n  const common = {\n    status: original.status,\n    createdOn: original.createdOn,\n    errors: original.analyzeResult?.errors,\n    lastModified: original.lastModified,\n    _response: original._response\n  };\n  if (original.status !== \"succeeded\") {\n    return common;\n  }\n\n  if (!original.analyzeResult) {\n    throw new Error(\"Expecting valid analyzeResult from the service response\");\n  }\n\n  const pages = original.analyzeResult!.readResults.map(toFormPage);\n  return {\n    ...common,\n    version: original.analyzeResult!.version,\n    forms: original\n      .analyzeResult!.documentResults!.filter((d) => {\n        return !!d.fields;\n      })\n      .map((d) => {\n        if (d.docType !== \"prebuilt:receipt\") {\n          throw new RangeError(\"The document type is not 'prebuilt:receipt'\");\n        }\n        return toRecognizedForm(d, pages);\n      })\n  };\n}\n\nexport function toFormModelResponse(response: GetCustomModelResponse): FormModelResponse {\n  const common = {\n    ...response.modelInfo,\n    trainingDocuments: response.trainResult?.trainingDocuments,\n    errors: response.trainResult?.errors,\n    _response: response._response\n  };\n\n  if (response.modelInfo.status !== \"ready\") {\n    return common;\n  }\n\n  if (response.trainResult?.averageModelAccuracy || response.trainResult?.fields) {\n    // training with forms and labels, populate from trainingResult.fields\n    const fields: Record<string, CustomFormModelField> = {};\n    for (const f of response.trainResult.fields!) {\n      fields[f.fieldName] = { name: f.fieldName, accuracy: f.accuracy, label: null };\n    }\n    return {\n      ...common,\n      submodels: [\n        {\n          accuracy: response.trainResult.averageModelAccuracy,\n          formType: `form-${response.modelInfo.modelId}`,\n          fields\n        }\n      ]\n    };\n  } else if (response.keys) {\n    // training with forms, populate from trainingResult.keys\n    const submodels: CustomFormSubmodel[] = [];\n    for (const clusterKey in response.keys.clusters) {\n      const cluster = response.keys.clusters[clusterKey];\n      const fields: Record<string, CustomFormModelField> = {};\n\n      for (let i = 0; i < cluster.length; i++) {\n        fields[`field-${i}`] = { name: `field-${i}`, label: cluster[i] };\n      }\n      submodels.push({ formType: `form-${clusterKey}`, fields });\n    }\n\n    return {\n      ...common,\n      submodels\n    };\n  } else {\n    throw new Error(\"Expecting model(s) from traning result but got none\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport {\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions,\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  RequestPolicyOptionsLike,\n  WebResourceLike\n} from \"@azure/core-http\";\n\nconst API_KEY_HEADER_NAME = \"Ocp-Apim-Subscription-Key\";\n\n/**\n * Create an HTTP pipeline policy to authenticate a request\n * using an `AzureKeyCredential` for Azure Form Recognizer\n */\nexport function createFormRecognizerAzureKeyCredentialPolicy(\n  credential: KeyCredential\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new FormRecognizerAzureKeyCredentialPolicy(nextPolicy, options, credential);\n    }\n  };\n}\n\n/**\n * A concrete implementation of an AzureKeyCredential policy\n * using the appropriate header for Azure Form Recognizer\n */\nclass FormRecognizerAzureKeyCredentialPolicy extends BaseRequestPolicy {\n  private credential: KeyCredential;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptionsLike,\n    credential: KeyCredential\n  ) {\n    super(nextPolicy, options);\n    this.credential = credential;\n  }\n\n  public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!webResource) {\n      throw new Error(\"webResource cannot be null or undefined\");\n    }\n\n    webResource.headers.set(API_KEY_HEADER_NAME, this.credential.key);\n    return this._nextPolicy.sendRequest(webResource);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  createPipelineFromOptions,\n  InternalPipelineOptions,\n  isTokenCredential,\n  bearerTokenAuthenticationPolicy,\n  operationOptionsToRequestOptionsBase,\n  AbortSignalLike\n} from \"@azure/core-http\";\nimport { TokenCredential } from \"@azure/identity\";\nimport { KeyCredential } from \"@azure/core-auth\";\nimport {\n  SDK_VERSION,\n  DEFAULT_COGNITIVE_SCOPE,\n  FormRecognizerLoggingAllowedHeaderNames,\n  FormRecognizerLoggingAllowedQueryParameters\n} from \"./constants\";\nimport { logger } from \"./logger\";\nimport { createSpan } from \"./tracing\";\nimport {\n  FormContentType,\n  FormRecognizerClientOptions,\n  FormRecognizerOperationOptions,\n  toRequestBody,\n  getContentType\n} from \"./common\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\n\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport {\n  GeneratedClientAnalyzeWithCustomModelResponse as AnalyzeWithCustomModelResponseModel,\n  GeneratedClientAnalyzeLayoutAsyncResponse as AnalyzeLayoutAsyncResponseModel,\n  GeneratedClientAnalyzeReceiptAsyncResponse as AnalyzeReceiptAsyncResponseModel,\n  SourcePath,\n  OperationStatus\n} from \"./generated/models\";\nimport { PollOperationState, PollerLike } from \"@azure/core-lro\";\nimport {\n  RecognizeContentPollerClient,\n  BeginRecognizeContentPoller\n} from \"./lro/analyze/contentPoller\";\nimport {\n  RecognizeCustomFormPollerClient,\n  BeginRecognizeCustomFormPoller\n} from \"./lro/analyze/customFormPoller\";\nimport {\n  RecognizeReceiptPollerClient,\n  BeginRecognizeReceiptPoller\n} from \"./lro/analyze/receiptPoller\";\nimport { FormRecognizerRequestBody, RecognizedFormArray, FormPageArray } from \"./models\";\nimport { RecognizeContentResultResponse, RecognizeFormResultResponse } from \"./internalModels\";\nimport {\n  toRecognizeFormResultResponse,\n  toRecognizeContentResultResponse,\n  toRecognizeFormResultResponseFromReceipt\n} from \"./transforms\";\nimport { createFormRecognizerAzureKeyCredentialPolicy } from \"./azureKeyCredentialPolicy\";\n\n/**\n * Options for content/layout recognition.\n */\nexport type RecognizeContentOptions = FormRecognizerOperationOptions;\n\n/**\n * The state of a recognize content operation\n */\nexport type RecognizeContentOperationState = PollOperationState<FormPageArray> & {\n  /**\n   * A string representing the current status of the operation.\n   */\n  status: OperationStatus;\n};\n\n/**\n * Options for the start content/layout recognition operation\n */\nexport type BeginRecognizeContentOptions = RecognizeContentOptions & {\n  /**\n   * Delay to wait until next poll, in milliseconds\n   */\n  updateIntervalInMs?: number;\n  /**\n   * Callback to progress events triggered in the content recognition Long-Running-Operation (LRO)\n   */\n  onProgress?: (state: RecognizeContentOperationState) => void;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  resumeFrom?: string;\n  /**\n   * Content type of the input. Supported types are \"application/pdf\", \"image/jpeg\", \"image/png\", and \"image/tiff\".\n   */\n  contentType?: FormContentType;\n};\n\n/**\n * The Long-Running-Operation (LRO) poller that allows you to wait until form content is recognized.\n */\nexport type ContentPollerLike = PollerLike<PollOperationState<FormPageArray>, FormPageArray>;\n\n/**\n * Options for retrieving recognized content data\n */\ntype GetRecognizedContentResultOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for recognition of forms\n */\nexport type RecognizeFormsOptions = FormRecognizerOperationOptions & {\n  /**\n   * Specifies whether to include text lines and element references in the result\n   */\n  includeFieldElements?: boolean;\n};\n\n/**\n * The status of a form recognition operation\n */\nexport type RecognizeFormsOperationState = PollOperationState<RecognizedFormArray> & {\n  /**\n   * A string representing the current status of the operation.\n   */\n  status: OperationStatus;\n};\n\n/**\n * Options for starting the analyze form operation\n */\nexport type BeginRecognizeFormsOptions = RecognizeFormsOptions & {\n  /**\n   * Delay to wait until next poll, in milliseconds\n   */\n  updateIntervalInMs?: number;\n  /**\n   * Callback to progress events triggered in the Recognize Form Long-Running-Operation (LRO)\n   */\n  onProgress?: (state: RecognizeFormsOperationState) => void;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  resumeFrom?: string;\n  /**\n   * Content type of the input. Supported types are \"application/pdf\", \"image/jpeg\", \"image/png\", and \"image/tiff\".\n   */\n  contentType?: FormContentType;\n};\n\n/**\n * Result type of the Recognize Form Long-Running-Operation (LRO)\n */\nexport type FormPollerLike = PollerLike<RecognizeFormsOperationState, RecognizedFormArray>;\n\n/**\n * Options for retrieving result of form recognition operation\n */\ntype GetRecognizedFormsOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for retrieving recognized receipt data\n */\ntype GetReceiptsOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for starting the receipt recognition operation\n */\nexport type BeginRecognizeReceiptsOptions = BeginRecognizeFormsOptions;\n\n/**\n * Client class for interacting with Azure Form Recognizer service.\n */\nexport class FormRecognizerClient {\n  /**\n   * Url to an Azure Form Recognizer service endpoint\n   */\n  public readonly endpointUrl: string;\n\n  /**\n   * @internal\n   * @ignore\n   * A reference to the auto-generated FormRecognizer HTTP client.\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of FormRecognizerClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { FormRecognizerClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n   *\n   * const client = new FormRecognizerClient(\n   *    \"<service endpoint>\",\n   *    new AzureKeyCredential(\"<api key>\")\n   * );\n   * ```\n   * @param {string} endpointUrl Url to an Azure Form Recognizer service endpoint\n   * @param {TokenCredential | KeyCredential} credential Used to authenticate requests to the service.\n   * @param {FormRecognizerClientOptions} [options] Used to configure the Form Recognizer client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential | KeyCredential,\n    options: FormRecognizerClientOptions = {}\n  ) {\n    this.endpointUrl = endpointUrl;\n    const { ...pipelineOptions } = options;\n\n    const libInfo = `azsdk-js-ai-formrecognizer/${SDK_VERSION}`;\n    if (!pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions = {};\n    }\n    if (pipelineOptions.userAgentOptions.userAgentPrefix) {\n      pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const authPolicy = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy(credential, DEFAULT_COGNITIVE_SCOPE)\n      : createFormRecognizerAzureKeyCredentialPolicy(credential);\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: FormRecognizerLoggingAllowedHeaderNames,\n          allowedQueryParameters: FormRecognizerLoggingAllowedQueryParameters\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n\n    this.client = new GeneratedClient(this.endpointUrl, pipeline);\n  }\n\n  /**\n   * Recognizes content, including text and table structure from a form document.\n   *\n   * This method returns a long running operation poller that allows you to wait\n   * indefinitely until the operation is completed.\n   * Note that the onProgress callback will not be invoked if the operation completes in the first\n   * request, and attempting to cancel a completed copy will result in an error being thrown.\n   *\n   * Example usage:\n   * ```ts\n   * const path = \"./Invoice_7.pdf\";\n   * const readStream = fs.createReadStream(path);\n   *\n   * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));\n   * const poller = await client.beginRecognizeContent(readStream, \"application/pdf\", {\n   *   onProgress: (state) => { console.log(`status: ${state.status}`); }\n   * });\n   *\n   * const pages = await poller.pollUntilDone();\n   * ```\n   * @summary Recognizes content/layout information from a given document\n   * @param {FormRecognizerRequestBody} form Input document\n   * @param {BeginRecognizeContentOptions} [options] Options to start content recognition operation\n   */\n  public async beginRecognizeContent(\n    form: FormRecognizerRequestBody,\n    options: BeginRecognizeContentOptions = {}\n  ): Promise<ContentPollerLike> {\n    const analyzePollerClient: RecognizeContentPollerClient = {\n      beginRecognize: (...args) => recognizeLayoutInternal(this.client, ...args),\n      getRecognizeResult: (...args) => this.getRecognizedContent(...args)\n    };\n\n    const poller = new BeginRecognizeContentPoller({\n      client: analyzePollerClient,\n      source: form,\n      ...options\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Recognizes content, including text and table structure from a url to a form document.\n   *\n   * This method returns a long running operation poller that allows you to wait\n   * indefinitely until the operation is completed.\n   * Note that the onProgress callback will not be invoked if the operation completes in the first\n   * request, and attempting to cancel a completed copy will result in an error being thrown.\n   *\n   * Example usage:\n   * ```ts\n   * const url = \"<form document url>\";\n   *\n   * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));\n   * const poller = await client.beginRecognizeContentFromUrl(url, {\n   *   onProgress: (state) => { console.log(`status: ${state.status}`); }\n   * });\n   *\n   * const pages = await poller.pollUntilDone();\n   * ```\n   * @summary Recognizes content/layout information from a url to a form document\n   * @param {string} formUrl Url to a form document that is accessible from the service. Must be a valid, encoded URL to one of the following supported document types: PDF, JPEG, PNG, and TIFF.\n   * @param {BeginRecognizeContentOptions} [options] Options to start content recognition operation\n   */\n  public async beginRecognizeContentFromUrl(\n    formUrl: string,\n    options: BeginRecognizeContentOptions = {}\n  ): Promise<ContentPollerLike> {\n    const analyzePollerClient: RecognizeContentPollerClient = {\n      beginRecognize: (...args) => recognizeLayoutInternal(this.client, ...args),\n      getRecognizeResult: (...args) => this.getRecognizedContent(...args)\n    };\n\n    if (options.contentType) {\n      logger.warning(\"Ignoring 'contentType' parameter passed to URL-based method.\");\n    }\n\n    const poller = new BeginRecognizeContentPoller({\n      client: analyzePollerClient,\n      source: formUrl,\n      ...options,\n      contentType: undefined\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Retrieves result of content recognition operation.\n   * @private\n   */\n  private async getRecognizedContent(\n    resultId: string,\n    options?: GetRecognizedContentResultOptions\n  ): Promise<RecognizeContentResultResponse> {\n    const realOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormRecognizerClient-getRecognizedLayoutResult\",\n      realOptions\n    );\n\n    try {\n      const requestOptions = operationOptionsToRequestOptionsBase(finalOptions);\n      const analyzeResult = await this.client.getAnalyzeLayoutResult(resultId, requestOptions);\n      return toRecognizeContentResultResponse(analyzeResult);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Recognizes forms from a given document using a custom form model from training.\n   * This method returns a long running operation poller that allows you to wait\n   * indefinitely until the operation is completed.\n   * Note that the onProgress callback will not be invoked if the operation completes in the first\n   * request, and attempting to cancel a completed copy will result in an error being thrown.\n   *\n   * Example usage:\n   * ```ts\n   * const path = \"./Invoice_6.pdf\";\n   * const readStream = fs.createReadStream(path);\n   *\n   * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));\n   * const poller = await client.beginRecognizeCustomForms(modelId, readStream, \"application/pdf\", {\n   *   onProgress: (state) => { console.log(`status: ${state.status}`); }\n   * });\n   * const forms = await poller.pollUntilDone();\n   * ```\n   * @summary Recognizes form information from a given document using a custom form model.\n   * @param {string} modelId Id of the custom form model to use\n   * @param {FormRecognizerRequestBody} form Input form document\n   * @param {BeginRecognizeFormsOptions} [options] Options to start the form recognition operation\n   */\n  public async beginRecognizeCustomForms(\n    modelId: string,\n    form: FormRecognizerRequestBody,\n    options: BeginRecognizeFormsOptions = {}\n  ): Promise<FormPollerLike> {\n    if (!modelId) {\n      throw new RangeError(\"Invalid model id\");\n    }\n    const analyzePollerClient: RecognizeCustomFormPollerClient = {\n      beginRecognize: (\n        body: FormRecognizerRequestBody | string,\n        modelId: string,\n        contentType?: FormContentType,\n        analyzeOptions: RecognizeFormsOptions = {}\n      ) => recognizeCustomFormInternal(this.client, body, contentType, analyzeOptions, modelId!),\n      getRecognizeResult: (resultId: string, options: { abortSignal?: AbortSignalLike }) =>\n        this.getRecognizedForm(modelId, resultId, options)\n    };\n\n    const poller = new BeginRecognizeCustomFormPoller({\n      client: analyzePollerClient,\n      modelId,\n      source: form,\n      ...options\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Recognizes forms from a url to a form document using a custom form model from training.\n   * This method returns a long running operation poller that allows you to wait\n   * indefinitely until the operation is completed.\n   * Note that the onProgress callback will not be invoked if the operation completes in the first\n   * request, and attempting to cancel a completed copy will result in an error being thrown.\n   *\n   * Example usage:\n   * ```ts\n   * const url = \"<form document url>\";\n   *\n   * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));\n   * const poller = await client.beginRecognizeCustomFormsFromUrl(modelId, url, {\n   *   onProgress: (state) => { console.log(`status: ${state.status}`); }\n   * });\n   * const forms = await poller.pollUntilDone();\n   * ```\n   * @summary Recognizes form information from a url to a form document using a custom form model.\n   * @param {string} modelId Id of the custom form model to use\n   * @param {string} formUrl Url to a form document that is accessible from the service. Must be a valid, encoded URL to one of the following supported document types: PDF, JPEG, PNG, and TIFF.\n   * @param {BeginRecognizeFormsOptions} [options] Options to start the form recognition operation\n   */\n  public async beginRecognizeCustomFormsFromUrl(\n    modelId: string,\n    formUrl: string,\n    options: BeginRecognizeFormsOptions = {}\n  ): Promise<FormPollerLike> {\n    if (!modelId) {\n      throw new RangeError(\"Invalid modelId\");\n    }\n    const analyzePollerClient: RecognizeCustomFormPollerClient = {\n      beginRecognize: (\n        body: FormRecognizerRequestBody | string,\n        modelId: string,\n        contentType?: FormContentType,\n        analyzeOptions: RecognizeFormsOptions = {}\n      ) => recognizeCustomFormInternal(this.client, body, contentType, analyzeOptions, modelId!),\n      getRecognizeResult: (resultId: string, options: { abortSignal?: AbortSignalLike }) =>\n        this.getRecognizedForm(modelId, resultId, options)\n    };\n\n    if (options.contentType) {\n      logger.warning(\"Ignoring 'contentType' parameter passed to URL-based method.\");\n    }\n\n    const poller = new BeginRecognizeCustomFormPoller({\n      client: analyzePollerClient,\n      modelId,\n      source: formUrl,\n      ...options,\n      contentType: undefined\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Retrieves result of a form recognition operation.\n   * @private\n   */\n  private async getRecognizedForm(\n    modelId: string,\n    resultId: string,\n    options?: GetRecognizedFormsOptions\n  ): Promise<RecognizeFormResultResponse> {\n    const realOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormRecognizerClient-getRecognizedForm\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.getAnalyzeFormResult(\n        modelId,\n        resultId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n      return toRecognizeFormResultResponse(result);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Recognizes data from receipts using pre-built receipt model, enabling you to extract structure data\n   * from receipts such as merchant name, merchant phone number, transaction date, and more.\n   *\n   * For a list of fields that are contained in the response, please refer to the \"Supported fields\" section at the following link: https://aka.ms/azsdk/formrecognizer/receiptfields\n   *\n   * This method returns a long running operation poller that allows you to wait\n   * indefinitely until the operation is completed.\n   * Note that the onProgress callback will not be invoked if the operation completes in the first\n   * request, and attempting to cancel a completed copy will result in an error being thrown.\n   *\n   * Example usage:\n   * ```ts\n   * const path = \"./contoso-allinone.jpg\";\n   * const readStream = fs.createReadStream(path);\n   *\n   * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));\n   * const poller = await client.beginRecognizeReceipts(readStream, \"image/jpeg\", {\n   *   onProgress: (state) => { console.log(`status: ${state.status}`); }\n   * });\n   *\n   * const receipts = await poller.pollUntilDone();\n   *  if (!receipts || receipts.length <= 0) {\n   *    throw new Error(\"Expecting at lease one receipt in analysis result\");\n   *  }\n   *\n   * const receipt = receipts[0];\n   * console.log(\"First receipt:\");\n   * const receiptTypeField = receipt.fields[\"ReceiptType\"];\n   * if (receiptTypeField.valueType === \"string\") {\n   *   console.log(`  Receipt Type: '${receiptTypeField.value || \"<missing>\"}', with confidence of ${receiptTypeField.confidence}`);\n   * }\n   * const merchantNameField = receipt.fields[\"MerchantName\"];\n   * if (merchantNameField.valueType === \"string\") {\n   *   console.log(`  Merchant Name: '${merchantNameField.value || \"<missing>\"}', with confidence of ${merchantNameField.confidence}`);\n   * }\n   * const transactionDate = receipt.fields[\"TransactionDate\"];\n   * if (transactionDate.valueType === \"date\") {\n   *   console.log(`  Transaction Date: '${transactionDate.value || \"<missing>\"}', with confidence of ${transactionDate.confidence}`);\n   * }\n   * const itemsField = receipt.fields[\"Items\"];\n   * if (itemsField.valueType === \"array\") {\n   *   for (const itemField of itemsField.value || []) {\n   *     if (itemField.valueType === \"object\") {\n   *       const itemNameField = itemField.value![\"Name\"];\n   *       if (itemNameField.valueType === \"string\") {\n   *         console.log(`    Item Name: '${itemNameField.value || \"<missing>\"}', with confidence of ${itemNameField.confidence}`);\n   *       }\n   *     }\n   *  }\n   * }\n   * const totalField = receipt.fields[\"Total\"];\n   * if (totalField.valueType === \"number\") {\n   *   console.log(`  Total: '${totalField.value || \"<missing>\"}', with confidence of ${totalField.confidence}`);\n   * }\n   * ```\n   * @summary Recognizes receipt information from a given document\n   * @param {FormRecognizerRequestBody} receipt Input document\n   * @param {FormContentType} contentType Content type of the input. Supported types are \"application/pdf\", \"image/jpeg\", \"image/png\", and \"image/tiff\";\n   * @param {BeginRecognizeFormsOptions} [options] Options to start the receipt recognition operation\n   */\n  public async beginRecognizeReceipts(\n    receipt: FormRecognizerRequestBody,\n    options: BeginRecognizeReceiptsOptions = {}\n  ): Promise<FormPollerLike> {\n    const analyzePollerClient: RecognizeReceiptPollerClient = {\n      beginRecognize: (...args) => recognizeReceiptInternal(this.client, ...args),\n      getRecognizeResult: (...args) => this.getReceipts(...args)\n    };\n\n    const poller = new BeginRecognizeReceiptPoller({\n      client: analyzePollerClient,\n      source: receipt,\n      ...options\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Recognizes receipt information from a url using pre-built receipt model, enabling you to extract structure data\n   * from receipts such as merchant name, merchant phone number, transaction date, and more.\n   *\n   * For a list of fields that are contained in the response, please refer to the \"Supported fields\" section at the following link: https://aka.ms/azsdk/formrecognizer/receiptfields\n   *\n   * This method returns a long running operation poller that allows you to wait\n   * indefinitely until the operation is completed.\n   * Note that the onProgress callback will not be invoked if the operation completes in the first\n   * request, and attempting to cancel a completed copy will result in an error being thrown.\n   *\n   * Example usage:\n   * ```ts\n   * const url = \"<url to the receipt document>\";\n   * const client = new FormRecognizerClient(endpoint, new AzureKeyCredential(apiKey));\n   * const poller = await client.beginRecognizeReceiptsFromUrl(\n   *   url, {\n   *     includeFieldElements: true,\n   *     onProgress: (state) => { console.log(`analyzing status: ${state.status}`); }\n   * });\n   * const receipts = await poller.pollUntilDone();\n   *  if (!receipts || receipts.length <= 0) {\n   *    throw new Error(\"Expecting at lease one receipt in analysis result\");\n   *  }\n   *\n   * const receipt = receipts[0];\n   * console.log(\"First receipt:\");\n   * const receiptTypeField = receipt.fields[\"ReceiptType\"];\n   * if (receiptTypeField.valueType === \"string\") {\n   *   console.log(`  Receipt Type: '${receiptTypeField.value || \"<missing>\"}', with confidence of ${receiptTypeField.confidence}`);\n   * }\n   * const merchantNameField = receipt.fields[\"MerchantName\"];\n   * if (merchantNameField.valueType === \"string\") {\n   *   console.log(`  Merchant Name: '${merchantNameField.value || \"<missing>\"}', with confidence of ${merchantNameField.confidence}`);\n   * }\n   * const transactionDate = receipt.fields[\"TransactionDate\"];\n   * if (transactionDate.valueType === \"date\") {\n   *   console.log(`  Transaction Date: '${transactionDate.value || \"<missing>\"}', with confidence of ${transactionDate.confidence}`);\n   * }\n   * const itemsField = receipt.fields[\"Items\"];\n   * if (itemsField.valueType === \"array\") {\n   *   for (const itemField of itemsField.value || []) {\n   *     if (itemField.valueType === \"object\") {\n   *       const itemNameField = itemField.value![\"Name\"];\n   *       if (itemNameField.valueType === \"string\") {\n   *         console.log(`    Item Name: '${itemNameField.value || \"<missing>\"}', with confidence of ${itemNameField.confidence}`);\n   *       }\n   *     }\n   *  }\n   * }\n   * const totalField = receipt.fields[\"Total\"];\n   * if (totalField.valueType === \"number\") {\n   *   console.log(`  Total: '${totalField.value || \"<missing>\"}', with confidence of ${totalField.confidence}`);\n   * }\n   * ```\n   * @summary Recognizes receipt information from a given accessible url to input document\n   * @param {string} receiptUrl Url to a receipt document that is accessible from the service. Must be a valid, encoded URL to one of the following supported document types: PDF, JPEG, PNG, and TIFF.\n   * @param {BeginRecognizeFormsOptions} [options] Options to start receipt recognition operation\n   */\n  public async beginRecognizeReceiptsFromUrl(\n    receiptUrl: string,\n    options: BeginRecognizeReceiptsOptions = {}\n  ): Promise<FormPollerLike> {\n    const analyzePollerClient: RecognizeReceiptPollerClient = {\n      beginRecognize: (...args) => recognizeReceiptInternal(this.client, ...args),\n      getRecognizeResult: (...args) => this.getReceipts(...args)\n    };\n\n    if (options.contentType) {\n      logger.warning(\"Ignoring 'contentType' parameter passed to URL-based method.\");\n    }\n\n    const poller = new BeginRecognizeReceiptPoller({\n      client: analyzePollerClient,\n      source: receiptUrl,\n      ...options,\n      contentType: undefined\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Retrieves result of a receipt recognition operation.\n   * @private\n   */\n  private async getReceipts(\n    resultId: string,\n    options?: GetReceiptsOptions\n  ): Promise<RecognizeFormResultResponse> {\n    const realOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormRecognizerClient-getRecognizedReceipt\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.getAnalyzeReceiptResult(\n        resultId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n      return toRecognizeFormResultResponseFromReceipt(result);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n\n/**\n * @internal\n */\nasync function recognizeLayoutInternal(\n  client: GeneratedClient,\n  body: FormRecognizerRequestBody | string,\n  contentType?: FormContentType,\n  options?: RecognizeContentOptions,\n  _modelId?: string\n): Promise<AnalyzeLayoutAsyncResponseModel> {\n  const realOptions = options || {};\n  const { span, updatedOptions: finalOptions } = createSpan(\"analyzeLayoutInternal\", realOptions);\n  const requestBody = await toRequestBody(body);\n  const requestContentType = contentType ? contentType : await getContentType(requestBody);\n\n  try {\n    if (requestContentType) {\n      return await client.analyzeLayoutAsync(\n        requestContentType,\n        requestBody as Blob | ArrayBuffer | ArrayBufferView,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n    }\n    return await client.analyzeLayoutAsync(\"application/json\", {\n      fileStream: requestBody as SourcePath,\n      ...operationOptionsToRequestOptionsBase(finalOptions)\n    });\n  } catch (e) {\n    span.setStatus({\n      code: CanonicalCode.UNKNOWN,\n      message: e.message\n    });\n    throw e;\n  } finally {\n    span.end();\n  }\n}\n\n/**\n * @internal\n */\nasync function recognizeCustomFormInternal(\n  client: GeneratedClient,\n  body: FormRecognizerRequestBody | string,\n  contentType?: FormContentType,\n  options: RecognizeFormsOptions = {},\n  modelId?: string\n): Promise<AnalyzeWithCustomModelResponseModel> {\n  const { span, updatedOptions: finalOptions } = createSpan(\"analyzeCustomFormInternal\", {\n    ...options,\n    includeTextDetails: options.includeFieldElements\n  });\n  const requestBody = await toRequestBody(body);\n  const requestContentType = contentType ?? (await getContentType(requestBody));\n\n  try {\n    if (requestContentType) {\n      return await client.analyzeWithCustomModel(\n        modelId!,\n        requestContentType,\n        requestBody as Blob | ArrayBuffer | ArrayBufferView,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n    }\n    return await client.analyzeWithCustomModel(modelId!, \"application/json\", {\n      fileStream: requestBody as SourcePath,\n      ...operationOptionsToRequestOptionsBase(finalOptions)\n    });\n  } catch (e) {\n    span.setStatus({\n      code: CanonicalCode.UNKNOWN,\n      message: e.message\n    });\n    throw e;\n  } finally {\n    span.end();\n  }\n}\n\n/**\n * @internal\n */\nasync function recognizeReceiptInternal(\n  client: GeneratedClient,\n  body: FormRecognizerRequestBody | string,\n  contentType?: FormContentType,\n  options?: RecognizeFormsOptions,\n  _modelId?: string\n): Promise<AnalyzeReceiptAsyncResponseModel> {\n  const realOptions = options || { includeFieldElements: false };\n  const { span, updatedOptions: finalOptions } = createSpan(\"analyzeReceiptInternal\", {\n    ...realOptions,\n    includeTextDetails: realOptions.includeFieldElements\n  });\n  const requestBody = await toRequestBody(body);\n  const requestContentType = contentType ?? (await getContentType(requestBody));\n\n  try {\n    if (requestContentType) {\n      return await client.analyzeReceiptAsync(\n        requestContentType,\n        requestBody as Blob | ArrayBuffer | ArrayBufferView,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n    }\n    return await client.analyzeReceiptAsync(\"application/json\", {\n      fileStream: requestBody as SourcePath,\n      ...operationOptionsToRequestOptionsBase(finalOptions)\n    });\n  } catch (e) {\n    span.setStatus({\n      code: CanonicalCode.UNKNOWN,\n      message: e.message\n    });\n    throw e;\n  } finally {\n    span.end();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay } from \"@azure/core-http\";\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { TrainingFileFilter, GetModelOptions } from \"../../formTrainingClient\";\n\nimport {\n  ModelStatus,\n  GeneratedClientTrainCustomModelAsyncResponse as TrainCustomModelAsyncResponse\n} from \"../../generated/models\";\nimport { CustomFormModel, FormModelResponse } from \"../../models\";\nexport { ModelStatus, TrainCustomModelAsyncResponse };\n\n/**\n * Defines the operations from a {@link FormRecognizerClient} that are needed for the poller\n * returned by {@link FormRecognizerClient.beginTraining} to work.\n */\nexport type TrainPollerClient = {\n  getCustomModel: (modelId: string, options: GetModelOptions) => Promise<FormModelResponse>;\n  trainCustomModelInternal: (\n    source: string,\n    useLabelFile?: boolean,\n    options?: TrainingFileFilter\n  ) => Promise<TrainCustomModelAsyncResponse>;\n};\n\n/**\n * The state used by the poller returned from {@link FormTrainingClient.beginTraining}.\n *\n * This state is passed into the user-specified `onProgress` callback\n * whenever copy progress is detected.\n */\nexport interface BeginTrainingPollState extends PollOperationState<CustomFormModel> {\n  /**\n   * The instance of {@link TrainPollerClient} that is used when calling {@link FormTrainingClient.beginTraining}.\n   */\n  readonly client: TrainPollerClient;\n  /**\n   * The accessible url to an Azure Blob Storage container holding the training documents.\n   */\n  source: string;\n  /**\n   * The id of the custom form model being created from the training operation.\n   */\n  modelId?: string;\n  /**\n   * the status of the created model.\n   */\n  status: ModelStatus;\n  /**\n   * Option to filter training files.\n   */\n  readonly trainModelOptions?: TrainingFileFilter;\n}\n\nexport interface BeginTrainingPollerOperation\n  extends PollOperation<BeginTrainingPollState, CustomFormModel> {}\n\n/**\n * @internal\n */\nexport interface BeginTrainingPollerOptions {\n  client: TrainPollerClient;\n  source: string;\n  updateIntervalInMs?: number;\n  onProgress?: (state: BeginTrainingPollState) => void;\n  resumeFrom?: string;\n  trainModelOptions?: TrainingFileFilter;\n}\n\n/**\n * Class that represents a poller that waits until a model has been trained.\n */\nexport class BeginTrainingPoller extends Poller<BeginTrainingPollState, CustomFormModel> {\n  public updateIntervalInMs: number;\n\n  constructor(options: BeginTrainingPollerOptions) {\n    const {\n      client,\n      source,\n      updateIntervalInMs = 5000,\n      onProgress,\n      resumeFrom,\n      trainModelOptions\n    } = options;\n\n    let state: BeginTrainingPollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBeginTrainingPollOperation({\n      ...state,\n      client,\n      source,\n      status: \"creating\",\n      trainModelOptions\n    });\n\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n\n/**\n * Creates a poll operation given the provided state.\n * @ignore\n */\nfunction makeBeginTrainingPollOperation(\n  state: BeginTrainingPollState\n): BeginTrainingPollerOperation {\n  return {\n    state: { ...state },\n\n    async cancel(_options = {}): Promise<BeginTrainingPollerOperation> {\n      throw new Error(\"Cancel operation is not supported.\");\n    },\n\n    async update(options = {}): Promise<BeginTrainingPollerOperation> {\n      const state = this.state;\n      const { client, source, trainModelOptions } = state;\n\n      if (!state.isStarted) {\n        state.isStarted = true;\n        const result = await client.trainCustomModelInternal(\n          source,\n          false,\n          trainModelOptions || {}\n        );\n        if (!result.location) {\n          throw new Error(\"Expect a valid 'operationLocation' to retrieve analyze results\");\n        }\n        const lastSlashIndex = result.location.lastIndexOf(\"/\");\n        state.modelId = result.location.substring(lastSlashIndex + 1);\n      }\n\n      const model = await client.getCustomModel(state.modelId!, {\n        abortSignal: trainModelOptions?.abortSignal\n      });\n\n      state.status = model.status;\n\n      if (!state.isCompleted) {\n        if (typeof options.fireProgress === \"function\") {\n          options.fireProgress(state);\n        }\n\n        if (model.status === \"ready\") {\n          state.result = model;\n          state.isCompleted = true;\n        } else if (model.status === \"invalid\") {\n          const errors = model.errors\n            ?.map((e) => `  code ${e.code}, message: '${e.message}'`)\n            .join(\"\\n\");\n          const additionalInfo = model.trainingDocuments\n            ?.map(\n              (d) =>\n                `  document: ${d.name}, status: ${d.status}, errors: ${d.errors\n                  ?.map((e) => `code ${e.code}, message: '${e.message}'`)\n                  .join(\"\\n\")}`\n            )\n            .join(\"\\n\");\n          const message = `Model training failed. Invalid model was created with id '${\n            state.modelId\n          }'.\nError(s):\n${errors || \"\"}\nAdditional information:\n${additionalInfo || \"\"}\n`;\n          throw new Error(message);\n        }\n      }\n\n      return makeBeginTrainingPollOperation(state);\n    },\n\n    toString() {\n      return JSON.stringify({ state: this.state }, (key, value) => {\n        if (key === \"client\") {\n          return undefined;\n        }\n        return value;\n      });\n    }\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay } from \"@azure/core-http\";\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { CopyModelOptions, GetCopyModelResultOptions } from \"../../formTrainingClient\";\n\nimport {\n  GeneratedClientGetCustomModelCopyResultResponse as GetCustomModelCopyResultResponse,\n  GeneratedClientCopyCustomModelResponse as CopyCustomModelResponseModel,\n  OperationStatus\n} from \"../../generated/models\";\nimport { CopyAuthorization, CustomFormModelInfo } from \"../../models\";\nexport { OperationStatus };\n\nexport interface CopyPollerOperationOptions {\n  /**\n   * Time between each polling in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * callback to receive events on the progress of download operation.\n   */\n  onProgress?: (state: BeginCopyModelPollState) => void;\n  /**\n   * A serialized poller, used to resume an existing operation\n   */\n  resumeFrom?: string;\n}\n\n/**\n * Defines the operations from a training client that are needed for the poller\n * to work\n */\nexport type CopyModelPollerClient = {\n  // returns a result id to retrieve results\n  beginCopyModel: (\n    modelId: string,\n    copyAuthorization: CopyAuthorization,\n    copyModelOptions?: CopyModelOptions\n  ) => Promise<CopyCustomModelResponseModel>;\n  // retrieves copy model result\n  getCopyModelResult: (\n    modelId: string,\n    resultId: string,\n    options: GetCopyModelResultOptions\n  ) => Promise<GetCustomModelCopyResultResponse>;\n};\n\n/**\n * The state used by the poller returned from {@link FormTrainingClient.beginCopyModel}.\n *\n * This state is passed into the user-specified `onProgress` callback\n * whenever copy progress is detected.\n */\nexport interface BeginCopyModelPollState extends PollOperationState<CustomFormModelInfo> {\n  /**\n   * The instance of {@link CopyModelPollerClient} that is used when calling {@link FormTrainingClient.beginCopyModel}.\n   */\n  readonly client: CopyModelPollerClient;\n  /**\n   * Id of the model being copied\n   */\n  modelId: string;\n  /**\n   * Id of the target Form Recognizer resource\n   */\n  targetResourceId: string;\n  /**\n   * Region of the target Form Recognizer resource\n   */\n  targetResourceRegion: string;\n  /**\n   * The copy authorization generated by the target Form Recognizer resource.\n   */\n  copyAuthorization: CopyAuthorization;\n  /**\n   * Id of the copy model operation result.\n   */\n  resultId?: string;\n  /**\n   * Status of the copy model operation.\n   */\n  status: OperationStatus;\n  /**\n   * Option to the copy model operation.\n   */\n  readonly copyModelOptions?: CopyModelOptions;\n}\n\nexport interface BeginCopyModelPollerOperation\n  extends PollOperation<BeginCopyModelPollState, CustomFormModelInfo> {}\n\n/**\n * @internal\n */\nexport type BeginCopyModelPollerOptions = {\n  client: CopyModelPollerClient;\n  modelId: string;\n  targetResourceId: string;\n  targetResourceRegion: string;\n  copyAuthorization: CopyAuthorization;\n  updateIntervalInMs?: number;\n  resultId?: string;\n  onProgress?: (state: BeginCopyModelPollState) => void;\n  resumeFrom?: string;\n} & CopyModelOptions;\n\n/**\n * Class that represents a poller that waits until a model has been trained.\n */\nexport class BeginCopyModelPoller extends Poller<BeginCopyModelPollState, CustomFormModelInfo> {\n  public updateIntervalInMs: number;\n\n  constructor(options: BeginCopyModelPollerOptions) {\n    const {\n      client,\n      updateIntervalInMs = 5000,\n      modelId,\n      resultId,\n      targetResourceId,\n      targetResourceRegion,\n      copyAuthorization,\n      onProgress,\n      resumeFrom\n    } = options;\n\n    let state: BeginCopyModelPollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBeginCopyModelPollOperation({\n      ...state,\n      client,\n      modelId,\n      targetResourceId,\n      targetResourceRegion,\n      copyAuthorization,\n      resultId,\n      status: \"notStarted\",\n      copyModelOptions: options\n    });\n\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n/**\n * Creates a poll operation given the provided state.\n * @ignore\n */\nfunction makeBeginCopyModelPollOperation(\n  state: BeginCopyModelPollState\n): BeginCopyModelPollerOperation {\n  return {\n    state: { ...state },\n\n    async cancel(_options = {}): Promise<BeginCopyModelPollerOperation> {\n      throw new Error(\"Cancel operation is not supported.\");\n    },\n\n    async update(options = {}): Promise<BeginCopyModelPollerOperation> {\n      const state = this.state;\n      const { client, modelId, copyAuthorization, copyModelOptions } = state;\n\n      if (!state.isStarted) {\n        state.isStarted = true;\n        const result = await client.beginCopyModel(\n          modelId,\n          copyAuthorization,\n          copyModelOptions || {}\n        );\n        if (!result.operationLocation) {\n          throw new Error(\"Expect a valid 'operationLocation' to retrieve analyze results\");\n        }\n        const lastSlashIndex = result.operationLocation.lastIndexOf(\"/\");\n        state.resultId = result.operationLocation.substring(lastSlashIndex + 1);\n      }\n\n      const response = await client.getCopyModelResult(modelId, state.resultId!, {\n        abortSignal: copyModelOptions?.abortSignal\n      });\n\n      state.status = response.status;\n      if (!state.isCompleted) {\n        if (\n          (response.status === \"running\" || response.status === \"notStarted\") &&\n          typeof options.fireProgress === \"function\"\n        ) {\n          options.fireProgress(state);\n        } else if (response.status === \"succeeded\") {\n          state.result = {\n            status: \"ready\",\n            trainingStartedOn: response.createdOn,\n            trainingCompletedOn: response.lastModified,\n            modelId: copyAuthorization.modelId\n          };\n          state.isCompleted = true;\n        } else if (response.status === \"failed\") {\n          throw new Error(`Copy model operation failed: ${response._response.bodyAsText}`);\n        }\n      }\n\n      return makeBeginCopyModelPollOperation(state);\n    },\n\n    toString() {\n      return JSON.stringify({ state: this.state }, (key, value) => {\n        if (key === \"client\" || key === \"source\") {\n          return undefined;\n        }\n        return value;\n      });\n    }\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport {\n  createPipelineFromOptions,\n  InternalPipelineOptions,\n  isTokenCredential,\n  bearerTokenAuthenticationPolicy,\n  operationOptionsToRequestOptionsBase,\n  RestResponse\n} from \"@azure/core-http\";\nimport { TokenCredential } from \"@azure/identity\";\nimport { KeyCredential } from \"@azure/core-auth\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport \"@azure/core-paging\";\nimport {\n  SDK_VERSION,\n  DEFAULT_COGNITIVE_SCOPE,\n  FormRecognizerLoggingAllowedHeaderNames,\n  FormRecognizerLoggingAllowedQueryParameters\n} from \"./constants\";\nimport { logger } from \"./logger\";\nimport { createSpan } from \"./tracing\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport {\n  GeneratedClientGetCustomModelCopyResultResponse as GetCustomModelCopyResultResponseModel,\n  GeneratedClientCopyCustomModelResponse as CopyCustomModelResponseModel,\n  GeneratedClientTrainCustomModelAsyncResponse,\n  CopyAuthorizationResult\n} from \"./generated/models\";\nimport { TrainPollerClient, BeginTrainingPoller } from \"./lro/train/poller\";\nimport { PollOperationState, PollerLike } from \"@azure/core-lro\";\nimport { FormRecognizerClientOptions, FormRecognizerOperationOptions } from \"./common\";\nimport {\n  FormModelResponse,\n  AccountProperties,\n  CustomFormModel,\n  CustomFormModelInfo,\n  CopyAuthorization,\n  ListCustomModelsResponse,\n  OperationStatus,\n  ModelStatus\n} from \"./models\";\nimport { createFormRecognizerAzureKeyCredentialPolicy } from \"./azureKeyCredentialPolicy\";\nimport { toFormModelResponse } from \"./transforms\";\nimport { CopyModelPollerClient, BeginCopyModelPoller } from \"./lro/copy/poller\";\nimport { FormRecognizerClient } from \"./formRecognizerClient\";\n\nexport { RestResponse };\n\n/**\n * Options for model listing operation.\n */\nexport type ListModelsOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for the get account properties operation.\n */\nexport type GetAccountPropertiesOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for the delete model operation.\n */\nexport type DeleteModelOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for the get model operation.\n */\nexport type GetModelOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for the generate copy model authorization operation.\n */\nexport type GetCopyAuthorizationOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for the copy custom model operation.\n */\nexport type CopyModelOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for the get copy model result operation.\n */\nexport type GetCopyModelResultOptions = FormRecognizerOperationOptions;\n\n/**\n * The status of a copy model operation\n */\nexport type CopyModelOperationState = PollOperationState<CustomFormModel> & {\n  /**\n   * A string representing the current status of the operation.\n   */\n  status: OperationStatus;\n};\n\n/**\n * Options for begin copy model operation\n */\nexport type BeginCopyModelOptions = FormRecognizerOperationOptions & {\n  updateIntervalInMs?: number;\n  onProgress?: (state: CopyModelOperationState) => void;\n  resumeFrom?: string;\n};\n\n/**\n * Options for training models\n */\nexport type TrainingFileFilter = FormRecognizerOperationOptions & {\n  prefix?: string;\n  includeSubfolders?: boolean;\n};\n\n/**\n * The status of a form training operation\n */\nexport type TrainingOperationState = PollOperationState<CustomFormModelInfo> & {\n  /**\n   * A string representing the current status of the operation.\n   */\n  status: ModelStatus;\n};\n\n/**\n * Options for starting model training operation.\n */\nexport type BeginTrainingOptions = TrainingFileFilter & {\n  updateIntervalInMs?: number;\n  onProgress?: (state: TrainingOperationState) => void;\n  resumeFrom?: string;\n};\n\n/**\n * Client class for training and managing custom form models.\n */\nexport class FormTrainingClient {\n  /**\n   * Url to an Azure Form Recognizer service endpoint\n   */\n  public readonly endpointUrl: string;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  private readonly credential: TokenCredential | KeyCredential;\n\n  /**\n   * @internal\n   * @ignore\n   */\n  private readonly clientOptions: FormRecognizerClientOptions;\n\n  /**\n   * @internal\n   * @ignore\n   * A reference to the auto-generated FormRecognizer HTTP client.\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of FormTrainingClient.\n   *\n   * Example usage:\n   * ```ts\n   * import {FormTrainingClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n   *\n   * const client = new FormTrainingClient(\n   *    \"<service endpoint>\",\n   *    new AzureKeyCredential(\"<api key>\")\n   * );\n   * ```\n   * @param {string} endpointUrl Url to an Azure Form Recognizer service endpoint\n   * @param {TokenCredential | KeyCredential} credential Used to authenticate requests to the service.\n   * @param {FormRecognizerClientOptions} [options] Used to configure the client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential | KeyCredential,\n    options: FormRecognizerClientOptions = {}\n  ) {\n    this.endpointUrl = endpointUrl;\n    this.credential = credential;\n    this.clientOptions = options;\n    const { ...pipelineOptions } = options;\n\n    const libInfo = `azsdk-js-ai-formrecognizer/${SDK_VERSION}`;\n    if (!pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions = {};\n    }\n    if (pipelineOptions.userAgentOptions.userAgentPrefix) {\n      pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const authPolicy = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy(credential, DEFAULT_COGNITIVE_SCOPE)\n      : createFormRecognizerAzureKeyCredentialPolicy(credential);\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: FormRecognizerLoggingAllowedHeaderNames,\n          allowedQueryParameters: FormRecognizerLoggingAllowedQueryParameters\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n\n    this.client = new GeneratedClient(this.endpointUrl, pipeline);\n  }\n\n  /**\n   * Retrieves summary information about the cognitive service account\n   *\n   * @param {GetAccountPropertiesOptions} options Options to GetSummary operation\n   */\n  public async getAccountProperties(\n    options?: GetAccountPropertiesOptions\n  ): Promise<AccountProperties> {\n    const realOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-listCustomModels\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.getCustomModels({\n        ...operationOptionsToRequestOptionsBase(finalOptions)\n      });\n\n      return {\n        customModelLimit: result.summary!.limit,\n        customModelCount: result.summary!.count\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates an instance of {@link FormTrainingClient} to perform training operations\n   * and to manage trained custom form models.\n   */\n  public getFormRecognizerClient(): FormRecognizerClient {\n    return new FormRecognizerClient(this.endpointUrl, this.credential, this.clientOptions);\n  }\n\n  /**\n   * Mark model for deletion. Model artifacts will be permanently removed within 48 hours.\n   *\n   * @param {string} modelId Id of the model to mark for deletion\n   * @param {DeleteModelOptions} options Options to the Delete Model operation\n   */\n  public async deleteModel(modelId: string, options?: DeleteModelOptions): Promise<RestResponse> {\n    const realOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-deleteModel\",\n      realOptions\n    );\n\n    try {\n      return await this.client.deleteCustomModel(\n        modelId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get detailed information about a custom model from training.\n   *\n   * @param {string} modelId Id of the model to get information\n   * @param {GetModelOptions} options Options to the Get Model operation\n   */\n  public async getCustomModel(\n    modelId: string,\n    options: GetModelOptions = {}\n  ): Promise<FormModelResponse> {\n    const realOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-getCustomModel\",\n      realOptions\n    );\n\n    try {\n      const response = await this.client.getCustomModel(modelId, {\n        ...operationOptionsToRequestOptionsBase(finalOptions),\n        // Include keys is always set to true -- the service does not have a use case for includeKeys: false.\n        includeKeys: true\n      });\n\n      return toFormModelResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listModelsPage(\n    settings: PageSettings,\n    options: ListModelsOptions = {}\n  ): AsyncIterableIterator<ListCustomModelsResponse> {\n    let result: ListCustomModelsResponse;\n    if (settings.continuationToken) {\n      result = await this.listNextPage(settings.continuationToken, options);\n    } else {\n      result = await this.list(options);\n    }\n    yield result;\n\n    while (result.nextLink) {\n      result = await this.listNextPage(result.nextLink, options);\n      yield result;\n    }\n  }\n\n  private async *listModelsAll(\n    settings: PageSettings,\n    options: ListModelsOptions = {}\n  ): AsyncIterableIterator<CustomFormModelInfo> {\n    for await (const page of this.listModelsPage(settings, options)) {\n      yield* page.modelList || [];\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list information about all models in the cognitive service account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * const client = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));\n   * const result = client.listCustomModels();\n   * let i = 1;\n   * for await (const model of result) {\n   *   console.log(`model ${i++}:`);\n   *   console.log(model);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * let iter = client.listCustomModels();\n   * let modelItem = await iter.next();\n   * while (!modelItem.done) {\n   *   console.log(`model ${i++}: ${modelItem.value}`);\n   *   modelItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   *  let i = 1;\n   *  for await (const response of client.listCustomModels().byPage()) {\n   *    for (const modelInfo of response.modelList!) {\n   *      console.log(`model ${i++}: ${modelInfo.modelId}`);\n   *    }\n   *  }\n   * ```\n   *\n   * @param {ListModelOptions} options Options to the List Models operation\n   */\n  public listCustomModels(\n    options: ListModelsOptions = {}\n  ): PagedAsyncIterableIterator<CustomFormModelInfo, ListCustomModelsResponse> {\n    const iter = this.listModelsAll({}, options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n\n      byPage: (settings: PageSettings = {}) => {\n        return this.listModelsPage(settings, options);\n      }\n    };\n  }\n\n  private async list(options?: ListModelsOptions): Promise<ListCustomModelsResponse> {\n    const realOptions: ListModelsOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-list\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.listCustomModels({\n        ...operationOptionsToRequestOptionsBase(finalOptions)\n      });\n\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async listNextPage(\n    nextLink: string,\n    options?: ListModelsOptions\n  ): Promise<ListCustomModelsResponse> {\n    const realOptions: ListModelsOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-listNextPage\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.listCustomModelsNext(nextLink, {\n        ...operationOptionsToRequestOptionsBase(finalOptions)\n      });\n\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates and trains a custom form model.\n   * This method returns a long running operation poller that allows you to wait\n   * indefinitely until the operation is completed.\n   * Note that the onProgress callback will not be invoked if the operation completes in the first\n   * request, and attempting to cancel a completed copy will result in an error being thrown.\n   *\n   * Note that when training operation fails, a model is still created in Azure Form Recognizer resource.\n   *\n   * Example usage:\n   * ```ts\n   * const trainingFilesUrl = \"<url to the blob container storing training documents>\";\n   * const trainingClient = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));\n   *\n   * const poller = await trainingClient.beginTraining(trainingFilesUrl, false, {\n   *   onProgress: (state) => { console.log(\"training status: \"); console.log(state); }\n   * });\n   * const model = await poller.pollUntilDone();\n   * ```\n   * @summary Creates and trains a model\n   * @param {string} trainingFilesUrl Accessible url to an Azure Storage Blob container storing the training documents\n   * @param {boolean} useTrainingLabels specifies whether to training the model using label files\n   * @param {BeginTrainingOptions} [options] Options to start model training operation\n   */\n  public async beginTraining(\n    trainingFilesUrl: string,\n    useTrainingLabels: boolean,\n    options: BeginTrainingOptions = {}\n  ): Promise<PollerLike<TrainingOperationState, CustomFormModel>> {\n    const trainPollerClient: TrainPollerClient = {\n      getCustomModel: (modelId: string, options: GetModelOptions) =>\n        this.getCustomModel(modelId, options),\n      trainCustomModelInternal: (\n        source: string,\n        _useLabelFile?: boolean,\n        options?: TrainingFileFilter\n      ) => trainCustomModelInternal(this.client, source, useTrainingLabels, options)\n    };\n\n    const poller = new BeginTrainingPoller({\n      client: trainPollerClient,\n      source: trainingFilesUrl,\n      updateIntervalInMs: options.updateIntervalInMs,\n      onProgress: options.onProgress,\n      resumeFrom: options.resumeFrom,\n      trainModelOptions: options\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Generate an authorization for copying a custom model into this Azure Form Recognizer resource.\n   *\n   * This method should be called on a client that is authenticated using the target resource (where the\n   * model will be copied to) credentials, and the output can be passed as the `target` parameter to the\n   * `beginCopyModel` method of a source client.\n   *\n   * The required `resourceId` and `resourceRegion` are properties of an Azure Form Recognizer resource and their values can be found in the Azure Portal.\n   *\n   * @param {string} resourceId Id of the Azure Form Recognizer resource where a custom model will be copied to\n   * @param {string} resourceRegion Location of the Azure Form Recognizer resource, must be a valid region name supported by Azure Cognitive Services. See https://aka.ms/azsdk/cognitiveservices/regionalavailability for information about the regional availability of Azure Cognitive Services.\n   * @param {GetCopyAuthorizationOptions} [options={}] Options to get copy authorization operation\n   * @returns {Promise<CopyAuthorization>} The authorization to copy a custom model\n   */\n  public async getCopyAuthorization(\n    resourceId: string,\n    resourceRegion: string,\n    options: GetCopyAuthorizationOptions = {}\n  ): Promise<CopyAuthorization> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-getCopyAuthorization\",\n      options\n    );\n\n    try {\n      const response = (await this.client.generateModelCopyAuthorization(\n        operationOptionsToRequestOptionsBase(finalOptions)\n      )) as CopyAuthorizationResult;\n      return {\n        resourceId: resourceId,\n        resourceRegion: resourceRegion,\n        expiresOn: new Date(response.expirationDateTimeTicks * 1000), // Convert to ms\n        modelId: response.modelId,\n        accessToken: response.accessToken\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Copies a custom model from this resource (the source) to the specified target Form Recognizer resource.\n   * This method returns a long running operation poller that allows you to wait\n   * indefinitely until the operation is completed.\n   * Note that the onProgress callback will not be invoked if the operation completes in the first\n   * request, and attempting to cancel a completed copy will result in an error being thrown.\n   *\n   * Example usage:\n   * ```ts\n   * const targetClient = new FormTrainingClient(targetEndpoint, new AzureKeyCredential(targetApiKey));\n   * const authorization = await targetClient.getCopyAuthorization(targetResourceId, targetResourceRegion);\n   *\n   * const sourceClient = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));\n   * const poller = await sourceClient.beginCopyModel(sourceModelId, authorization, {\n   *   onProgress: (state) => {\n   *     console.log(`Copy model status: ${state.status}`);\n   *   }\n   * });\n   * const result = await poller.pollUntilDone();\n   * ```\n   * @summary Copies custom model to target resource\n   * @param {string} modelId Id of the custom model in this resource to be copied to the target Form Recognizer resource\n   * @param {CopyAuthorization} target Copy authorization produced by calling `targetTrainingClient.getCopyAuthorization()`\n   * @param {BeginTrainingOptions} [options] Options to copy model operation\n   */\n  public async beginCopyModel(\n    modelId: string,\n    target: CopyAuthorization,\n    options: BeginCopyModelOptions = {}\n  ): Promise<PollerLike<CopyModelOperationState, CustomFormModelInfo>> {\n    const copyModelClient: CopyModelPollerClient = {\n      beginCopyModel: (...args) => this.beginCopyModelInternal(...args),\n      getCopyModelResult: (...args) => this.getCopyModelResult(...args)\n    };\n\n    const poller = new BeginCopyModelPoller({\n      client: copyModelClient,\n      modelId,\n      targetResourceId: target.resourceId,\n      targetResourceRegion: target.resourceRegion,\n      copyAuthorization: target,\n      onProgress: options.onProgress,\n      resumeFrom: options.resumeFrom,\n      ...options\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  private async beginCopyModelInternal(\n    modelId: string,\n    copyAuthorization: CopyAuthorization,\n    options: BeginCopyModelOptions = {}\n  ): Promise<CopyCustomModelResponseModel> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-beginCopyModelInternal\",\n      options\n    );\n\n    try {\n      return await this.client.copyCustomModel(\n        modelId,\n        {\n          targetResourceId: copyAuthorization.resourceId,\n          targetResourceRegion: copyAuthorization.resourceRegion,\n          copyAuthorization: {\n            modelId: copyAuthorization.modelId,\n            accessToken: copyAuthorization.accessToken,\n            expirationDateTimeTicks: copyAuthorization.expiresOn.getTime() / 1000\n          }\n        },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async getCopyModelResult(\n    modelId: string,\n    resultId: string,\n    options: GetCopyModelResultOptions = {}\n  ): Promise<GetCustomModelCopyResultResponseModel> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-getCopyModelResult\",\n      options\n    );\n\n    try {\n      return await this.client.getCustomModelCopyResult(\n        modelId,\n        resultId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n\n/**\n * @private\n */\nasync function trainCustomModelInternal(\n  client: GeneratedClient,\n  source: string,\n  useLabelFile?: boolean,\n  options?: TrainingFileFilter\n): Promise<GeneratedClientTrainCustomModelAsyncResponse> {\n  const realOptions = options || {};\n  const { span, updatedOptions: finalOptions } = createSpan(\n    \"trainCustomModelInternal\",\n    realOptions\n  );\n\n  try {\n    return await client.trainCustomModelAsync(\n      {\n        source: source,\n        sourceFilter: {\n          prefix: realOptions.prefix,\n          includeSubfolders: realOptions.includeSubfolders\n        },\n        useLabelFile\n      },\n      operationOptionsToRequestOptionsBase(finalOptions)\n    );\n  } catch (e) {\n    span.setStatus({\n      code: CanonicalCode.UNKNOWN,\n      message: e.message\n    });\n    throw e;\n  } finally {\n    span.end();\n  }\n}\n"],"names":["createClientLogger","getTracer","SpanKind","TrainRequestMapper","SourcePathMapper","CopyRequestMapper","coreHttp.ServiceClient","coreHttp.getDefaultUserAgentValue","coreHttp.operationOptionsToRequestOptionsBase","coreHttp.Serializer","Mappers.GeneratedClientTrainCustomModelAsyncHeaders","Mappers.ErrorResponse","Parameters.trainRequest","Parameters.endpoint","Parameters.contentType","Mappers.Model","Parameters.includeKeys","Parameters.modelId","Mappers.GeneratedClientAnalyzeWithCustomModelHeaders","Parameters.fileStream","Parameters.includeTextDetails","Parameters.contentType1","Parameters.fileStream1","Parameters.contentType2","Mappers.AnalyzeOperationResult","Parameters.resultId","Mappers.GeneratedClientCopyCustomModelHeaders","Parameters.copyRequest","Mappers.CopyOperationResult","Mappers.CopyAuthorizationResult","Mappers.GeneratedClientGenerateModelCopyAuthorizationHeaders","Mappers.GeneratedClientAnalyzeReceiptAsyncHeaders","Mappers.GeneratedClientAnalyzeLayoutAsyncHeaders","Mappers.Models","Parameters.op","Parameters.op1","Parameters.nextLink","Poller","delay","makeBeginRecognizePollOperation","BaseRequestPolicy","isTokenCredential","bearerTokenAuthenticationPolicy","createPipelineFromOptions","operationOptionsToRequestOptionsBase","CanonicalCode","__asyncValues","__asyncDelegator"],"mappings":"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"}